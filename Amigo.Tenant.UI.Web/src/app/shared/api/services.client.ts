/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.6.6221.23503 (NJsonSchema v7.6.6221.22528) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx';
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, InjectionToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';
import {AmigoTenantServiceBase} from './amigotenantservicebase';
import {AmigoTenantOffsetBase} from './amigotenantoffsetbase';
import { environment } from '../../../environments/environment';

export const API_BASE_URL = new InjectionToken('API_BASE_URL');


export interface ILocationClient {
    /**
     * @return OK
     */
    search(search_name: string, search_code: string, search_zipCode: string, search_hasGeofence: boolean, search_countryISOCode: string, search_stateCode: string, search_cityCode: string, search_locationTypeCode: string, search_parentLocationCode: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfLocationDTO>;
    /**
     * @return OK
     */
    get(getRequest_code: string): Observable<ResponseDTOOfLocationWithCoordinatesDTO>;
    /**
     * @return OK
     */
    listCoordinates(search_locationCode: string): Observable<ResponseDTOOfListOfLocationCoordinateDTO>;
    /**
     * @return OK
     */
    getLocationAll(): Observable<ResponseDTOOfListOfLocationDTO>;
    /**
     * @return OK
     */
    getLocationAllTypeAhead(): Observable<ResponseDTOOfListOfLocationTypeAheadDTO>;
    /**
     * @return OK
     */
    getCities(): Observable<ResponseDTOOfListOfCityDTO>;
    /**
     * @return OK
     */
    getParentLocations(): Observable<ResponseDTOOfListOfParentLocationDTO>;
    /**
     * @return OK
     */
    getLocationTypes(): Observable<ResponseDTOOfListOfLocationTypeDTO>;
    /**
     * @return OK
     */
    register(location: RegisterLocationRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(location: UpdateLocationRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(location: DeleteLocationRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    registerCoordinates(locationCoordinates: RegisterLocationCoordinatesRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    deleteCoordinates(location: DeleteLocationCoordinatesRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    getLocationAllTypeAheadByName(name: string): Observable<ResponseDTOOfListOfLocationTypeAheadDTO>;
    /**
     * @return OK
     */
    searchByName(name: string): Observable<LocationTypeAheadDTO>;
}

@Injectable()
export class LocationClient extends AmigoTenantServiceBase implements ILocationClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_name: string, search_code: string, search_zipCode: string, search_hasGeofence: boolean, search_countryISOCode: string, search_stateCode: string, search_cityCode: string, search_locationTypeCode: string, search_parentLocationCode: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfLocationDTO> {
        let url_ = this.baseUrl + "/api/location/search?";
        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_zipCode !== undefined)

            url_ += "search.zipCode=" + encodeURIComponent("" + search_zipCode) + "&";

        if (search_hasGeofence !== undefined)

            url_ += "search.hasGeofence=" + encodeURIComponent("" + search_hasGeofence) + "&";

        if (search_countryISOCode !== undefined)

            url_ += "search.countryISOCode=" + encodeURIComponent("" + search_countryISOCode) + "&";

        if (search_stateCode !== undefined)

            url_ += "search.stateCode=" + encodeURIComponent("" + search_stateCode) + "&";

        if (search_cityCode !== undefined)

            url_ += "search.cityCode=" + encodeURIComponent("" + search_cityCode) + "&";

        if (search_locationTypeCode !== undefined)

            url_ += "search.locationTypeCode=" + encodeURIComponent("" + search_locationTypeCode) + "&";

        if (search_parentLocationCode !== undefined)

            url_ += "search.parentLocationCode=" + encodeURIComponent("" + search_parentLocationCode) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfLocationDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfLocationDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfLocationDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfLocationDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfLocationDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfLocationDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    get(getRequest_code: string): Observable<ResponseDTOOfLocationWithCoordinatesDTO> {
        let url_ = this.baseUrl + "/api/location/get?";
        if (getRequest_code !== undefined)

            url_ += "getRequest.code=" + encodeURIComponent("" + getRequest_code) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGet(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGet(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfLocationWithCoordinatesDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfLocationWithCoordinatesDTO>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): ResponseDTOOfLocationWithCoordinatesDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfLocationWithCoordinatesDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfLocationWithCoordinatesDTO.fromJS(resultData200) : new ResponseDTOOfLocationWithCoordinatesDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    listCoordinates(search_locationCode: string): Observable<ResponseDTOOfListOfLocationCoordinateDTO> {
        let url_ = this.baseUrl + "/api/location/listCoordinates?";
        if (search_locationCode !== undefined)

            url_ += "search.locationCode=" + encodeURIComponent("" + search_locationCode) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processListCoordinates(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processListCoordinates(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfLocationCoordinateDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfLocationCoordinateDTO>><any>Observable.throw(response);
        });
    }

    protected processListCoordinates(response: Response): ResponseDTOOfListOfLocationCoordinateDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfLocationCoordinateDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfLocationCoordinateDTO.fromJS(resultData200) : new ResponseDTOOfListOfLocationCoordinateDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getLocationAll(): Observable<ResponseDTOOfListOfLocationDTO> {
        let url_ = this.baseUrl + "/api/location/searchLocationAll";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetLocationAll(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetLocationAll(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfLocationDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfLocationDTO>><any>Observable.throw(response);
        });
    }

    protected processGetLocationAll(response: Response): ResponseDTOOfListOfLocationDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfLocationDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfLocationDTO.fromJS(resultData200) : new ResponseDTOOfListOfLocationDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getLocationAllTypeAhead(): Observable<ResponseDTOOfListOfLocationTypeAheadDTO> {
        let url_ = this.baseUrl + "/api/location/searchLocationAllTypeAhead";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetLocationAllTypeAhead(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetLocationAllTypeAhead(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfLocationTypeAheadDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfLocationTypeAheadDTO>><any>Observable.throw(response);
        });
    }

    protected processGetLocationAllTypeAhead(response: Response): ResponseDTOOfListOfLocationTypeAheadDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfLocationTypeAheadDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfLocationTypeAheadDTO.fromJS(resultData200) : new ResponseDTOOfListOfLocationTypeAheadDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getCities(): Observable<ResponseDTOOfListOfCityDTO> {
        let url_ = this.baseUrl + "/api/location/getCities";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetCities(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetCities(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfCityDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfCityDTO>><any>Observable.throw(response);
        });
    }

    protected processGetCities(response: Response): ResponseDTOOfListOfCityDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfCityDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfCityDTO.fromJS(resultData200) : new ResponseDTOOfListOfCityDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getParentLocations(): Observable<ResponseDTOOfListOfParentLocationDTO> {
        let url_ = this.baseUrl + "/api/location/getParentLocations";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetParentLocations(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetParentLocations(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfParentLocationDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfParentLocationDTO>><any>Observable.throw(response);
        });
    }

    protected processGetParentLocations(response: Response): ResponseDTOOfListOfParentLocationDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfParentLocationDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfParentLocationDTO.fromJS(resultData200) : new ResponseDTOOfListOfParentLocationDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getLocationTypes(): Observable<ResponseDTOOfListOfLocationTypeDTO> {
        let url_ = this.baseUrl + "/api/location/getLocationTypes";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetLocationTypes(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetLocationTypes(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfLocationTypeDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfLocationTypeDTO>><any>Observable.throw(response);
        });
    }

    protected processGetLocationTypes(response: Response): ResponseDTOOfListOfLocationTypeDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfLocationTypeDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfLocationTypeDTO.fromJS(resultData200) : new ResponseDTOOfListOfLocationTypeDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(location: RegisterLocationRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/location/register";

        const content_ = JSON.stringify(location ? location.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(location: UpdateLocationRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/location/update";

        const content_ = JSON.stringify(location ? location.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(location: DeleteLocationRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/location/delete";

        const content_ = JSON.stringify(location ? location.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    registerCoordinates(locationCoordinates: RegisterLocationCoordinatesRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/location/registerCoordinates";

        const content_ = JSON.stringify(locationCoordinates ? locationCoordinates.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegisterCoordinates(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegisterCoordinates(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegisterCoordinates(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    deleteCoordinates(location: DeleteLocationCoordinatesRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/location/deleteCoordinates";

        const content_ = JSON.stringify(location ? location.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDeleteCoordinates(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDeleteCoordinates(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDeleteCoordinates(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getLocationAllTypeAheadByName(name: string): Observable<ResponseDTOOfListOfLocationTypeAheadDTO> {
        let url_ = this.baseUrl + "/api/location/searchLocationAllTypeAheadByName?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetLocationAllTypeAheadByName(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetLocationAllTypeAheadByName(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfLocationTypeAheadDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfLocationTypeAheadDTO>><any>Observable.throw(response);
        });
    }

    protected processGetLocationAllTypeAheadByName(response: Response): ResponseDTOOfListOfLocationTypeAheadDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfLocationTypeAheadDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfLocationTypeAheadDTO.fromJS(resultData200) : new ResponseDTOOfListOfLocationTypeAheadDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchByName(name: string): Observable<LocationTypeAheadDTO> {
        let url_ = this.baseUrl + "/api/location/searchLocationByName?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchByName(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchByName(response)));
                } catch (e) {
                    return <Observable<LocationTypeAheadDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<LocationTypeAheadDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchByName(response: Response): LocationTypeAheadDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: LocationTypeAheadDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocationTypeAheadDTO.fromJS(resultData200) : new LocationTypeAheadDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export interface IMainMenuClient {
    /**
     * @return OK
     */
    search(search_userId: number): Observable<ResponseDTOOfIEnumerableOfMainMenuDTO>;
}

@Injectable()
export class MainMenuClient extends AmigoTenantServiceBase implements IMainMenuClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_userId: number): Observable<ResponseDTOOfIEnumerableOfMainMenuDTO> {
        let url_ = this.baseUrl + "/api/mainMenu/search?";
        if (search_userId !== undefined)

            url_ += "search.userId=" + encodeURIComponent("" + search_userId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfIEnumerableOfMainMenuDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfIEnumerableOfMainMenuDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfIEnumerableOfMainMenuDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfIEnumerableOfMainMenuDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfIEnumerableOfMainMenuDTO.fromJS(resultData200) : new ResponseDTOOfIEnumerableOfMainMenuDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export interface IModuleClient {
    /**
     * @return OK
     */
    search(search_code: string, search_name: string, search_parentName: string, search_onlyParents: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfModuleDTO>;
    /**
     * @return OK
     */
    get(getRequest_code: string): Observable<ResponseDTOOfModuleActionsDTO>;
    /**
     * @return OK
     */
    register(module: RegisterModuleRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(module: UpdateModuleRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(module: DeleteModuleRequest): Observable<ResponseDTO>;
}

@Injectable()
export class ModuleClient extends AmigoTenantServiceBase implements IModuleClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_code: string, search_name: string, search_parentName: string, search_onlyParents: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfModuleDTO> {
        let url_ = this.baseUrl + "/api/modules/search?";
        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_parentName !== undefined)

            url_ += "search.parentName=" + encodeURIComponent("" + search_parentName) + "&";

        if (search_onlyParents !== undefined)

            url_ += "search.onlyParents=" + encodeURIComponent("" + search_onlyParents) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfModuleDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfModuleDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfModuleDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfModuleDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfModuleDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfModuleDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    get(getRequest_code: string): Observable<ResponseDTOOfModuleActionsDTO> {
        let url_ = this.baseUrl + "/api/modules/get?";
        if (getRequest_code !== undefined)

            url_ += "getRequest.code=" + encodeURIComponent("" + getRequest_code) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGet(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGet(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfModuleActionsDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfModuleActionsDTO>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): ResponseDTOOfModuleActionsDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfModuleActionsDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfModuleActionsDTO.fromJS(resultData200) : new ResponseDTOOfModuleActionsDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(module: RegisterModuleRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/modules/register";

        const content_ = JSON.stringify(module ? module.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(module: UpdateModuleRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/modules/update";

        const content_ = JSON.stringify(module ? module.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(module: DeleteModuleRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/modules/delete";

        const content_ = JSON.stringify(module ? module.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}


export interface IParametersClient {
    /**
     * @return OK
     */
    getAmigoTenantParameters(): Observable<ResponseDTOOfListOfAmigoTenantParameterDTO>;
    /**
     * @return OK
     */
    searchParametersForMobile(): Observable<ResponseDTOOfListOfCustomAmigoTenantParameterDTO>;
}

@Injectable()
export class ParametersClient extends AmigoTenantServiceBase implements IParametersClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    getAmigoTenantParameters(): Observable<ResponseDTOOfListOfAmigoTenantParameterDTO> {
        let url_ = this.baseUrl + "/api/parameters/GetAmigoTenantParameters";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetAmigoTenantParameters(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetAmigoTenantParameters(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfAmigoTenantParameterDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfAmigoTenantParameterDTO>><any>Observable.throw(response);
        });
    }

    protected processGetAmigoTenantParameters(response: Response): ResponseDTOOfListOfAmigoTenantParameterDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfAmigoTenantParameterDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfAmigoTenantParameterDTO.fromJS(resultData200) : new ResponseDTOOfListOfAmigoTenantParameterDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchParametersForMobile(): Observable<ResponseDTOOfListOfCustomAmigoTenantParameterDTO> {
        let url_ = this.baseUrl + "/api/parameters/SearchParametersForMobile";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchParametersForMobile(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchParametersForMobile(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfCustomAmigoTenantParameterDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfCustomAmigoTenantParameterDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchParametersForMobile(response: Response): ResponseDTOOfListOfCustomAmigoTenantParameterDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfCustomAmigoTenantParameterDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfCustomAmigoTenantParameterDTO.fromJS(resultData200) : new ResponseDTOOfListOfCustomAmigoTenantParameterDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export interface IPermissionClient {
    /**
     * @return OK
     */
    search(search: PermissionSearchRequest): Observable<ResponseDTOOfPagedListOfPermissionDTO>;
    /**
     * @return OK
     */
    exists(search: PermissionSearchRequest): Observable<boolean>;
    /**
     * @return OK
     */
    register(dto: PermissionDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(dto: PermissionStatusDTO): Observable<ResponseDTO>;
}

@Injectable()
export class PermissionClient extends AmigoTenantServiceBase implements IPermissionClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search: PermissionSearchRequest): Observable<ResponseDTOOfPagedListOfPermissionDTO> {
        let url_ = this.baseUrl + "/api/Permission/search";

        const content_ = JSON.stringify(search ? search.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfPermissionDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfPermissionDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfPermissionDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfPermissionDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfPermissionDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfPermissionDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    exists(search: PermissionSearchRequest): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Permission/exists";

        const content_ = JSON.stringify(search ? search.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processExists(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processExists(response)));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processExists(response: Response): boolean {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(dto: PermissionDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/Permission/register";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(dto: PermissionStatusDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/Permission/delete";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}


export interface IAmigoTenantTRoleClient {
    /**
     * @return OK
     */
    search(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>;
    /**
     * @return OK
     */
    customRoleSearch(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>;
    /**
     * @return OK
     */
    searchById(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO>;
    /**
     * @return OK
     */
    getRol(code: string): Observable<ResponseDTOOfListOfModuleTreeDTO>;
    /**
     * @return OK
     */
    getModuleAction(): Observable<ResponseDTOOfListOfModuleTreeDTO>;
    /**
     * @return OK
     */
    exists(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<boolean>;
    /**
     * @return OK
     */
    register(dto: AmigoTenantTRoleDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(dto: AmigoTenantTRoleDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    updateActions(actions: AmigoTenanttRolPermissionRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(dto: AmigoTenantTRoleStatusDTO): Observable<ResponseDTO>;
}

@Injectable()
export class AmigoTenantTRoleClient extends AmigoTenantServiceBase implements IAmigoTenantTRoleClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/searchCriteria?";
        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_isAdmin !== undefined)

            url_ += "search.isAdmin=" + encodeURIComponent("" + search_isAdmin) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfAmigoTenantTRoleDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfAmigoTenantTRoleDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfAmigoTenantTRoleDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfAmigoTenantTRoleDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    customRoleSearch(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/CustomRoleSearch?";
        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_isAdmin !== undefined)

            url_ += "search.isAdmin=" + encodeURIComponent("" + search_isAdmin) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processCustomRoleSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processCustomRoleSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleDTO>><any>Observable.throw(response);
        });
    }

    protected processCustomRoleSearch(response: Response): ResponseDTOOfPagedListOfAmigoTenantTRoleDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfAmigoTenantTRoleDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfAmigoTenantTRoleDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfAmigoTenantTRoleDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchById(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/searchBasicCriteria?";
        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_isAdmin !== undefined)

            url_ += "search.isAdmin=" + encodeURIComponent("" + search_isAdmin) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchById(response: Response): ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getRol(code: string): Observable<ResponseDTOOfListOfModuleTreeDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/getRolTree?";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
        else
            url_ += "code=" + encodeURIComponent("" + code) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetRol(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetRol(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfModuleTreeDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfModuleTreeDTO>><any>Observable.throw(response);
        });
    }

    protected processGetRol(response: Response): ResponseDTOOfListOfModuleTreeDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfModuleTreeDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfModuleTreeDTO.fromJS(resultData200) : new ResponseDTOOfListOfModuleTreeDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getModuleAction(): Observable<ResponseDTOOfListOfModuleTreeDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/getModuleAction";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetModuleAction(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetModuleAction(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfModuleTreeDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfModuleTreeDTO>><any>Observable.throw(response);
        });
    }

    protected processGetModuleAction(response: Response): ResponseDTOOfListOfModuleTreeDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfModuleTreeDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfModuleTreeDTO.fromJS(resultData200) : new ResponseDTOOfListOfModuleTreeDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    exists(search_amigoTenantTRoleId: number, search_name: string, search_code: string, search_isAdmin: boolean, search_page: number, search_pageSize: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/exists?";
        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_name !== undefined)

            url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

        if (search_code !== undefined)

            url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

        if (search_isAdmin !== undefined)

            url_ += "search.isAdmin=" + encodeURIComponent("" + search_isAdmin) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processExists(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processExists(response)));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processExists(response: Response): boolean {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(dto: AmigoTenantTRoleDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/register";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(dto: AmigoTenantTRoleDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/update";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    updateActions(actions: AmigoTenanttRolPermissionRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/updateActions";

        const content_ = JSON.stringify(actions ? actions.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdateActions(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdateActions(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdateActions(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(dto: AmigoTenantTRoleStatusDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/AmigoTenantTRole/delete";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}


export interface IUsersClient {
    /**
     * @return OK
     */
    search(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTUserDTO>;
    /**
     * @return OK
     */
    searchForAutocomplete(search_userName: string, search_firstName: string, search_lastName: string, search_customUsername: string): Observable<ResponseDTOOfListOfAmigoTenantTUserBasicDTO>;
    /**
     * @return OK
     */
    searchById(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<AmigoTenantTUserDTO>;
    /**
     * @return OK
     */
    searchBaseInfoById(shutttleUserId: number): Observable<AmigoTenantUserBasicDTO>;
    /**
     * @return OK
     */
    exists(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<boolean>;
    /**
     * @return OK
     */
    validateUserName(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<UserResponse>;
    /**
     * @return OK
     */
    register(dto: AmigoTenantTUserDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(dto: AmigoTenantTUserDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(dto: AmigoTenantTUserStatusDTO): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    validateAuthorization(search: AuthorizationRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    searchByIdForAudit(createdBy: number, updatedBy: number): Observable<AmigoTenantTUserAuditDTO>;
}

@Injectable()
export class UsersClient extends AmigoTenantServiceBase implements IUsersClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfAmigoTenantTUserDTO> {
        let url_ = this.baseUrl + "/api/users/search?";
        if (search_amigoTenantTUserId !== undefined)

            url_ += "search.amigoTenantTUserId=" + encodeURIComponent("" + search_amigoTenantTUserId) + "&";

        if (search_userName !== undefined)

            url_ += "search.userName=" + encodeURIComponent("" + search_userName) + "&";

        if (search_firstName !== undefined)

            url_ += "search.firstName=" + encodeURIComponent("" + search_firstName) + "&";

        if (search_lastName !== undefined)

            url_ += "search.lastName=" + encodeURIComponent("" + search_lastName) + "&";

        if (search_dedicatedLocationId !== undefined)

            url_ += "search.dedicatedLocationId=" + encodeURIComponent("" + search_dedicatedLocationId) + "&";

        if (search_userType !== undefined)

            url_ += "search.userType=" + encodeURIComponent("" + search_userType) + "&";

        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_payBy !== undefined)

            url_ += "search.payBy=" + encodeURIComponent("" + search_payBy) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfAmigoTenantTUserDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfAmigoTenantTUserDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfAmigoTenantTUserDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfAmigoTenantTUserDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfAmigoTenantTUserDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfAmigoTenantTUserDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchForAutocomplete(search_userName: string, search_firstName: string, search_lastName: string, search_customUsername: string): Observable<ResponseDTOOfListOfAmigoTenantTUserBasicDTO> {
        let url_ = this.baseUrl + "/api/users/searchForAutocomplete?";
        if (search_userName !== undefined)

            url_ += "search.userName=" + encodeURIComponent("" + search_userName) + "&";

        if (search_firstName !== undefined)

            url_ += "search.firstName=" + encodeURIComponent("" + search_firstName) + "&";

        if (search_lastName !== undefined)

            url_ += "search.lastName=" + encodeURIComponent("" + search_lastName) + "&";

        if (search_customUsername !== undefined)

            url_ += "search.customUsername=" + encodeURIComponent("" + search_customUsername) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchForAutocomplete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchForAutocomplete(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfAmigoTenantTUserBasicDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfAmigoTenantTUserBasicDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchForAutocomplete(response: Response): ResponseDTOOfListOfAmigoTenantTUserBasicDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfAmigoTenantTUserBasicDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfAmigoTenantTUserBasicDTO.fromJS(resultData200) : new ResponseDTOOfListOfAmigoTenantTUserBasicDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchById(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<AmigoTenantTUserDTO> {
        let url_ = this.baseUrl + "/api/users/searchCode?";
        if (search_amigoTenantTUserId !== undefined)

            url_ += "search.amigoTenantTUserId=" + encodeURIComponent("" + search_amigoTenantTUserId) + "&";

        if (search_userName !== undefined)

            url_ += "search.userName=" + encodeURIComponent("" + search_userName) + "&";

        if (search_firstName !== undefined)

            url_ += "search.firstName=" + encodeURIComponent("" + search_firstName) + "&";

        if (search_lastName !== undefined)

            url_ += "search.lastName=" + encodeURIComponent("" + search_lastName) + "&";

        if (search_dedicatedLocationId !== undefined)

            url_ += "search.dedicatedLocationId=" + encodeURIComponent("" + search_dedicatedLocationId) + "&";

        if (search_userType !== undefined)

            url_ += "search.userType=" + encodeURIComponent("" + search_userType) + "&";

        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_payBy !== undefined)

            url_ += "search.payBy=" + encodeURIComponent("" + search_payBy) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchById(response)));
                } catch (e) {
                    return <Observable<AmigoTenantTUserDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<AmigoTenantTUserDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchById(response: Response): AmigoTenantTUserDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: AmigoTenantTUserDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AmigoTenantTUserDTO.fromJS(resultData200) : new AmigoTenantTUserDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchBaseInfoById(shutttleUserId: number): Observable<AmigoTenantUserBasicDTO> {
        let url_ = this.baseUrl + "/api/users/searchBaseInfoById?";
        if (shutttleUserId === undefined || shutttleUserId === null)
            throw new Error("The parameter 'shutttleUserId' must be defined and cannot be null.");
        else
            url_ += "shutttleUserId=" + encodeURIComponent("" + shutttleUserId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchBaseInfoById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchBaseInfoById(response)));
                } catch (e) {
                    return <Observable<AmigoTenantUserBasicDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<AmigoTenantUserBasicDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchBaseInfoById(response: Response): AmigoTenantUserBasicDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: AmigoTenantUserBasicDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AmigoTenantUserBasicDTO.fromJS(resultData200) : new AmigoTenantUserBasicDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    exists(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<boolean> {
        let url_ = this.baseUrl + "/api/users/exists?";
        if (search_amigoTenantTUserId !== undefined)

            url_ += "search.amigoTenantTUserId=" + encodeURIComponent("" + search_amigoTenantTUserId) + "&";

        if (search_userName !== undefined)

            url_ += "search.userName=" + encodeURIComponent("" + search_userName) + "&";

        if (search_firstName !== undefined)

            url_ += "search.firstName=" + encodeURIComponent("" + search_firstName) + "&";

        if (search_lastName !== undefined)

            url_ += "search.lastName=" + encodeURIComponent("" + search_lastName) + "&";

        if (search_dedicatedLocationId !== undefined)

            url_ += "search.dedicatedLocationId=" + encodeURIComponent("" + search_dedicatedLocationId) + "&";

        if (search_userType !== undefined)

            url_ += "search.userType=" + encodeURIComponent("" + search_userType) + "&";

        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_payBy !== undefined)

            url_ += "search.payBy=" + encodeURIComponent("" + search_payBy) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processExists(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processExists(response)));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processExists(response: Response): boolean {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    validateUserName(search_amigoTenantTUserId: number, search_userName: string, search_firstName: string, search_lastName: string, search_dedicatedLocationId: number, search_userType: string, search_amigoTenantTRoleId: number, search_payBy: string, search_page: number, search_pageSize: number): Observable<UserResponse> {
        let url_ = this.baseUrl + "/api/users/validate?";
        if (search_amigoTenantTUserId !== undefined)

            url_ += "search.amigoTenantTUserId=" + encodeURIComponent("" + search_amigoTenantTUserId) + "&";

        if (search_userName !== undefined)

            url_ += "search.userName=" + encodeURIComponent("" + search_userName) + "&";

        if (search_firstName !== undefined)

            url_ += "search.firstName=" + encodeURIComponent("" + search_firstName) + "&";

        if (search_lastName !== undefined)

            url_ += "search.lastName=" + encodeURIComponent("" + search_lastName) + "&";

        if (search_dedicatedLocationId !== undefined)

            url_ += "search.dedicatedLocationId=" + encodeURIComponent("" + search_dedicatedLocationId) + "&";

        if (search_userType !== undefined)

            url_ += "search.userType=" + encodeURIComponent("" + search_userType) + "&";

        if (search_amigoTenantTRoleId !== undefined)

            url_ += "search.amigoTenantTRoleId=" + encodeURIComponent("" + search_amigoTenantTRoleId) + "&";

        if (search_payBy !== undefined)

            url_ += "search.payBy=" + encodeURIComponent("" + search_payBy) + "&";

        if (search_page !== undefined)

            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

        if (search_pageSize !== undefined)

            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processValidateUserName(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processValidateUserName(response)));
                } catch (e) {
                    return <Observable<UserResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserResponse>><any>Observable.throw(response);
        });
    }

    protected processValidateUserName(response: Response): UserResponse {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: UserResponse = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserResponse.fromJS(resultData200) : new UserResponse();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(dto: AmigoTenantTUserDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/users/register";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(dto: AmigoTenantTUserDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/users/update";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(dto: AmigoTenantTUserStatusDTO): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/users/delete";

        const content_ = JSON.stringify(dto ? dto.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    validateAuthorization(search: AuthorizationRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/users/validateAuthorization";

        const content_ = JSON.stringify(search ? search.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processValidateAuthorization(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processValidateAuthorization(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processValidateAuthorization(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchByIdForAudit(createdBy: number, updatedBy: number): Observable<AmigoTenantTUserAuditDTO> {
        let url_ = this.baseUrl + "/api/users/searchByIdForAudit?";
        if (createdBy === undefined || createdBy === null)
            throw new Error("The parameter 'createdBy' must be defined and cannot be null.");
        else
            url_ += "createdBy=" + encodeURIComponent("" + createdBy) + "&";

        if (updatedBy === undefined || updatedBy === null)
            throw new Error("The parameter 'updatedBy' must be defined and cannot be null.");
        else
            url_ += "updatedBy=" + encodeURIComponent("" + updatedBy) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchByIdForAudit(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchByIdForAudit(response)));
                } catch (e) {
                    return <Observable<AmigoTenantTUserAuditDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<AmigoTenantTUserAuditDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchByIdForAudit(response: Response): AmigoTenantTUserAuditDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: AmigoTenantTUserAuditDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AmigoTenantTUserAuditDTO.fromJS(resultData200) : new AmigoTenantTUserAuditDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

//export class ActivityEventLogSearchRequest {
//    activityTypeIds: number[];
//    userName: string;
//    reportedActivityDateFrom: Date;
//    reportedActivityDateTo: Date;
//    chargeNumber: string;
//    resultCode: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["ActivityTypeIds"] && data["ActivityTypeIds"].constructor === Array) {
//                this.activityTypeIds = [];
//                for (let item of data["ActivityTypeIds"])
//                    this.activityTypeIds.push(item);
//            }
//            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
//            this.reportedActivityDateFrom = data["ReportedActivityDateFrom"] ? new Date(data["ReportedActivityDateFrom"].toString()) : null;
//            this.reportedActivityDateTo = data["ReportedActivityDateTo"] ? new Date(data["ReportedActivityDateTo"].toString()) : null;
//            this.chargeNumber = data["chargeNumber"] !== undefined ? data["chargeNumber"] : null;
//            this.resultCode = data["ResultCode"] !== undefined ? data["ResultCode"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): ActivityEventLogSearchRequest {
//        return new ActivityEventLogSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.activityTypeIds && this.activityTypeIds.constructor === Array) {
//            data["ActivityTypeIds"] = [];
//            for (let item of this.activityTypeIds)
//                data["ActivityTypeIds"].push(item);
//        }
//        data["UserName"] = this.userName !== undefined ? this.userName : null;
//        data["ReportedActivityDateFrom"] = this.reportedActivityDateFrom ? this.reportedActivityDateFrom.toISOString() : null;
//        data["ReportedActivityDateTo"] = this.reportedActivityDateTo ? this.reportedActivityDateTo.toISOString() : null;
//        data["chargeNumber"] = this.chargeNumber !== undefined ? this.chargeNumber : null;
//        data["ResultCode"] = this.resultCode !== undefined ? this.resultCode : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ActivityEventLogSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfActivityEventLogDTO {
//    data: PagedListOfActivityEventLogDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfActivityEventLogDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfActivityEventLogDTO {
//        return new ResponseDTOOfPagedListOfActivityEventLogDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfActivityEventLogDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfActivityEventLogDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: ActivityEventLogDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(ActivityEventLogDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfActivityEventLogDTO {
//        return new PagedListOfActivityEventLogDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfActivityEventLogDTO(JSON.parse(json));
//    }
//}

export class ApplicationMessage {
    key: string;
    message: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.key = data["Key"] !== undefined ? data["Key"] : null;
            this.message = data["Message"] !== undefined ? data["Message"] : null;
        }
    }

    static fromJS(data: any): ApplicationMessage {
        return new ApplicationMessage(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Key"] = this.key !== undefined ? this.key : null;
        data["Message"] = this.message !== undefined ? this.message : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationMessage(JSON.parse(json));
    }
}

//export class ActivityEventLogDTO {
//    amigoTenantTEventLogId: number;
//    activityTypeId: number;
//    activityName: string;
//    username: string;
//    latitude: number;
//    longitude: number;
//    reportedActivityDate: string;
//    locationProvider: string;
//    originLocationId: number;
//    originLocationName: string;
//    destinationLocationId: number;
//    destinationLocationName: string;
//    equipmentNumber: string;
//    productName: string;
//    chargeNo: string;
//    parameters: string;
//    logType: string;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;
//    rowStatus: boolean;
//    private _localReportedActivityDate: Date;

//    public get localReportedActivityDate(): Date {
//        return this._localReportedActivityDate;
//    };

//    public set localReportedActivityDate(date: Date) {
//        this.reportedActivityDate = AmigoTenantOffsetBase.parse(date);
//        this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//    };
//    entityStatus: ActivityEventLogDTOEntityStatus;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTEventLogId = data["AmigoTenantTEventLogId"] !== undefined ? data["AmigoTenantTEventLogId"] : null;
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.activityName = data["ActivityName"] !== undefined ? data["ActivityName"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? data["ReportedActivityDate"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.originLocationId = data["OriginLocationId"] !== undefined ? data["OriginLocationId"] : null;
//            this.originLocationName = data["OriginLocationName"] !== undefined ? data["OriginLocationName"] : null;
//            this.destinationLocationId = data["DestinationLocationId"] !== undefined ? data["DestinationLocationId"] : null;
//            this.destinationLocationName = data["DestinationLocationName"] !== undefined ? data["DestinationLocationName"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.productName = data["ProductName"] !== undefined ? data["ProductName"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.parameters = data["Parameters"] !== undefined ? data["Parameters"] : null;
//            this.logType = data["LogType"] !== undefined ? data["LogType"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
//            this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//        }
//    }

//    static fromJS(data: any): ActivityEventLogDTO {
//        return new ActivityEventLogDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTEventLogId"] = this.amigoTenantTEventLogId !== undefined ? this.amigoTenantTEventLogId : null;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["ActivityName"] = this.activityName !== undefined ? this.activityName : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["OriginLocationId"] = this.originLocationId !== undefined ? this.originLocationId : null;
//        data["OriginLocationName"] = this.originLocationName !== undefined ? this.originLocationName : null;
//        data["DestinationLocationId"] = this.destinationLocationId !== undefined ? this.destinationLocationId : null;
//        data["DestinationLocationName"] = this.destinationLocationName !== undefined ? this.destinationLocationName : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["ProductName"] = this.productName !== undefined ? this.productName : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["Parameters"] = this.parameters !== undefined ? this.parameters : null;
//        data["LogType"] = this.logType !== undefined ? this.logType : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ActivityEventLogDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfActivityTypeDTO {
//    data: ActivityTypeDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(ActivityTypeDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfActivityTypeDTO {
//        return new ResponseDTOOfListOfActivityTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfActivityTypeDTO(JSON.parse(json));
//    }
//}

//export class ActivityTypeDTO {
//    activityTypeId: number;
//    code: string;
//    name: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): ActivityTypeDTO {
//        return new ActivityTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ActivityTypeDTO(JSON.parse(json));
//    }
//}


///*START COST-CENTER*/
//export class CostCenterSearchRequest {
//    code: string;
//    name: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): CostCenterSearchRequest {
//        return new CostCenterSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new CostCenterSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfCostCenterDTO {
//    data: PagedListOfCostCenterDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfCostCenterDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfCostCenterDTO {
//        return new ResponseDTOOfPagedListOfCostCenterDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfCostCenterDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfCostCenterDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: CostCenterDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(CostCenterDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfCostCenterDTO {
//        return new PagedListOfCostCenterDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfCostCenterDTO(JSON.parse(json));
//    }
//}

//export class CostCenterDTO {
//    costCenterId: number;
//    name: string;
//    code: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.costCenterId = data["CostCenterId"] !== undefined ? data["CostCenterId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): CostCenterDTO {
//        return new CostCenterDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["CostCenterId"] = this.costCenterId !== undefined ? this.costCenterId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new CostCenterDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfCostCenterDTO {
//    data: CostCenterDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(CostCenterDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfCostCenterDTO {
//        return new ResponseDTOOfListOfCostCenterDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfCostCenterDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfCostCenterTypeAheadDTO {
//    data: CostCenterTypeAheadDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(CostCenterTypeAheadDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfCostCenterTypeAheadDTO {
//        return new ResponseDTOOfListOfCostCenterTypeAheadDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfCostCenterTypeAheadDTO(JSON.parse(json));
//    }
//}

//export class CostCenterTypeAheadDTO {
//    costCenterIdId: number;
//    name: string;
//    code: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.costCenterIdId = data["CostCenterIdId"] !== undefined ? data["CostCenterIdId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//        }
//    }

//    static fromJS(data: any): CostCenterTypeAheadDTO {
//        return new CostCenterTypeAheadDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["CostCenterIdId"] = this.costCenterIdId !== undefined ? this.costCenterIdId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new CostCenterTypeAheadDTO(JSON.parse(json));
//    }
//}

//export class RegisterCostCenterRequest {
//    identifier: string;
//    wIFIMAC: string;
//    cellphoneNumber: string;
//    oSVersionId: number;
//    modelId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    appVersionId: number;
//    assignedAmigoTenantTUserId: number;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
//            this.wIFIMAC = data["WIFIMAC"] !== undefined ? data["WIFIMAC"] : null;
//            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.assignedAmigoTenantTUserId = data["AssignedAmigoTenantTUserId"] !== undefined ? data["AssignedAmigoTenantTUserId"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): RegisterDeviceRequest {
//        return new RegisterDeviceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
//        data["WIFIMAC"] = this.wIFIMAC !== undefined ? this.wIFIMAC : null;
//        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["AssignedAmigoTenantTUserId"] = this.assignedAmigoTenantTUserId !== undefined ? this.assignedAmigoTenantTUserId : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new RegisterDeviceRequest(JSON.parse(json));
//    }
//}

/*END COST-CENTER*/


//export class DeviceSearchRequest {
//    deviceId: number;
//    identifier: string;
//    wIFIMAC: string;
//    cellphoneNumber: string;
//    oSVersionId: number;
//    platformId: number;
//    appVersionId: number;
//    modelId: number;
//    brandId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    assignedAmigoTenantTUserId: number;
//    rowStatus: boolean;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.deviceId = data["DeviceId"] !== undefined ? data["DeviceId"] : null;
//            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
//            this.wIFIMAC = data["WIFIMAC"] !== undefined ? data["WIFIMAC"] : null;
//            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.platformId = data["PlatformId"] !== undefined ? data["PlatformId"] : null;
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.brandId = data["BrandId"] !== undefined ? data["BrandId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.assignedAmigoTenantTUserId = data["AssignedAmigoTenantTUserId"] !== undefined ? data["AssignedAmigoTenantTUserId"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): DeviceSearchRequest {
//        return new DeviceSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : null;
//        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
//        data["WIFIMAC"] = this.wIFIMAC !== undefined ? this.wIFIMAC : null;
//        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["PlatformId"] = this.platformId !== undefined ? this.platformId : null;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["BrandId"] = this.brandId !== undefined ? this.brandId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["AssignedAmigoTenantTUserId"] = this.assignedAmigoTenantTUserId !== undefined ? this.assignedAmigoTenantTUserId : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DeviceSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfDeviceDTO {
//    data: PagedListOfDeviceDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfDeviceDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfDeviceDTO {
//        return new ResponseDTOOfPagedListOfDeviceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfDeviceDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfDeviceDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: DeviceDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(DeviceDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfDeviceDTO {
//        return new PagedListOfDeviceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfDeviceDTO(JSON.parse(json));
//    }
//}

//export class DeviceDTO {
//    deviceId: number;
//    identifier: string;
//    wIFIMAC: string;
//    cellphoneNumber: string;
//    oSVersionId: number;
//    oSVersion: string;
//    oSVersionName: string;
//    platformId: number;
//    platformName: string;
//    appVersionId: number;
//    appVersion: string;
//    appVersionName: string;
//    modelId: number;
//    modelName: string;
//    brandId: number;
//    brandName: string;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    assignedAmigoTenantTUserId: number;
//    assignedAmigoTenantTUserUsername: string;
//    rowStatus: boolean;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.deviceId = data["DeviceId"] !== undefined ? data["DeviceId"] : null;
//            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
//            this.wIFIMAC = data["WIFIMAC"] !== undefined ? data["WIFIMAC"] : null;
//            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.oSVersionName = data["OSVersionName"] !== undefined ? data["OSVersionName"] : null;
//            this.platformId = data["PlatformId"] !== undefined ? data["PlatformId"] : null;
//            this.platformName = data["PlatformName"] !== undefined ? data["PlatformName"] : null;
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.appVersionName = data["AppVersionName"] !== undefined ? data["AppVersionName"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.modelName = data["ModelName"] !== undefined ? data["ModelName"] : null;
//            this.brandId = data["BrandId"] !== undefined ? data["BrandId"] : null;
//            this.brandName = data["BrandName"] !== undefined ? data["BrandName"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.assignedAmigoTenantTUserId = data["AssignedAmigoTenantTUserId"] !== undefined ? data["AssignedAmigoTenantTUserId"] : null;
//            this.assignedAmigoTenantTUserUsername = data["AssignedAmigoTenantTUserUsername"] !== undefined ? data["AssignedAmigoTenantTUserUsername"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//        }
//    }

//    static fromJS(data: any): DeviceDTO {
//        return new DeviceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : null;
//        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
//        data["WIFIMAC"] = this.wIFIMAC !== undefined ? this.wIFIMAC : null;
//        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["OSVersionName"] = this.oSVersionName !== undefined ? this.oSVersionName : null;
//        data["PlatformId"] = this.platformId !== undefined ? this.platformId : null;
//        data["PlatformName"] = this.platformName !== undefined ? this.platformName : null;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["AppVersionName"] = this.appVersionName !== undefined ? this.appVersionName : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["ModelName"] = this.modelName !== undefined ? this.modelName : null;
//        data["BrandId"] = this.brandId !== undefined ? this.brandId : null;
//        data["BrandName"] = this.brandName !== undefined ? this.brandName : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["AssignedAmigoTenantTUserId"] = this.assignedAmigoTenantTUserId !== undefined ? this.assignedAmigoTenantTUserId : null;
//        data["AssignedAmigoTenantTUserUsername"] = this.assignedAmigoTenantTUserUsername !== undefined ? this.assignedAmigoTenantTUserUsername : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DeviceDTO(JSON.parse(json));
//    }
//}

//export class RegisterDeviceRequest {
//    identifier: string;
//    wIFIMAC: string;
//    cellphoneNumber: string;
//    oSVersionId: number;
//    modelId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    appVersionId: number;
//    assignedAmigoTenantTUserId: number;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
//            this.wIFIMAC = data["WIFIMAC"] !== undefined ? data["WIFIMAC"] : null;
//            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.assignedAmigoTenantTUserId = data["AssignedAmigoTenantTUserId"] !== undefined ? data["AssignedAmigoTenantTUserId"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): RegisterDeviceRequest {
//        return new RegisterDeviceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
//        data["WIFIMAC"] = this.wIFIMAC !== undefined ? this.wIFIMAC : null;
//        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["AssignedAmigoTenantTUserId"] = this.assignedAmigoTenantTUserId !== undefined ? this.assignedAmigoTenantTUserId : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new RegisterDeviceRequest(JSON.parse(json));
//    }
//}

export class ResponseDTO {
    isValid: boolean;
    pk: number;
    code: string;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            this.pk = data["Pk"] !== undefined ? data["Pk"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;

            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTO {
        return new ResponseDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        data["Pk"] = this.pk !== undefined ? this.pk : null;
        data["Code"] = this.code !== undefined ? this.code : null;

        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTO(JSON.parse(json));
    }
}

//export class UpdateDeviceRequest {
//    deviceId: number;
//    identifier: string;
//    wIFIMAC: string;
//    cellphoneNumber: string;
//    oSVersionId: number;
//    modelId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    appVersionId: number;
//    assignedAmigoTenantTUserId: number;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.deviceId = data["DeviceId"] !== undefined ? data["DeviceId"] : null;
//            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
//            this.wIFIMAC = data["WIFIMAC"] !== undefined ? data["WIFIMAC"] : null;
//            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.assignedAmigoTenantTUserId = data["AssignedAmigoTenantTUserId"] !== undefined ? data["AssignedAmigoTenantTUserId"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): UpdateDeviceRequest {
//        return new UpdateDeviceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : null;
//        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
//        data["WIFIMAC"] = this.wIFIMAC !== undefined ? this.wIFIMAC : null;
//        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["AssignedAmigoTenantTUserId"] = this.assignedAmigoTenantTUserId !== undefined ? this.assignedAmigoTenantTUserId : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new UpdateDeviceRequest(JSON.parse(json));
//    }
//}

//export class DeleteDeviceRequest {
//    deviceId: number;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.deviceId = data["DeviceId"] !== undefined ? data["DeviceId"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): DeleteDeviceRequest {
//        return new DeleteDeviceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DeleteDeviceRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfModelDTO {
//    data: ModelDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(ModelDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfModelDTO {
//        return new ResponseDTOOfListOfModelDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfModelDTO(JSON.parse(json));
//    }
//}

//export class ModelDTO {
//    brandId: number;
//    brandName: string;
//    modelId: number;
//    modelName: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.brandId = data["BrandId"] !== undefined ? data["BrandId"] : null;
//            this.brandName = data["BrandName"] !== undefined ? data["BrandName"] : null;
//            this.modelId = data["ModelId"] !== undefined ? data["ModelId"] : null;
//            this.modelName = data["ModelName"] !== undefined ? data["ModelName"] : null;
//        }
//    }

//    static fromJS(data: any): ModelDTO {
//        return new ModelDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["BrandId"] = this.brandId !== undefined ? this.brandId : null;
//        data["BrandName"] = this.brandName !== undefined ? this.brandName : null;
//        data["ModelId"] = this.modelId !== undefined ? this.modelId : null;
//        data["ModelName"] = this.modelName !== undefined ? this.modelName : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ModelDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfOSVersionDTO {
//    data: OSVersionDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(OSVersionDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfOSVersionDTO {
//        return new ResponseDTOOfListOfOSVersionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfOSVersionDTO(JSON.parse(json));
//    }
//}

//export class OSVersionDTO {
//    platformId: number;
//    platformName: string;
//    oSVersionId: number;
//    versionNumber: string;
//    versionName: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.platformId = data["PlatformId"] !== undefined ? data["PlatformId"] : null;
//            this.platformName = data["PlatformName"] !== undefined ? data["PlatformName"] : null;
//            this.oSVersionId = data["OSVersionId"] !== undefined ? data["OSVersionId"] : null;
//            this.versionNumber = data["VersionNumber"] !== undefined ? data["VersionNumber"] : null;
//            this.versionName = data["VersionName"] !== undefined ? data["VersionName"] : null;
//        }
//    }

//    static fromJS(data: any): OSVersionDTO {
//        return new OSVersionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["PlatformId"] = this.platformId !== undefined ? this.platformId : null;
//        data["PlatformName"] = this.platformName !== undefined ? this.platformName : null;
//        data["OSVersionId"] = this.oSVersionId !== undefined ? this.oSVersionId : null;
//        data["VersionNumber"] = this.versionNumber !== undefined ? this.versionNumber : null;
//        data["VersionName"] = this.versionName !== undefined ? this.versionName : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new OSVersionDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfAppVersionDTO {
//    data: AppVersionDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(AppVersionDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfAppVersionDTO {
//        return new ResponseDTOOfListOfAppVersionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfAppVersionDTO(JSON.parse(json));
//    }
//}

//export class AppVersionDTO {
//    appVersionId: number;
//    versionNumber: string;
//    name: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.appVersionId = data["AppVersionId"] !== undefined ? data["AppVersionId"] : null;
//            this.versionNumber = data["VersionNumber"] !== undefined ? data["VersionNumber"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//        }
//    }

//    static fromJS(data: any): AppVersionDTO {
//        return new AppVersionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AppVersionId"] = this.appVersionId !== undefined ? this.appVersionId : null;
//        data["VersionNumber"] = this.versionNumber !== undefined ? this.versionNumber : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AppVersionDTO(JSON.parse(json));
//    }
//}

//export class DispatchingPartySearchRequest {
//    dispatchingPartyId: number;
//    code: string;
//    name: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.dispatchingPartyId = data["DispatchingPartyId"] !== undefined ? data["DispatchingPartyId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): DispatchingPartySearchRequest {
//        return new DispatchingPartySearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DispatchingPartyId"] = this.dispatchingPartyId !== undefined ? this.dispatchingPartyId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DispatchingPartySearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfDispatchingPartyDTO {
//    data: PagedListOfDispatchingPartyDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfDispatchingPartyDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfDispatchingPartyDTO {
//        return new ResponseDTOOfPagedListOfDispatchingPartyDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfDispatchingPartyDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfDispatchingPartyDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: DispatchingPartyDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(DispatchingPartyDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfDispatchingPartyDTO {
//        return new PagedListOfDispatchingPartyDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfDispatchingPartyDTO(JSON.parse(json));
//    }
//}

//export class DispatchingPartyDTO {
//    dispatchingPartyId: number;
//    code: string;
//    name: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.dispatchingPartyId = data["DispatchingPartyId"] !== undefined ? data["DispatchingPartyId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): DispatchingPartyDTO {
//        return new DispatchingPartyDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DispatchingPartyId"] = this.dispatchingPartyId !== undefined ? this.dispatchingPartyId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DispatchingPartyDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfDispatchingPartyDTO {
//    data: DispatchingPartyDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(DispatchingPartyDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfDispatchingPartyDTO {
//        return new ResponseDTOOfListOfDispatchingPartyDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfDispatchingPartyDTO(JSON.parse(json));
//    }
//}

//export class DriverPayReportSearchRequest {
//    driverId: number;
//    serviceStatusOffOnId: number;
//    dispatchingPartyCode: string;
//    currentLocationId: number;
//    dedicatedLocationId: number;
//    reportDateFrom: Date;
//    reportDateTo: Date;
//    page: number;
//    pageSize: number;
//    entityStatus: DriverPayReportSearchRequestEntityStatus;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.driverId = data["DriverId"] !== undefined ? data["DriverId"] : null;
//            this.serviceStatusOffOnId = data["ServiceStatusOffOnId"] !== undefined ? data["ServiceStatusOffOnId"] : null;
//            this.dispatchingPartyCode = data["DispatchingPartyCode"] !== undefined ? data["DispatchingPartyCode"] : null;
//            this.currentLocationId = data["CurrentLocationId"] !== undefined ? data["CurrentLocationId"] : null;
//            this.dedicatedLocationId = data["DedicatedLocationId"] !== undefined ? data["DedicatedLocationId"] : null;
//            this.reportDateFrom = data["ReportDateFrom"] ? new Date(data["ReportDateFrom"].toString()) : null;
//            this.reportDateTo = data["ReportDateTo"] ? new Date(data["ReportDateTo"].toString()) : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
//        }
//    }

//    static fromJS(data: any): DriverPayReportSearchRequest {
//        return new DriverPayReportSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DriverId"] = this.driverId !== undefined ? this.driverId : null;
//        data["ServiceStatusOffOnId"] = this.serviceStatusOffOnId !== undefined ? this.serviceStatusOffOnId : null;
//        data["DispatchingPartyCode"] = this.dispatchingPartyCode !== undefined ? this.dispatchingPartyCode : null;
//        data["CurrentLocationId"] = this.currentLocationId !== undefined ? this.currentLocationId : null;
//        data["DedicatedLocationId"] = this.dedicatedLocationId !== undefined ? this.dedicatedLocationId : null;
//        data["ReportDateFrom"] = this.reportDateFrom ? this.reportDateFrom.toISOString() : null;
//        data["ReportDateTo"] = this.reportDateTo ? this.reportDateTo.toISOString() : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DriverPayReportSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfDriverPayReportDTO {
//    data: PagedListOfDriverPayReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfDriverPayReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfDriverPayReportDTO {
//        return new ResponseDTOOfPagedListOfDriverPayReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfDriverPayReportDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfDriverPayReportDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: DriverPayReportDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(DriverPayReportDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfDriverPayReportDTO {
//        return new PagedListOfDriverPayReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfDriverPayReportDTO(JSON.parse(json));
//    }
//}

//export class DriverPayReportDTO {
//    reportDate: Date;
//    dayPayDriverTotal: number;
//    currentLocationId: number;
//    dedicatedLocationId: number;
//    driverUserId: number;
//    dispatcherPartyId: number;
//    driver: string;
//    serviceStatusOffOnDesc: string;
//    dispatcherCode: string;
//    currentLocationCode: string;
//    dedicatedLocationCode: string;
//    serviceStatusOffOnId: number;
//    firstName: string;
//    lastName: string;
//    serviceLatestInformation: string;
//    chargeNo: string;
//    chargeType: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.reportDate = data["ReportDate"] ? new Date(data["ReportDate"].toString()) : null;
//            this.dayPayDriverTotal = data["DayPayDriverTotal"] !== undefined ? data["DayPayDriverTotal"] : null;
//            this.currentLocationId = data["CurrentLocationId"] !== undefined ? data["CurrentLocationId"] : null;
//            this.dedicatedLocationId = data["DedicatedLocationId"] !== undefined ? data["DedicatedLocationId"] : null;
//            this.driverUserId = data["DriverUserId"] !== undefined ? data["DriverUserId"] : null;
//            this.dispatcherPartyId = data["DispatcherPartyId"] !== undefined ? data["DispatcherPartyId"] : null;
//            this.driver = data["Driver"] !== undefined ? data["Driver"] : null;
//            this.serviceStatusOffOnDesc = data["ServiceStatusOffOnDesc"] !== undefined ? data["ServiceStatusOffOnDesc"] : null;
//            this.dispatcherCode = data["DispatcherCode"] !== undefined ? data["DispatcherCode"] : null;
//            this.currentLocationCode = data["CurrentLocationCode"] !== undefined ? data["CurrentLocationCode"] : null;
//            this.dedicatedLocationCode = data["DedicatedLocationCode"] !== undefined ? data["DedicatedLocationCode"] : null;
//            this.serviceStatusOffOnId = data["ServiceStatusOffOnId"] !== undefined ? data["ServiceStatusOffOnId"] : null;
//            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
//            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
//            this.serviceLatestInformation = data["ServiceLatestInformation"] !== undefined ? data["ServiceLatestInformation"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//        }
//    }

//    static fromJS(data: any): DriverPayReportDTO {
//        return new DriverPayReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ReportDate"] = this.reportDate ? this.reportDate.toISOString() : null;
//        data["DayPayDriverTotal"] = this.dayPayDriverTotal !== undefined ? this.dayPayDriverTotal : null;
//        data["CurrentLocationId"] = this.currentLocationId !== undefined ? this.currentLocationId : null;
//        data["DedicatedLocationId"] = this.dedicatedLocationId !== undefined ? this.dedicatedLocationId : null;
//        data["DriverUserId"] = this.driverUserId !== undefined ? this.driverUserId : null;
//        data["DispatcherPartyId"] = this.dispatcherPartyId !== undefined ? this.dispatcherPartyId : null;
//        data["Driver"] = this.driver !== undefined ? this.driver : null;
//        data["ServiceStatusOffOnDesc"] = this.serviceStatusOffOnDesc !== undefined ? this.serviceStatusOffOnDesc : null;
//        data["DispatcherCode"] = this.dispatcherCode !== undefined ? this.dispatcherCode : null;
//        data["CurrentLocationCode"] = this.currentLocationCode !== undefined ? this.currentLocationCode : null;
//        data["DedicatedLocationCode"] = this.dedicatedLocationCode !== undefined ? this.dedicatedLocationCode : null;
//        data["ServiceStatusOffOnId"] = this.serviceStatusOffOnId !== undefined ? this.serviceStatusOffOnId : null;
//        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
//        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
//        data["ServiceLatestInformation"] = this.serviceLatestInformation !== undefined ? this.serviceLatestInformation : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DriverPayReportDTO(JSON.parse(json));
//    }
//}

//export class EquipmentSearchRequest {
//    equipmentNo: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.equipmentNo = data["EquipmentNo"] !== undefined ? data["EquipmentNo"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentSearchRequest {
//        return new EquipmentSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["EquipmentNo"] = this.equipmentNo !== undefined ? this.equipmentNo : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfEquipmentDTO {
//    data: PagedListOfEquipmentDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfEquipmentDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfEquipmentDTO {
//        return new ResponseDTOOfPagedListOfEquipmentDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfEquipmentDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfEquipmentDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: EquipmentDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(EquipmentDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfEquipmentDTO {
//        return new PagedListOfEquipmentDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfEquipmentDTO(JSON.parse(json));
//    }
//}

//export class EquipmentDTO {
//    equipmentId: number;
//    equipmentNo: string;
//    testDate25Year: string;
//    testDate5Year: string;
//    equipmentSizeId: number;
//    equipmentStatusId: number;
//    locationId: number;
//    isMasterRecord: string;
//    rowStatus: boolean;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;
//    equipmentTypeId: number;
//    equipmentTypeCode: string;
//    equipmentTypeName: string;
//    equipmentSizeCode: string;
//    equipmentSizeName: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.equipmentId = data["EquipmentId"] !== undefined ? data["EquipmentId"] : null;
//            this.equipmentNo = data["EquipmentNo"] !== undefined ? data["EquipmentNo"] : null;
//            this.testDate25Year = data["TestDate25Year"] !== undefined ? data["TestDate25Year"] : null;
//            this.testDate5Year = data["TestDate5Year"] !== undefined ? data["TestDate5Year"] : null;
//            this.equipmentSizeId = data["EquipmentSizeId"] !== undefined ? data["EquipmentSizeId"] : null;
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.locationId = data["LocationId"] !== undefined ? data["LocationId"] : null;
//            this.isMasterRecord = data["IsMasterRecord"] !== undefined ? data["IsMasterRecord"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.equipmentTypeName = data["EquipmentTypeName"] !== undefined ? data["EquipmentTypeName"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentSizeName = data["EquipmentSizeName"] !== undefined ? data["EquipmentSizeName"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentDTO {
//        return new EquipmentDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["EquipmentId"] = this.equipmentId !== undefined ? this.equipmentId : null;
//        data["EquipmentNo"] = this.equipmentNo !== undefined ? this.equipmentNo : null;
//        data["TestDate25Year"] = this.testDate25Year !== undefined ? this.testDate25Year : null;
//        data["TestDate5Year"] = this.testDate5Year !== undefined ? this.testDate5Year : null;
//        data["EquipmentSizeId"] = this.equipmentSizeId !== undefined ? this.equipmentSizeId : null;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["LocationId"] = this.locationId !== undefined ? this.locationId : null;
//        data["IsMasterRecord"] = this.isMasterRecord !== undefined ? this.isMasterRecord : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["EquipmentTypeName"] = this.equipmentTypeName !== undefined ? this.equipmentTypeName : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentSizeName"] = this.equipmentSizeName !== undefined ? this.equipmentSizeName : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentDTO(JSON.parse(json));
//    }
//}

//export class EquipmentSizeSearchRequest {
//    name: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentSizeSearchRequest {
//        return new EquipmentSizeSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentSizeSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfEquipmentSizeDTO {
//    data: PagedListOfEquipmentSizeDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfEquipmentSizeDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfEquipmentSizeDTO {
//        return new ResponseDTOOfPagedListOfEquipmentSizeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfEquipmentSizeDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfEquipmentSizeDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: EquipmentSizeDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(EquipmentSizeDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfEquipmentSizeDTO {
//        return new PagedListOfEquipmentSizeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfEquipmentSizeDTO(JSON.parse(json));
//    }
//}

//export class EquipmentSizeDTO {
//    equipmentSizeId: number;
//    name: string;
//    code: string;
//    equipmentTypeId: number;
//    equipmentTypeCode: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.equipmentSizeId = data["EquipmentSizeId"] !== undefined ? data["EquipmentSizeId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentSizeDTO {
//        return new EquipmentSizeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["EquipmentSizeId"] = this.equipmentSizeId !== undefined ? this.equipmentSizeId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentSizeDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfEquipmentSizeDTO {
//    data: EquipmentSizeDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(EquipmentSizeDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfEquipmentSizeDTO {
//        return new ResponseDTOOfListOfEquipmentSizeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfEquipmentSizeDTO(JSON.parse(json));
//    }
//}

//export class EquipmentStatusSearchRequest {
//    name: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentStatusSearchRequest {
//        return new EquipmentStatusSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentStatusSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfEquipmentStatusDTO {
//    data: PagedListOfEquipmentStatusDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfEquipmentStatusDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfEquipmentStatusDTO {
//        return new ResponseDTOOfPagedListOfEquipmentStatusDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfEquipmentStatusDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfEquipmentStatusDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: EquipmentStatusDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(EquipmentStatusDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfEquipmentStatusDTO {
//        return new PagedListOfEquipmentStatusDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfEquipmentStatusDTO(JSON.parse(json));
//    }
//}

//export class EquipmentStatusDTO {
//    equipmentStatusId: number;
//    name: string;
//    code: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentStatusDTO {
//        return new EquipmentStatusDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentStatusDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfEquipmentStatusDTO {
//    data: EquipmentStatusDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(EquipmentStatusDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfEquipmentStatusDTO {
//        return new ResponseDTOOfListOfEquipmentStatusDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfEquipmentStatusDTO(JSON.parse(json));
//    }
//}

//export class EquipmentTypeSearchRequest {
//    name: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentTypeSearchRequest {
//        return new EquipmentTypeSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentTypeSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfEquipmentTypeDTO {
//    data: PagedListOfEquipmentTypeDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfEquipmentTypeDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfEquipmentTypeDTO {
//        return new ResponseDTOOfPagedListOfEquipmentTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfEquipmentTypeDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfEquipmentTypeDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: EquipmentTypeDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(EquipmentTypeDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfEquipmentTypeDTO {
//        return new PagedListOfEquipmentTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfEquipmentTypeDTO(JSON.parse(json));
//    }
//}

//export class EquipmentTypeDTO {
//    equipmentTypeId: number;
//    name: string;
//    code: string;
//    rowStatus: boolean;
//    productRequiredCode: string;
//    chassisRequiredCode: string;
//    equipmentNumberRequiredCode: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.productRequiredCode = data["ProductRequiredCode"] !== undefined ? data["ProductRequiredCode"] : null;
//            this.chassisRequiredCode = data["ChassisRequiredCode"] !== undefined ? data["ChassisRequiredCode"] : null;
//            this.equipmentNumberRequiredCode = data["EquipmentNumberRequiredCode"] !== undefined ? data["EquipmentNumberRequiredCode"] : null;
//        }
//    }

//    static fromJS(data: any): EquipmentTypeDTO {
//        return new EquipmentTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["ProductRequiredCode"] = this.productRequiredCode !== undefined ? this.productRequiredCode : null;
//        data["ChassisRequiredCode"] = this.chassisRequiredCode !== undefined ? this.chassisRequiredCode : null;
//        data["EquipmentNumberRequiredCode"] = this.equipmentNumberRequiredCode !== undefined ? this.equipmentNumberRequiredCode : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new EquipmentTypeDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfEquipmentTypeDTO {
//    data: EquipmentTypeDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(EquipmentTypeDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfEquipmentTypeDTO {
//        return new ResponseDTOOfListOfEquipmentTypeDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfEquipmentTypeDTO(JSON.parse(json));
//    }
//}


//export class Last24HoursRequest {
//    amigoTenantTUserId: number;
//    tractorNumber: string;
//    shipmentIdOrCostCenterCode: string;
//    chassisNumber: string;
//    equipmentNumber: string;
//    activityTypeCodes: string[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.tractorNumber = data["TractorNumber"] !== undefined ? data["TractorNumber"] : null;
//            this.shipmentIdOrCostCenterCode = data["ShipmentIdOrCostCenterCode"] !== undefined ? data["ShipmentIdOrCostCenterCode"] : null;
//            this.chassisNumber = data["ChassisNumber"] !== undefined ? data["ChassisNumber"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            if (data["ActivityTypeCodes"] && data["ActivityTypeCodes"].constructor === Array) {
//                this.activityTypeCodes = [];
//                for (let item of data["ActivityTypeCodes"])
//                    this.activityTypeCodes.push(item);
//            }
//        }
//    }

//    static fromJS(data: any): Last24HoursRequest {
//        return new Last24HoursRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["TractorNumber"] = this.tractorNumber !== undefined ? this.tractorNumber : null;
//        data["ShipmentIdOrCostCenterCode"] = this.shipmentIdOrCostCenterCode !== undefined ? this.shipmentIdOrCostCenterCode : null;
//        data["ChassisNumber"] = this.chassisNumber !== undefined ? this.chassisNumber : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        if (this.activityTypeCodes && this.activityTypeCodes.constructor === Array) {
//            data["ActivityTypeCodes"] = [];
//            for (let item of this.activityTypeCodes)
//                data["ActivityTypeCodes"].push(item);
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new Last24HoursRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfLast24HoursDTO {
//    data: Last24HoursDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(Last24HoursDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfLast24HoursDTO {
//        return new ResponseDTOOfListOfLast24HoursDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfLast24HoursDTO(JSON.parse(json));
//    }
//}

//export class Last24HoursDTO {
//    amigoTenantTUserId: number;
//    username: string;
//    reportedActivityTimeZone: string;
//    reportedActivityDate: string;
//    latitude: number;
//    longitude: number;
//    chargeType: string;
//    activityTypeName: string;
//    activityTypeCode: string;
//    tractorNumber: string;
//    firstName: string;
//    lastName: string;
//    chassisNumber: string;
//    equipmentNumber: string;
//    index: number;
//    chargeNo: string;
//    product: string;
//    origin: string;
//    destination: string;
//    serviceName: string;
//    equipmentTypeName: string;
//    private _localReportedActivityDate: Date;

//    public get localReportedActivityDate(): Date {
//        return this._localReportedActivityDate;
//    };

//    public set localReportedActivityDate(date: Date) {
//        this.reportedActivityDate = AmigoTenantOffsetBase.parse(date);
//        this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//    };

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? data["ReportedActivityDate"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.activityTypeName = data["ActivityTypeName"] !== undefined ? data["ActivityTypeName"] : null;
//            this.activityTypeCode = data["ActivityTypeCode"] !== undefined ? data["ActivityTypeCode"] : null;
//            this.tractorNumber = data["TractorNumber"] !== undefined ? data["TractorNumber"] : null;
//            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
//            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
//            this.chassisNumber = data["ChassisNumber"] !== undefined ? data["ChassisNumber"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.index = data["Index"] !== undefined ? data["Index"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.product = data["Product"] !== undefined ? data["Product"] : null;
//            this.origin = data["Origin"] !== undefined ? data["Origin"] : null;
//            this.destination = data["Destination"] !== undefined ? data["Destination"] : null;
//            this.serviceName = data["ServiceName"] !== undefined ? data["ServiceName"] : null;
//            this.equipmentTypeName = data["EquipmentTypeName"] !== undefined ? data["EquipmentTypeName"] : null;
//            this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//        }
//    }

//    static fromJS(data: any): Last24HoursDTO {
//        return new Last24HoursDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["ActivityTypeName"] = this.activityTypeName !== undefined ? this.activityTypeName : null;
//        data["ActivityTypeCode"] = this.activityTypeCode !== undefined ? this.activityTypeCode : null;
//        data["TractorNumber"] = this.tractorNumber !== undefined ? this.tractorNumber : null;
//        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
//        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
//        data["ChassisNumber"] = this.chassisNumber !== undefined ? this.chassisNumber : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["Index"] = this.index !== undefined ? this.index : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["Product"] = this.product !== undefined ? this.product : null;
//        data["Origin"] = this.origin !== undefined ? this.origin : null;
//        data["Destination"] = this.destination !== undefined ? this.destination : null;
//        data["ServiceName"] = this.serviceName !== undefined ? this.serviceName : null;
//        data["EquipmentTypeName"] = this.equipmentTypeName !== undefined ? this.equipmentTypeName : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new Last24HoursDTO(JSON.parse(json));
//    }
//}

//export class LatestPositionRequest {
//    amigoTenantTUsersIds: number[];
//    tractorNumber: string;
//    shipmentIdOrCostCenterCode: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["AmigoTenantTUsersIds"] && data["AmigoTenantTUsersIds"].constructor === Array) {
//                this.amigoTenantTUsersIds = [];
//                for (let item of data["AmigoTenantTUsersIds"])
//                    this.amigoTenantTUsersIds.push(item);
//            }
//            this.tractorNumber = data["TractorNumber"] !== undefined ? data["TractorNumber"] : null;
//            this.shipmentIdOrCostCenterCode = data["ShipmentIdOrCostCenterCode"] !== undefined ? data["ShipmentIdOrCostCenterCode"] : null;
//        }
//    }

//    static fromJS(data: any): LatestPositionRequest {
//        return new LatestPositionRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.amigoTenantTUsersIds && this.amigoTenantTUsersIds.constructor === Array) {
//            data["AmigoTenantTUsersIds"] = [];
//            for (let item of this.amigoTenantTUsersIds)
//                data["AmigoTenantTUsersIds"].push(item);
//        }
//        data["TractorNumber"] = this.tractorNumber !== undefined ? this.tractorNumber : null;
//        data["ShipmentIdOrCostCenterCode"] = this.shipmentIdOrCostCenterCode !== undefined ? this.shipmentIdOrCostCenterCode : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new LatestPositionRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfLatestPositionDTO {
//    data: LatestPositionDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(LatestPositionDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfLatestPositionDTO {
//        return new ResponseDTOOfListOfLatestPositionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfLatestPositionDTO(JSON.parse(json));
//    }
//}

//export class LatestPositionDTO {
//    amigoTenantTEventLogId: number;
//    amigoTenantTUserId: number;
//    username: string;
//    reportedActivityTimeZone: string;
//    reportedActivityDate: string;
//    latitude: number;
//    longitude: number;
//    activityTypeName: string;
//    activityTypeCode: string;
//    tractorNumber: string;
//    firstName: string;
//    lastName: string;
//    chargeNo: string;
//    private _localReportedActivityDate: Date;

//    public get localReportedActivityDate(): Date {
//        return this._localReportedActivityDate;
//    };

//    public set localReportedActivityDate(date: Date) {
//        this.reportedActivityDate = AmigoTenantOffsetBase.parse(date);
//        this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//    };

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTEventLogId = data["AmigoTenantTEventLogId"] !== undefined ? data["AmigoTenantTEventLogId"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? data["ReportedActivityDate"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.activityTypeName = data["ActivityTypeName"] !== undefined ? data["ActivityTypeName"] : null;
//            this.activityTypeCode = data["ActivityTypeCode"] !== undefined ? data["ActivityTypeCode"] : null;
//            this.tractorNumber = data["TractorNumber"] !== undefined ? data["TractorNumber"] : null;
//            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
//            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this._localReportedActivityDate = AmigoTenantOffsetBase.format(this.reportedActivityDate);
//        }
//    }

//    static fromJS(data: any): LatestPositionDTO {
//        return new LatestPositionDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTEventLogId"] = this.amigoTenantTEventLogId !== undefined ? this.amigoTenantTEventLogId : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["ActivityTypeName"] = this.activityTypeName !== undefined ? this.activityTypeName : null;
//        data["ActivityTypeCode"] = this.activityTypeCode !== undefined ? this.activityTypeCode : null;
//        data["TractorNumber"] = this.tractorNumber !== undefined ? this.tractorNumber : null;
//        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
//        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new LatestPositionDTO(JSON.parse(json));
//    }
//}

export class LocationSearchRequest {
    name: string;
    code: string;
    zipCode: string;
    hasGeofence: boolean;
    countryISOCode: string;
    stateCode: string;
    cityCode: string;
    locationTypeCode: string;
    parentLocationCode: string;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
            this.hasGeofence = data["HasGeofence"] !== undefined ? data["HasGeofence"] : null;
            this.countryISOCode = data["CountryISOCode"] !== undefined ? data["CountryISOCode"] : null;
            this.stateCode = data["StateCode"] !== undefined ? data["StateCode"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            this.locationTypeCode = data["LocationTypeCode"] !== undefined ? data["LocationTypeCode"] : null;
            this.parentLocationCode = data["ParentLocationCode"] !== undefined ? data["ParentLocationCode"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): LocationSearchRequest {
        return new LocationSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
        data["HasGeofence"] = this.hasGeofence !== undefined ? this.hasGeofence : null;
        data["CountryISOCode"] = this.countryISOCode !== undefined ? this.countryISOCode : null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        data["LocationTypeCode"] = this.locationTypeCode !== undefined ? this.locationTypeCode : null;
        data["ParentLocationCode"] = this.parentLocationCode !== undefined ? this.parentLocationCode : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfLocationDTO {
    data: PagedListOfLocationDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfLocationDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfLocationDTO {
        return new ResponseDTOOfPagedListOfLocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfLocationDTO(JSON.parse(json));
    }
}

export class PagedListOfLocationDTO {
    page: number;
    total: number;
    pageSize: number;
    items: LocationDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(LocationDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfLocationDTO {
        return new PagedListOfLocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfLocationDTO(JSON.parse(json));
    }
}

export class LocationDTO {
    locationId: number;
    name: string;
    code: string;
    zipCode: string;
    creationDate: Date;
    hasGeofence: boolean;
    countryISOCode: string;
    countryName: string;
    stateCode: string;
    stateName: string;
    cityCode: string;
    cityName: string;
    locationTypeCode: string;
    latitude: number;
    longitude: number;
    address1: string;
    address2: string;
    parentLocationCode: string;
    parentLocationName: string;
    locationTypeName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.locationId = data["LocationId"] !== undefined ? data["LocationId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.hasGeofence = data["HasGeofence"] !== undefined ? data["HasGeofence"] : null;
            this.countryISOCode = data["CountryISOCode"] !== undefined ? data["CountryISOCode"] : null;
            this.countryName = data["CountryName"] !== undefined ? data["CountryName"] : null;
            this.stateCode = data["StateCode"] !== undefined ? data["StateCode"] : null;
            this.stateName = data["StateName"] !== undefined ? data["StateName"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            this.cityName = data["CityName"] !== undefined ? data["CityName"] : null;
            this.locationTypeCode = data["LocationTypeCode"] !== undefined ? data["LocationTypeCode"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address1 = data["Address1"] !== undefined ? data["Address1"] : null;
            this.address2 = data["Address2"] !== undefined ? data["Address2"] : null;
            this.parentLocationCode = data["ParentLocationCode"] !== undefined ? data["ParentLocationCode"] : null;
            this.parentLocationName = data["ParentLocationName"] !== undefined ? data["ParentLocationName"] : null;
            this.locationTypeName = data["LocationTypeName"] !== undefined ? data["LocationTypeName"] : null;
        }
    }

    static fromJS(data: any): LocationDTO {
        return new LocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LocationId"] = this.locationId !== undefined ? this.locationId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["HasGeofence"] = this.hasGeofence !== undefined ? this.hasGeofence : null;
        data["CountryISOCode"] = this.countryISOCode !== undefined ? this.countryISOCode : null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : null;
        data["StateName"] = this.stateName !== undefined ? this.stateName : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        data["CityName"] = this.cityName !== undefined ? this.cityName : null;
        data["LocationTypeCode"] = this.locationTypeCode !== undefined ? this.locationTypeCode : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address1"] = this.address1 !== undefined ? this.address1 : null;
        data["Address2"] = this.address2 !== undefined ? this.address2 : null;
        data["ParentLocationCode"] = this.parentLocationCode !== undefined ? this.parentLocationCode : null;
        data["ParentLocationName"] = this.parentLocationName !== undefined ? this.parentLocationName : null;
        data["LocationTypeName"] = this.locationTypeName !== undefined ? this.locationTypeName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationDTO(JSON.parse(json));
    }
}

export class GetLocationRequest {
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): GetLocationRequest {
        return new GetLocationRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLocationRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfLocationWithCoordinatesDTO {
    data: LocationWithCoordinatesDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? LocationWithCoordinatesDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfLocationWithCoordinatesDTO {
        return new ResponseDTOOfLocationWithCoordinatesDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfLocationWithCoordinatesDTO(JSON.parse(json));
    }
}

export class LocationWithCoordinatesDTO {
    coordinates: LocationCoordinateDTO[];
    locationId: number;
    name: string;
    code: string;
    zipCode: string;
    creationDate: Date;
    hasGeofence: boolean;
    countryISOCode: string;
    countryName: string;
    stateCode: string;
    stateName: string;
    cityCode: string;
    cityName: string;
    locationTypeCode: string;
    latitude: number;
    longitude: number;
    address1: string;
    address2: string;
    parentLocationCode: string;
    parentLocationName: string;
    locationTypeName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
                this.coordinates = [];
                for (let item of data["Coordinates"])
                    this.coordinates.push(LocationCoordinateDTO.fromJS(item));
            }
            this.locationId = data["LocationId"] !== undefined ? data["LocationId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.hasGeofence = data["HasGeofence"] !== undefined ? data["HasGeofence"] : null;
            this.countryISOCode = data["CountryISOCode"] !== undefined ? data["CountryISOCode"] : null;
            this.countryName = data["CountryName"] !== undefined ? data["CountryName"] : null;
            this.stateCode = data["StateCode"] !== undefined ? data["StateCode"] : null;
            this.stateName = data["StateName"] !== undefined ? data["StateName"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            this.cityName = data["CityName"] !== undefined ? data["CityName"] : null;
            this.locationTypeCode = data["LocationTypeCode"] !== undefined ? data["LocationTypeCode"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address1 = data["Address1"] !== undefined ? data["Address1"] : null;
            this.address2 = data["Address2"] !== undefined ? data["Address2"] : null;
            this.parentLocationCode = data["ParentLocationCode"] !== undefined ? data["ParentLocationCode"] : null;
            this.parentLocationName = data["ParentLocationName"] !== undefined ? data["ParentLocationName"] : null;
            this.locationTypeName = data["LocationTypeName"] !== undefined ? data["LocationTypeName"] : null;
        }
    }

    static fromJS(data: any): LocationWithCoordinatesDTO {
        return new LocationWithCoordinatesDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.coordinates && this.coordinates.constructor === Array) {
            data["Coordinates"] = [];
            for (let item of this.coordinates)
                data["Coordinates"].push(item.toJS());
        }
        data["LocationId"] = this.locationId !== undefined ? this.locationId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["HasGeofence"] = this.hasGeofence !== undefined ? this.hasGeofence : null;
        data["CountryISOCode"] = this.countryISOCode !== undefined ? this.countryISOCode : null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : null;
        data["StateName"] = this.stateName !== undefined ? this.stateName : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        data["CityName"] = this.cityName !== undefined ? this.cityName : null;
        data["LocationTypeCode"] = this.locationTypeCode !== undefined ? this.locationTypeCode : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address1"] = this.address1 !== undefined ? this.address1 : null;
        data["Address2"] = this.address2 !== undefined ? this.address2 : null;
        data["ParentLocationCode"] = this.parentLocationCode !== undefined ? this.parentLocationCode : null;
        data["ParentLocationName"] = this.parentLocationName !== undefined ? this.parentLocationName : null;
        data["LocationTypeName"] = this.locationTypeName !== undefined ? this.locationTypeName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationWithCoordinatesDTO(JSON.parse(json));
    }
}

export class LocationCoordinateDTO {
    latitude: number;
    longitude: number;
    locationCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.locationCode = data["LocationCode"] !== undefined ? data["LocationCode"] : null;
        }
    }

    static fromJS(data: any): LocationCoordinateDTO {
        return new LocationCoordinateDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["LocationCode"] = this.locationCode !== undefined ? this.locationCode : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationCoordinateDTO(JSON.parse(json));
    }
}

export class LocationCoordinatesListRequest {
    locationCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.locationCode = data["LocationCode"] !== undefined ? data["LocationCode"] : null;
        }
    }

    static fromJS(data: any): LocationCoordinatesListRequest {
        return new LocationCoordinatesListRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LocationCode"] = this.locationCode !== undefined ? this.locationCode : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationCoordinatesListRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfLocationCoordinateDTO {
    data: LocationCoordinateDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(LocationCoordinateDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfLocationCoordinateDTO {
        return new ResponseDTOOfListOfLocationCoordinateDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfLocationCoordinateDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfLocationDTO {
    data: LocationDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(LocationDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfLocationDTO {
        return new ResponseDTOOfListOfLocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfLocationDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfLocationTypeAheadDTO {
    data: LocationTypeAheadDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(LocationTypeAheadDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfLocationTypeAheadDTO {
        return new ResponseDTOOfListOfLocationTypeAheadDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfLocationTypeAheadDTO(JSON.parse(json));
    }
}

export class LocationTypeAheadDTO {
    locationId: number;
    name: string;
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.locationId = data["LocationId"] !== undefined ? data["LocationId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): LocationTypeAheadDTO {
        return new LocationTypeAheadDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LocationId"] = this.locationId !== undefined ? this.locationId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationTypeAheadDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfCityDTO {
    data: CityDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(CityDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfCityDTO {
        return new ResponseDTOOfListOfCityDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfCityDTO(JSON.parse(json));
    }
}

export class CityDTO {
    cityId: number;
    cityName: string;
    cityCode: string;
    stateCode: string;
    stateName: string;
    countryISOCode: string;
    countryName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.cityId = data["CityId"] !== undefined ? data["CityId"] : null;
            this.cityName = data["CityName"] !== undefined ? data["CityName"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            this.stateCode = data["StateCode"] !== undefined ? data["StateCode"] : null;
            this.stateName = data["StateName"] !== undefined ? data["StateName"] : null;
            this.countryISOCode = data["CountryISOCode"] !== undefined ? data["CountryISOCode"] : null;
            this.countryName = data["CountryName"] !== undefined ? data["CountryName"] : null;
        }
    }

    static fromJS(data: any): CityDTO {
        return new CityDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CityId"] = this.cityId !== undefined ? this.cityId : null;
        data["CityName"] = this.cityName !== undefined ? this.cityName : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        data["StateCode"] = this.stateCode !== undefined ? this.stateCode : null;
        data["StateName"] = this.stateName !== undefined ? this.stateName : null;
        data["CountryISOCode"] = this.countryISOCode !== undefined ? this.countryISOCode : null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CityDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfParentLocationDTO {
    data: ParentLocationDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(ParentLocationDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfParentLocationDTO {
        return new ResponseDTOOfListOfParentLocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfParentLocationDTO(JSON.parse(json));
    }
}

export class ParentLocationDTO {
    name: string;
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): ParentLocationDTO {
        return new ParentLocationDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ParentLocationDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfLocationTypeDTO {
    data: LocationTypeDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(LocationTypeDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfLocationTypeDTO {
        return new ResponseDTOOfListOfLocationTypeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfLocationTypeDTO(JSON.parse(json));
    }
}

export class LocationTypeDTO {
    code: string;
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
        }
    }

    static fromJS(data: any): LocationTypeDTO {
        return new LocationTypeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocationTypeDTO(JSON.parse(json));
    }
}

export class RegisterLocationRequest {
    code: string;
    name: string;
    latitude: number;
    longitude: number;
    address1: string;
    address2: string;
    zipCode: string;
    locationTypeCode: string;
    parentLocationCode: string;
    cityCode: string;
    hasGeofence: boolean;
    coordinates: RegisterLocationCoordinateItem[];
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address1 = data["Address1"] !== undefined ? data["Address1"] : null;
            this.address2 = data["Address2"] !== undefined ? data["Address2"] : null;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
            this.locationTypeCode = data["LocationTypeCode"] !== undefined ? data["LocationTypeCode"] : null;
            this.parentLocationCode = data["ParentLocationCode"] !== undefined ? data["ParentLocationCode"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            this.hasGeofence = data["HasGeofence"] !== undefined ? data["HasGeofence"] : null;
            if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
                this.coordinates = [];
                for (let item of data["Coordinates"])
                    this.coordinates.push(RegisterLocationCoordinateItem.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): RegisterLocationRequest {
        return new RegisterLocationRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address1"] = this.address1 !== undefined ? this.address1 : null;
        data["Address2"] = this.address2 !== undefined ? this.address2 : null;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
        data["LocationTypeCode"] = this.locationTypeCode !== undefined ? this.locationTypeCode : null;
        data["ParentLocationCode"] = this.parentLocationCode !== undefined ? this.parentLocationCode : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        data["HasGeofence"] = this.hasGeofence !== undefined ? this.hasGeofence : null;
        if (this.coordinates && this.coordinates.constructor === Array) {
            data["Coordinates"] = [];
            for (let item of this.coordinates)
                data["Coordinates"].push(item.toJS());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterLocationRequest(JSON.parse(json));
    }
}

export class RegisterLocationCoordinateItem {
    locationCode: string;
    latitude: number;
    longitude: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.locationCode = data["LocationCode"] !== undefined ? data["LocationCode"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
        }
    }

    static fromJS(data: any): RegisterLocationCoordinateItem {
        return new RegisterLocationCoordinateItem(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["LocationCode"] = this.locationCode !== undefined ? this.locationCode : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterLocationCoordinateItem(JSON.parse(json));
    }
}

export class UpdateLocationRequest {
    code: string;
    name: string;
    latitude: number;
    longitude: number;
    address1: string;
    address2: string;
    zipCode: string;
    locationTypeCode: string;
    parentLocationCode: string;
    cityCode: string;
    coordinates: RegisterLocationCoordinateItem[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address1 = data["Address1"] !== undefined ? data["Address1"] : null;
            this.address2 = data["Address2"] !== undefined ? data["Address2"] : null;
            this.zipCode = data["ZipCode"] !== undefined ? data["ZipCode"] : null;
            this.locationTypeCode = data["LocationTypeCode"] !== undefined ? data["LocationTypeCode"] : null;
            this.parentLocationCode = data["ParentLocationCode"] !== undefined ? data["ParentLocationCode"] : null;
            this.cityCode = data["CityCode"] !== undefined ? data["CityCode"] : null;
            if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
                this.coordinates = [];
                for (let item of data["Coordinates"])
                    this.coordinates.push(RegisterLocationCoordinateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateLocationRequest {
        return new UpdateLocationRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address1"] = this.address1 !== undefined ? this.address1 : null;
        data["Address2"] = this.address2 !== undefined ? this.address2 : null;
        data["ZipCode"] = this.zipCode !== undefined ? this.zipCode : null;
        data["LocationTypeCode"] = this.locationTypeCode !== undefined ? this.locationTypeCode : null;
        data["ParentLocationCode"] = this.parentLocationCode !== undefined ? this.parentLocationCode : null;
        data["CityCode"] = this.cityCode !== undefined ? this.cityCode : null;
        if (this.coordinates && this.coordinates.constructor === Array) {
            data["Coordinates"] = [];
            for (let item of this.coordinates)
                data["Coordinates"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateLocationRequest(JSON.parse(json));
    }
}

export class DeleteLocationRequest {
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): DeleteLocationRequest {
        return new DeleteLocationRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteLocationRequest(JSON.parse(json));
    }
}

export class RegisterLocationCoordinatesRequest {
    registerLocationCoordinateList: RegisterLocationCoordinateItem[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["RegisterLocationCoordinateList"] && data["RegisterLocationCoordinateList"].constructor === Array) {
                this.registerLocationCoordinateList = [];
                for (let item of data["RegisterLocationCoordinateList"])
                    this.registerLocationCoordinateList.push(RegisterLocationCoordinateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RegisterLocationCoordinatesRequest {
        return new RegisterLocationCoordinatesRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.registerLocationCoordinateList && this.registerLocationCoordinateList.constructor === Array) {
            data["RegisterLocationCoordinateList"] = [];
            for (let item of this.registerLocationCoordinateList)
                data["RegisterLocationCoordinateList"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterLocationCoordinatesRequest(JSON.parse(json));
    }
}

export class DeleteLocationCoordinatesRequest {
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): DeleteLocationCoordinatesRequest {
        return new DeleteLocationCoordinatesRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteLocationCoordinatesRequest(JSON.parse(json));
    }
}

export class MainMenuSearchRequest {
    userId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
        }
    }

    static fromJS(data: any): MainMenuSearchRequest {
        return new MainMenuSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MainMenuSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfIEnumerableOfMainMenuDTO {
    data: MainMenuDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(MainMenuDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfIEnumerableOfMainMenuDTO {
        return new ResponseDTOOfIEnumerableOfMainMenuDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfIEnumerableOfMainMenuDTO(JSON.parse(json));
    }
}

export class MainMenuDTO {
    userId: number;
    roleId: number;
    permissionId: number;
    actionId: number;
    actionCode: string;
    moduleId: number;
    moduleName: string;
    parentModuleId: number;
    parentModuleName: string;
    url: string;
    sortOrder: number;
    parentSortOrder: number;
    moduleCode: string;
    parentModuleCode: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.roleId = data["RoleId"] !== undefined ? data["RoleId"] : null;
            this.permissionId = data["PermissionId"] !== undefined ? data["PermissionId"] : null;
            this.actionId = data["ActionId"] !== undefined ? data["ActionId"] : null;
            this.actionCode = data["ActionCode"] !== undefined ? data["ActionCode"] : null;
            this.moduleId = data["ModuleId"] !== undefined ? data["ModuleId"] : null;
            this.moduleName = data["ModuleName"] !== undefined ? data["ModuleName"] : null;
            this.parentModuleId = data["ParentModuleId"] !== undefined ? data["ParentModuleId"] : null;
            this.parentModuleName = data["ParentModuleName"] !== undefined ? data["ParentModuleName"] : null;
            this.url = data["Url"] !== undefined ? data["Url"] : null;
            this.sortOrder = data["SortOrder"] !== undefined ? data["SortOrder"] : null;
            this.parentSortOrder = data["ParentSortOrder"] !== undefined ? data["ParentSortOrder"] : null;
            this.moduleCode = data["ModuleCode"] !== undefined ? data["ModuleCode"] : null;
            this.parentModuleCode = data["ParentModuleCode"] !== undefined ? data["ParentModuleCode"] : null;
        }
    }

    static fromJS(data: any): MainMenuDTO {
        return new MainMenuDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["RoleId"] = this.roleId !== undefined ? this.roleId : null;
        data["PermissionId"] = this.permissionId !== undefined ? this.permissionId : null;
        data["ActionId"] = this.actionId !== undefined ? this.actionId : null;
        data["ActionCode"] = this.actionCode !== undefined ? this.actionCode : null;
        data["ModuleId"] = this.moduleId !== undefined ? this.moduleId : null;
        data["ModuleName"] = this.moduleName !== undefined ? this.moduleName : null;
        data["ParentModuleId"] = this.parentModuleId !== undefined ? this.parentModuleId : null;
        data["ParentModuleName"] = this.parentModuleName !== undefined ? this.parentModuleName : null;
        data["Url"] = this.url !== undefined ? this.url : null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : null;
        data["ParentSortOrder"] = this.parentSortOrder !== undefined ? this.parentSortOrder : null;
        data["ModuleCode"] = this.moduleCode !== undefined ? this.moduleCode : null;
        data["ParentModuleCode"] = this.parentModuleCode !== undefined ? this.parentModuleCode : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MainMenuDTO(JSON.parse(json));
    }
}

export class ModuleSearchRequest {
    code: string;
    name: string;
    parentName: string;
    onlyParents: boolean;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.parentName = data["ParentName"] !== undefined ? data["ParentName"] : null;
            this.onlyParents = data["OnlyParents"] !== undefined ? data["OnlyParents"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): ModuleSearchRequest {
        return new ModuleSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["ParentName"] = this.parentName !== undefined ? this.parentName : null;
        data["OnlyParents"] = this.onlyParents !== undefined ? this.onlyParents : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ModuleSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfModuleDTO {
    data: PagedListOfModuleDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfModuleDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfModuleDTO {
        return new ResponseDTOOfPagedListOfModuleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfModuleDTO(JSON.parse(json));
    }
}

export class PagedListOfModuleDTO {
    page: number;
    total: number;
    pageSize: number;
    items: ModuleDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(ModuleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfModuleDTO {
        return new PagedListOfModuleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfModuleDTO(JSON.parse(json));
    }
}

export class ModuleDTO {
    code: string;
    name: string;
    url: string;
    parentModuleCode: string;
    parentModuleName: string;
    sortOrder: number;
    onlyParents: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.url = data["Url"] !== undefined ? data["Url"] : null;
            this.parentModuleCode = data["ParentModuleCode"] !== undefined ? data["ParentModuleCode"] : null;
            this.parentModuleName = data["ParentModuleName"] !== undefined ? data["ParentModuleName"] : null;
            this.sortOrder = data["SortOrder"] !== undefined ? data["SortOrder"] : null;
            this.onlyParents = data["OnlyParents"] !== undefined ? data["OnlyParents"] : null;
        }
    }

    static fromJS(data: any): ModuleDTO {
        return new ModuleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Url"] = this.url !== undefined ? this.url : null;
        data["ParentModuleCode"] = this.parentModuleCode !== undefined ? this.parentModuleCode : null;
        data["ParentModuleName"] = this.parentModuleName !== undefined ? this.parentModuleName : null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : null;
        data["OnlyParents"] = this.onlyParents !== undefined ? this.onlyParents : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ModuleDTO(JSON.parse(json));
    }
}

export class GetModuleRequest {
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): GetModuleRequest {
        return new GetModuleRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetModuleRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfModuleActionsDTO {
    data: ModuleActionsDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? ModuleActionsDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfModuleActionsDTO {
        return new ResponseDTOOfModuleActionsDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfModuleActionsDTO(JSON.parse(json));
    }
}

export class ModuleActionsDTO {
    code: string;
    name: string;
    url: string;
    parentModuleCode: string;
    sortOrder: number;
    actions: ActionDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.url = data["Url"] !== undefined ? data["Url"] : null;
            this.parentModuleCode = data["ParentModuleCode"] !== undefined ? data["ParentModuleCode"] : null;
            this.sortOrder = data["SortOrder"] !== undefined ? data["SortOrder"] : null;
            if (data["Actions"] && data["Actions"].constructor === Array) {
                this.actions = [];
                for (let item of data["Actions"])
                    this.actions.push(ActionDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleActionsDTO {
        return new ModuleActionsDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Url"] = this.url !== undefined ? this.url : null;
        data["ParentModuleCode"] = this.parentModuleCode !== undefined ? this.parentModuleCode : null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : null;
        if (this.actions && this.actions.constructor === Array) {
            data["Actions"] = [];
            for (let item of this.actions)
                data["Actions"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ModuleActionsDTO(JSON.parse(json));
    }
}

export class ActionDTO {
    actionId: number;
    code: string;
    name: string;
    description: string;
    type: string;
    moduleCode: string;
    entityStatus: ActionDTOEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.actionId = data["ActionId"] !== undefined ? data["ActionId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.description = data["Description"] !== undefined ? data["Description"] : null;
            this.type = data["Type"] !== undefined ? data["Type"] : null;
            this.moduleCode = data["ModuleCode"] !== undefined ? data["ModuleCode"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): ActionDTO {
        return new ActionDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ActionId"] = this.actionId !== undefined ? this.actionId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Description"] = this.description !== undefined ? this.description : null;
        data["Type"] = this.type !== undefined ? this.type : null;
        data["ModuleCode"] = this.moduleCode !== undefined ? this.moduleCode : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActionDTO(JSON.parse(json));
    }
}

export class RegisterModuleRequest {
    name: string;
    code: string;
    uRL: string;
    parentModuleCode: string;
    sortOrder: number;
    actions: ActionRequest[];
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.uRL = data["URL"] !== undefined ? data["URL"] : null;
            this.parentModuleCode = data["ParentModuleCode"] !== undefined ? data["ParentModuleCode"] : null;
            this.sortOrder = data["SortOrder"] !== undefined ? data["SortOrder"] : null;
            if (data["Actions"] && data["Actions"].constructor === Array) {
                this.actions = [];
                for (let item of data["Actions"])
                    this.actions.push(ActionRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): RegisterModuleRequest {
        return new RegisterModuleRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["URL"] = this.uRL !== undefined ? this.uRL : null;
        data["ParentModuleCode"] = this.parentModuleCode !== undefined ? this.parentModuleCode : null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : null;
        if (this.actions && this.actions.constructor === Array) {
            data["Actions"] = [];
            for (let item of this.actions)
                data["Actions"].push(item.toJS());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterModuleRequest(JSON.parse(json));
    }
}

export class ActionRequest {
    name: string;
    code: string;
    description: string;
    type: string;
    entityStatus: ActionRequestEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.description = data["Description"] !== undefined ? data["Description"] : null;
            this.type = data["Type"] !== undefined ? data["Type"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): ActionRequest {
        return new ActionRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Description"] = this.description !== undefined ? this.description : null;
        data["Type"] = this.type !== undefined ? this.type : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActionRequest(JSON.parse(json));
    }
}

export class UpdateModuleRequest {
    name: string;
    code: string;
    uRL: string;
    parentModuleCode: string;
    sortOrder: number;
    actions: ActionRequest[];
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.uRL = data["URL"] !== undefined ? data["URL"] : null;
            this.parentModuleCode = data["ParentModuleCode"] !== undefined ? data["ParentModuleCode"] : null;
            this.sortOrder = data["SortOrder"] !== undefined ? data["SortOrder"] : null;
            if (data["Actions"] && data["Actions"].constructor === Array) {
                this.actions = [];
                for (let item of data["Actions"])
                    this.actions.push(ActionRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): UpdateModuleRequest {
        return new UpdateModuleRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["URL"] = this.uRL !== undefined ? this.uRL : null;
        data["ParentModuleCode"] = this.parentModuleCode !== undefined ? this.parentModuleCode : null;
        data["SortOrder"] = this.sortOrder !== undefined ? this.sortOrder : null;
        if (this.actions && this.actions.constructor === Array) {
            data["Actions"] = [];
            for (let item of this.actions)
                data["Actions"].push(item.toJS());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateModuleRequest(JSON.parse(json));
    }
}

export class DeleteModuleRequest {
    code: string;
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): DeleteModuleRequest {
        return new DeleteModuleRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteModuleRequest(JSON.parse(json));
    }
}

export class RegisterMoveRequest {
    costCenterId: number;
    productId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.costCenterId = data["CostCenterId"] !== undefined ? data["CostCenterId"] : null;
            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
        }
    }

    static fromJS(data: any): RegisterMoveRequest {
        return new RegisterMoveRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CostCenterId"] = this.costCenterId !== undefined ? this.costCenterId : null;
        data["ProductId"] = this.productId !== undefined ? this.productId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterMoveRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfAmigoTenantParameterDTO {
    data: AmigoTenantParameterDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(AmigoTenantParameterDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfAmigoTenantParameterDTO {
        return new ResponseDTOOfListOfAmigoTenantParameterDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfAmigoTenantParameterDTO(JSON.parse(json));
    }
}

export class AmigoTenantParameterDTO {
    amigoTenantParameterId: number;
    name: string;
    code: string;
    value: string;
    description: string;
    isForMobile: string;
    isForWeb: string;
    rowStatus: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantParameterId = data["AmigoTenantParameterId"] !== undefined ? data["AmigoTenantParameterId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.value = data["Value"] !== undefined ? data["Value"] : null;
            this.description = data["Description"] !== undefined ? data["Description"] : null;
            this.isForMobile = data["IsForMobile"] !== undefined ? data["IsForMobile"] : null;
            this.isForWeb = data["IsForWeb"] !== undefined ? data["IsForWeb"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantParameterDTO {
        return new AmigoTenantParameterDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantParameterId"] = this.amigoTenantParameterId !== undefined ? this.amigoTenantParameterId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Value"] = this.value !== undefined ? this.value : null;
        data["Description"] = this.description !== undefined ? this.description : null;
        data["IsForMobile"] = this.isForMobile !== undefined ? this.isForMobile : null;
        data["IsForWeb"] = this.isForWeb !== undefined ? this.isForWeb : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantParameterDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfCustomAmigoTenantParameterDTO {
    data: CustomAmigoTenantParameterDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(CustomAmigoTenantParameterDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfCustomAmigoTenantParameterDTO {
        return new ResponseDTOOfListOfCustomAmigoTenantParameterDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfCustomAmigoTenantParameterDTO(JSON.parse(json));
    }
}

export class CustomAmigoTenantParameterDTO {
    code: string;
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.value = data["Value"] !== undefined ? data["Value"] : null;
        }
    }

    static fromJS(data: any): CustomAmigoTenantParameterDTO {
        return new CustomAmigoTenantParameterDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Value"] = this.value !== undefined ? this.value : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CustomAmigoTenantParameterDTO(JSON.parse(json));
    }
}

export class PermissionSearchRequest {
    permissionId: number;
    actionCode: string;
    amigoTenantTRoleCode: string;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.permissionId = data["PermissionId"] !== undefined ? data["PermissionId"] : null;
            this.actionCode = data["ActionCode"] !== undefined ? data["ActionCode"] : null;
            this.amigoTenantTRoleCode = data["AmigoTenantTRoleCode"] !== undefined ? data["AmigoTenantTRoleCode"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): PermissionSearchRequest {
        return new PermissionSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PermissionId"] = this.permissionId !== undefined ? this.permissionId : null;
        data["ActionCode"] = this.actionCode !== undefined ? this.actionCode : null;
        data["AmigoTenantTRoleCode"] = this.amigoTenantTRoleCode !== undefined ? this.amigoTenantTRoleCode : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PermissionSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfPermissionDTO {
    data: PagedListOfPermissionDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfPermissionDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfPermissionDTO {
        return new ResponseDTOOfPagedListOfPermissionDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfPermissionDTO(JSON.parse(json));
    }
}

export class PagedListOfPermissionDTO {
    page: number;
    total: number;
    pageSize: number;
    items: PermissionDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(PermissionDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfPermissionDTO {
        return new PagedListOfPermissionDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfPermissionDTO(JSON.parse(json));
    }
}

export class PermissionDTO {
    permissionId: number;
    amigoTenantTRoleId: number;
    actionId: number;
    actionCode: string;
    entityStatus: PermissionDTOEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.permissionId = data["PermissionId"] !== undefined ? data["PermissionId"] : null;
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.actionId = data["ActionId"] !== undefined ? data["ActionId"] : null;
            this.actionCode = data["ActionCode"] !== undefined ? data["ActionCode"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): PermissionDTO {
        return new PermissionDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PermissionId"] = this.permissionId !== undefined ? this.permissionId : null;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["ActionId"] = this.actionId !== undefined ? this.actionId : null;
        data["ActionCode"] = this.actionCode !== undefined ? this.actionCode : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PermissionDTO(JSON.parse(json));
    }
}

export class PermissionStatusDTO {
    permissionId: number;
    rowStatus: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.permissionId = data["PermissionId"] !== undefined ? data["PermissionId"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
        }
    }

    static fromJS(data: any): PermissionStatusDTO {
        return new PermissionStatusDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["PermissionId"] = this.permissionId !== undefined ? this.permissionId : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PermissionStatusDTO(JSON.parse(json));
    }
}

//export class ProductSearchRequest {
//    name: string;
//    shortName: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
//        }
//    }

//    static fromJS(data: any): ProductSearchRequest {
//        return new ProductSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ProductSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfProductDTO {
//    data: PagedListOfProductDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfProductDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfProductDTO {
//        return new ResponseDTOOfPagedListOfProductDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfProductDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfProductDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: ProductDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(ProductDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfProductDTO {
//        return new PagedListOfProductDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfProductDTO(JSON.parse(json));
//    }
//}

//export class ProductDTO {
//    productId: number;
//    code: string;
//    name: string;
//    shortName: string;
//    isHazardous: string;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
//            this.isHazardous = data["IsHazardous"] !== undefined ? data["IsHazardous"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): ProductDTO {
//        return new ProductDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
//        data["IsHazardous"] = this.isHazardous !== undefined ? this.isHazardous : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ProductDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfProductTypeAheadDTO {
//    data: ProductTypeAheadDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(ProductTypeAheadDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfProductTypeAheadDTO {
//        return new ResponseDTOOfListOfProductTypeAheadDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfProductTypeAheadDTO(JSON.parse(json));
//    }
//}

//export class ProductTypeAheadDTO {
//    productId: number;
//    name: string;
//    code: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//        }
//    }

//    static fromJS(data: any): ProductTypeAheadDTO {
//        return new ProductTypeAheadDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ProductTypeAheadDTO(JSON.parse(json));
//    }
//}

//export class RegisterProductRequest {
//    code: string;
//    name: string;
//    shortName: string;
//    isHazardous: string;
//    isHazardousBool: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
//            this.isHazardous = data["IsHazardous"] !== undefined ? data["IsHazardous"] : null;
//            this.isHazardousBool = data["IsHazardousBool"] !== undefined ? data["IsHazardousBool"] : null;
//        }
//    }

//    static fromJS(data: any): RegisterProductRequest {
//        return new RegisterProductRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
//        data["IsHazardous"] = this.isHazardous !== undefined ? this.isHazardous : null;
//        data["IsHazardousBool"] = this.isHazardousBool !== undefined ? this.isHazardousBool : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new RegisterProductRequest(JSON.parse(json));
//    }
//}

//export class UpdateProductRequest {
//    productId: number;
//    code: string;
//    name: string;
//    shortName: string;
//    isHazardous: string;
//    isHazardousBool: boolean;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
//            this.isHazardous = data["IsHazardous"] !== undefined ? data["IsHazardous"] : null;
//            this.isHazardousBool = data["IsHazardousBool"] !== undefined ? data["IsHazardousBool"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): UpdateProductRequest {
//        return new UpdateProductRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
//        data["IsHazardous"] = this.isHazardous !== undefined ? this.isHazardous : null;
//        data["IsHazardousBool"] = this.isHazardousBool !== undefined ? this.isHazardousBool : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new UpdateProductRequest(JSON.parse(json));
//    }
//}

//export class DeleteProductRequest {
//    productId: number;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): DeleteProductRequest {
//        return new DeleteProductRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new DeleteProductRequest(JSON.parse(json));
//    }
//}

//export class ReportHistoryRequest {
//    dateFrom: Date;
//    dateTo: Date;
//    amigoTenantTUserId: number;
//    serviceCode: string;
//    equipmentNumber: string;
//    equipmentSizeCode: string;
//    equipmentTypeCode: string;
//    approver: string;
//    chargeNumber: string;
//    originBlockCode: string;
//    destinationBlockCode: string;
//    serviceStatus: number;
//    productId: number;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.dateFrom = data["DateFrom"] ? new Date(data["DateFrom"].toString()) : null;
//            this.dateTo = data["DateTo"] ? new Date(data["DateTo"].toString()) : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.serviceCode = data["ServiceCode"] !== undefined ? data["ServiceCode"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.approver = data["Approver"] !== undefined ? data["Approver"] : null;
//            this.chargeNumber = data["ChargeNumber"] !== undefined ? data["ChargeNumber"] : null;
//            this.originBlockCode = data["OriginBlockCode"] !== undefined ? data["OriginBlockCode"] : null;
//            this.destinationBlockCode = data["DestinationBlockCode"] !== undefined ? data["DestinationBlockCode"] : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): ReportHistoryRequest {
//        return new ReportHistoryRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : null;
//        data["DateTo"] = this.dateTo ? this.dateTo.toISOString() : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["ServiceCode"] = this.serviceCode !== undefined ? this.serviceCode : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["Approver"] = this.approver !== undefined ? this.approver : null;
//        data["ChargeNumber"] = this.chargeNumber !== undefined ? this.chargeNumber : null;
//        data["OriginBlockCode"] = this.originBlockCode !== undefined ? this.originBlockCode : null;
//        data["DestinationBlockCode"] = this.destinationBlockCode !== undefined ? this.destinationBlockCode : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ReportHistoryRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfInternalReportDTO {
//    data: PagedListOfInternalReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfInternalReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfInternalReportDTO {
//        return new ResponseDTOOfPagedListOfInternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfInternalReportDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfInternalReportDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: InternalReportDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(InternalReportDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfInternalReportDTO {
//        return new PagedListOfInternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfInternalReportDTO(JSON.parse(json));
//    }
//}

//export class InternalReportDTO {
//    driverPay: number;
//    amigoTenantTUserId: number;
//    username: string;
//    status: string;
//    equipmentNumber: string;
//    equipmentSizeCode: string;
//    equipmentSize: string;
//    equipmentTypeCode: string;
//    equipmentType: string;
//    serviceCode: string;
//    service: string;
//    product: string;
//    isHazardous: string;
//    isHazardousLabel: string;
//    chargeNo: string;
//    chargeType: string;
//    originBlockCode: string;
//    originBlock: string;
//    destinationBlockCode: string;
//    destinationBlock: string;
//    approver: string;
//    serviceStatus: boolean;
//    approvalStatus: string;
//    dispatchingParty: string;
//    serviceStartDate: string;
//    serviceFinishDate: string;
//    customerBill: number;
//    equipmentStatusName: string;
//    driverComments: string;
//    serviceStartDayName: string;
//    serviceFinishDayName: string;
//    serviceTotalHours: number;
//    chassisNo: string;

//    private _localServiceStartDate: Date;
//    private _localServiceFinishDate: Date;

//    public get localServiceStartDate(): Date {
//        return this._localServiceStartDate;
//    };

//    public set localServiceStartDate(date: Date) {
//        this.serviceStartDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//    };

//    public get localServiceFinishDate(): Date {
//        return this._localServiceFinishDate;
//    };
//    public set localServiceFinishDate(date: Date) {
//        this.serviceFinishDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//    };
//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.driverPay = data["DriverPay"] !== undefined ? data["DriverPay"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.status = data["Status"] !== undefined ? data["Status"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentSize = data["EquipmentSize"] !== undefined ? data["EquipmentSize"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.equipmentType = data["EquipmentType"] !== undefined ? data["EquipmentType"] : null;
//            this.serviceCode = data["ServiceCode"] !== undefined ? data["ServiceCode"] : null;
//            this.service = data["Service"] !== undefined ? data["Service"] : null;
//            this.product = data["Product"] !== undefined ? data["Product"] : null;
//            this.isHazardous = data["IsHazardous"] !== undefined ? data["IsHazardous"] : null;
//            this.isHazardousLabel = data["IsHazardousLabel"] !== undefined ? data["IsHazardousLabel"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.originBlockCode = data["OriginBlockCode"] !== undefined ? data["OriginBlockCode"] : null;
//            this.originBlock = data["OriginBlock"] !== undefined ? data["OriginBlock"] : null;
//            this.destinationBlockCode = data["DestinationBlockCode"] !== undefined ? data["DestinationBlockCode"] : null;
//            this.destinationBlock = data["DestinationBlock"] !== undefined ? data["DestinationBlock"] : null;
//            this.approver = data["Approver"] !== undefined ? data["Approver"] : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.approvalStatus = data["ApprovalStatus"] !== undefined ? data["ApprovalStatus"] : null;
//            this.dispatchingParty = data["DispatchingParty"] !== undefined ? data["DispatchingParty"] : null;
//            this.serviceStartDate = data["ServiceStartDate"] ? data["ServiceStartDate"] : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? data["ServiceFinishDate"] : null;
//            this.customerBill = data["CustomerBill"] !== undefined ? data["CustomerBill"] : null;
//            this.equipmentStatusName = data["EquipmentStatusName"] !== undefined ? data["EquipmentStatusName"] : null;
//            this.chassisNo = data["ChassisNo"] !== undefined ? data["ChassisNo"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.serviceStartDayName = data["ServiceStartDayName"] !== undefined ? data["ServiceStartDayName"] : null;
//            this.serviceFinishDayName = data["ServiceFinishDayName"] !== undefined ? data["ServiceFinishDayName"] : null;
//            this.serviceTotalHours = data["ServiceTotalHours"] !== undefined ? data["ServiceTotalHours"] : null;

//            this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//            this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//        }
//    }

//    static fromJS(data: any): InternalReportDTO {
//        return new InternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["DriverPay"] = this.driverPay !== undefined ? this.driverPay : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["Status"] = this.status !== undefined ? this.status : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentSize"] = this.equipmentSize !== undefined ? this.equipmentSize : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["EquipmentType"] = this.equipmentType !== undefined ? this.equipmentType : null;
//        data["ServiceCode"] = this.serviceCode !== undefined ? this.serviceCode : null;
//        data["Service"] = this.service !== undefined ? this.service : null;
//        data["Product"] = this.product !== undefined ? this.product : null;
//        data["IsHazardous"] = this.isHazardous !== undefined ? this.isHazardous : null;
//        data["IsHazardousLabel"] = this.isHazardousLabel !== undefined ? this.isHazardousLabel : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["OriginBlockCode"] = this.originBlockCode !== undefined ? this.originBlockCode : null;
//        data["OriginBlock"] = this.originBlock !== undefined ? this.originBlock : null;
//        data["DestinationBlockCode"] = this.destinationBlockCode !== undefined ? this.destinationBlockCode : null;
//        data["DestinationBlock"] = this.destinationBlock !== undefined ? this.destinationBlock : null;
//        data["Approver"] = this.approver !== undefined ? this.approver : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["ApprovalStatus"] = this.approvalStatus !== undefined ? this.approvalStatus : null;
//        data["DispatchingParty"] = this.dispatchingParty !== undefined ? this.dispatchingParty : null;
//        data["ServiceStartDate"] = this.serviceStartDate ? this.serviceStartDate : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate : null;
//        data["CustomerBill"] = this.customerBill !== undefined ? this.customerBill : null;
//        data["EquipmentStatusName"] = this.equipmentStatusName !== undefined ? this.equipmentStatusName : null;
//        data["ChassisNo"] = this.chassisNo !== undefined ? this.chassisNo : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ServiceStartDayName"] = this.serviceStartDayName !== undefined ? this.serviceStartDayName : null;
//        data["ServiceFinishDayName"] = this.serviceFinishDayName !== undefined ? this.serviceFinishDayName : null;
//        data["ServiceTotalHours"] = this.serviceTotalHours !== undefined ? this.serviceTotalHours : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new InternalReportDTO(JSON.parse(json));
//    }
//}

//export class ReportCurrentRequest {
//    amigoTenantTUserId: number;
//    serviceCode: string;
//    equipmentNumber: string;
//    equipmentSizeCode: string;
//    equipmentTypeCode: string;
//    approver: string;
//    chargeNumber: string;
//    originBlockCode: string;
//    destinationBlockCode: string;
//    serviceStatus: number;
//    equipmentStatusId: number;
//    productId: number;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.serviceCode = data["ServiceCode"] !== undefined ? data["ServiceCode"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.approver = data["Approver"] !== undefined ? data["Approver"] : null;
//            this.chargeNumber = data["ChargeNumber"] !== undefined ? data["ChargeNumber"] : null;
//            this.originBlockCode = data["OriginBlockCode"] !== undefined ? data["OriginBlockCode"] : null;
//            this.destinationBlockCode = data["DestinationBlockCode"] !== undefined ? data["DestinationBlockCode"] : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): ReportCurrentRequest {
//        return new ReportCurrentRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["ServiceCode"] = this.serviceCode !== undefined ? this.serviceCode : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["Approver"] = this.approver !== undefined ? this.approver : null;
//        data["ChargeNumber"] = this.chargeNumber !== undefined ? this.chargeNumber : null;
//        data["OriginBlockCode"] = this.originBlockCode !== undefined ? this.originBlockCode : null;
//        data["DestinationBlockCode"] = this.destinationBlockCode !== undefined ? this.destinationBlockCode : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ReportCurrentRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfExternalReportDTO {
//    data: PagedListOfExternalReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfExternalReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfExternalReportDTO {
//        return new ResponseDTOOfPagedListOfExternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfExternalReportDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfExternalReportDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: ExternalReportDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(ExternalReportDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfExternalReportDTO {
//        return new PagedListOfExternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfExternalReportDTO(JSON.parse(json));
//    }
//}

//export class ExternalReportDTO {
//    amigoTenantTUserId: number;
//    username: string;
//    status: string;
//    equipmentNumber: string;
//    equipmentSizeCode: string;
//    equipmentSize: string;
//    equipmentTypeCode: string;
//    equipmentType: string;
//    serviceCode: string;
//    service: string;
//    product: string;
//    isHazardous: string;
//    isHazardousLabel: string;
//    chargeNo: string;
//    chargeType: string;
//    originBlockCode: string;
//    originBlock: string;
//    destinationBlockCode: string;
//    destinationBlock: string;
//    approver: string;
//    serviceStatus: boolean;
//    approvalStatus: string;
//    dispatchingParty: string;
//    serviceStartDate: string;
//    serviceFinishDate: string;
//    customerBill: number;
//    equipmentStatusName: string;
//    driverComments: string;
//    serviceStartDayName: string;
//    serviceFinishDayName: string;
//    serviceTotalHours: number;
//    chassisNo: string;

//    private _localServiceStartDate: Date;
//    private _localServiceFinishDate: Date;

//    public get localServiceStartDate(): Date {
//        return this._localServiceStartDate;
//    };

//    public set localServiceStartDate(date: Date) {
//        this.serviceStartDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//    };

//    public get localServiceFinishDate(): Date {
//        return this._localServiceFinishDate;
//    };
//    public set localServiceFinishDate(date: Date) {
//        this.serviceFinishDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//    };

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.status = data["Status"] !== undefined ? data["Status"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentSize = data["EquipmentSize"] !== undefined ? data["EquipmentSize"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.equipmentType = data["EquipmentType"] !== undefined ? data["EquipmentType"] : null;
//            this.serviceCode = data["ServiceCode"] !== undefined ? data["ServiceCode"] : null;
//            this.service = data["Service"] !== undefined ? data["Service"] : null;
//            this.product = data["Product"] !== undefined ? data["Product"] : null;
//            this.isHazardous = data["IsHazardous"] !== undefined ? data["IsHazardous"] : null;
//            this.isHazardousLabel = data["IsHazardousLabel"] !== undefined ? data["IsHazardousLabel"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.originBlockCode = data["OriginBlockCode"] !== undefined ? data["OriginBlockCode"] : null;
//            this.originBlock = data["OriginBlock"] !== undefined ? data["OriginBlock"] : null;
//            this.destinationBlockCode = data["DestinationBlockCode"] !== undefined ? data["DestinationBlockCode"] : null;
//            this.destinationBlock = data["DestinationBlock"] !== undefined ? data["DestinationBlock"] : null;
//            this.approver = data["Approver"] !== undefined ? data["Approver"] : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.approvalStatus = data["ApprovalStatus"] !== undefined ? data["ApprovalStatus"] : null;
//            this.dispatchingParty = data["DispatchingParty"] !== undefined ? data["DispatchingParty"] : null;
//            this.serviceStartDate = data["ServiceStartDate"] ? data["ServiceStartDate"].toString() : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? data["ServiceFinishDate"].toString() : null;
//            this.customerBill = data["CustomerBill"] !== undefined ? data["CustomerBill"] : null;
//            this.equipmentStatusName = data["EquipmentStatusName"] !== undefined ? data["EquipmentStatusName"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.serviceStartDayName = data["ServiceStartDayName"] !== undefined ? data["ServiceStartDayName"] : null;
//            this.serviceFinishDayName = data["ServiceFinishDayName"] !== undefined ? data["ServiceFinishDayName"] : null;
//            this.serviceTotalHours = data["ServiceTotalHours"] !== undefined ? data["ServiceTotalHours"] : null;
//            this.chassisNo = data["ChassisNo"] !== undefined ? data["ChassisNo"] : null;

//            this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//            this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//        }
//    }

//    static fromJS(data: any): ExternalReportDTO {
//        return new ExternalReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["Status"] = this.status !== undefined ? this.status : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentSize"] = this.equipmentSize !== undefined ? this.equipmentSize : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["EquipmentType"] = this.equipmentType !== undefined ? this.equipmentType : null;
//        data["ServiceCode"] = this.serviceCode !== undefined ? this.serviceCode : null;
//        data["Service"] = this.service !== undefined ? this.service : null;
//        data["Product"] = this.product !== undefined ? this.product : null;
//        data["IsHazardous"] = this.isHazardous !== undefined ? this.isHazardous : null;
//        data["IsHazardousLabel"] = this.isHazardousLabel !== undefined ? this.isHazardousLabel : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["OriginBlockCode"] = this.originBlockCode !== undefined ? this.originBlockCode : null;
//        data["OriginBlock"] = this.originBlock !== undefined ? this.originBlock : null;
//        data["DestinationBlockCode"] = this.destinationBlockCode !== undefined ? this.destinationBlockCode : null;
//        data["DestinationBlock"] = this.destinationBlock !== undefined ? this.destinationBlock : null;
//        data["Approver"] = this.approver !== undefined ? this.approver : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["ApprovalStatus"] = this.approvalStatus !== undefined ? this.approvalStatus : null;
//        data["DispatchingParty"] = this.dispatchingParty !== undefined ? this.dispatchingParty : null;
//        data["ServiceStartDate"] = this.serviceStartDate ? this.serviceStartDate : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate : null;
//        data["CustomerBill"] = this.customerBill !== undefined ? this.customerBill : null;
//        data["EquipmentStatusName"] = this.equipmentStatusName !== undefined ? this.equipmentStatusName : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ServiceStartDayName"] = this.serviceStartDayName !== undefined ? this.serviceStartDayName : null;
//        data["ServiceFinishDayName"] = this.serviceFinishDayName !== undefined ? this.serviceFinishDayName : null;
//        data["ServiceTotalHours"] = this.serviceTotalHours !== undefined ? this.serviceTotalHours : null;
//        data["ChassisNo"] = this.chassisNo !== undefined ? this.chassisNo : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ExternalReportDTO(JSON.parse(json));
//    }
//}

//export class ServiceSearchRequest {
//    serviceTypeCode: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.serviceTypeCode = data["ServiceTypeCode"] !== undefined ? data["ServiceTypeCode"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): ServiceSearchRequest {
//        return new ServiceSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ServiceTypeCode"] = this.serviceTypeCode !== undefined ? this.serviceTypeCode : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ServiceSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfServiceDTO {
//    data: PagedListOfServiceDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfServiceDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfServiceDTO {
//        return new ResponseDTOOfPagedListOfServiceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfServiceDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfServiceDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: ServiceDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(ServiceDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfServiceDTO {
//        return new PagedListOfServiceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfServiceDTO(JSON.parse(json));
//    }
//}

//export class ServiceDTO {
//    serviceId: number;
//    code: string;
//    name: string;
//    isPerMove: string;
//    isPerHour: string;
//    serviceTypeId: number;
//    rowStatus: boolean;
//    serviceTypeCode: string;
//    blockRequiredCode: string;
//    productRequiredCode: string;
//    equipmentRequiredCode: string;
//    chassisRequiredCode: string;
//    dispatchingPartyRequiredCode: string;
//    equipmentStatusRequiredCode: string;
//    bobtailAuthRequiredCode: string;
//    hasH34RequiredCode: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.serviceId = data["ServiceId"] !== undefined ? data["ServiceId"] : null;
//            this.code = data["Code"] !== undefined ? data["Code"] : null;
//            this.name = data["Name"] !== undefined ? data["Name"] : null;
//            this.isPerMove = data["IsPerMove"] !== undefined ? data["IsPerMove"] : null;
//            this.isPerHour = data["IsPerHour"] !== undefined ? data["IsPerHour"] : null;
//            this.serviceTypeId = data["ServiceTypeId"] !== undefined ? data["ServiceTypeId"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.serviceTypeCode = data["ServiceTypeCode"] !== undefined ? data["ServiceTypeCode"] : null;
//            this.blockRequiredCode = data["BlockRequiredCode"] !== undefined ? data["BlockRequiredCode"] : null;
//            this.productRequiredCode = data["ProductRequiredCode"] !== undefined ? data["ProductRequiredCode"] : null;
//            this.equipmentRequiredCode = data["EquipmentRequiredCode"] !== undefined ? data["EquipmentRequiredCode"] : null;
//            this.chassisRequiredCode = data["ChassisRequiredCode"] !== undefined ? data["ChassisRequiredCode"] : null;
//            this.dispatchingPartyRequiredCode = data["DispatchingPartyRequiredCode"] !== undefined ? data["DispatchingPartyRequiredCode"] : null;
//            this.equipmentStatusRequiredCode = data["EquipmentStatusRequiredCode"] !== undefined ? data["EquipmentStatusRequiredCode"] : null;
//            this.bobtailAuthRequiredCode = data["BobtailAuthRequiredCode"] !== undefined ? data["BobtailAuthRequiredCode"] : null;
//            this.hasH34RequiredCode = data["HasH34RequiredCode"] !== undefined ? data["HasH34RequiredCode"] : null;
//        }
//    }

//    static fromJS(data: any): ServiceDTO {
//        return new ServiceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ServiceId"] = this.serviceId !== undefined ? this.serviceId : null;
//        data["Code"] = this.code !== undefined ? this.code : null;
//        data["Name"] = this.name !== undefined ? this.name : null;
//        data["IsPerMove"] = this.isPerMove !== undefined ? this.isPerMove : null;
//        data["IsPerHour"] = this.isPerHour !== undefined ? this.isPerHour : null;
//        data["ServiceTypeId"] = this.serviceTypeId !== undefined ? this.serviceTypeId : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["ServiceTypeCode"] = this.serviceTypeCode !== undefined ? this.serviceTypeCode : null;
//        data["BlockRequiredCode"] = this.blockRequiredCode !== undefined ? this.blockRequiredCode : null;
//        data["ProductRequiredCode"] = this.productRequiredCode !== undefined ? this.productRequiredCode : null;
//        data["EquipmentRequiredCode"] = this.equipmentRequiredCode !== undefined ? this.equipmentRequiredCode : null;
//        data["ChassisRequiredCode"] = this.chassisRequiredCode !== undefined ? this.chassisRequiredCode : null;
//        data["DispatchingPartyRequiredCode"] = this.dispatchingPartyRequiredCode !== undefined ? this.dispatchingPartyRequiredCode : null;
//        data["EquipmentStatusRequiredCode"] = this.equipmentStatusRequiredCode !== undefined ? this.equipmentStatusRequiredCode : null;
//        data["BobtailAuthRequiredCode"] = this.bobtailAuthRequiredCode !== undefined ? this.bobtailAuthRequiredCode : null;
//        data["HasH34RequiredCode"] = this.hasH34RequiredCode !== undefined ? this.hasH34RequiredCode : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ServiceDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfListOfServiceDTO {
//    data: ServiceDTO[];
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            if (data["Data"] && data["Data"].constructor === Array) {
//                this.data = [];
//                for (let item of data["Data"])
//                    this.data.push(ServiceDTO.fromJS(item));
//            }
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfListOfServiceDTO {
//        return new ResponseDTOOfListOfServiceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        if (this.data && this.data.constructor === Array) {
//            data["Data"] = [];
//            for (let item of this.data)
//                data["Data"].push(item.toJS());
//        }
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfListOfServiceDTO(JSON.parse(json));
//    }
//}

//export class AmigoTenantTEventLogDTO {
//    activityTypeId: number;
//    activityCode: string;
//    username: string;
//    reportedActivityDate: Date;
//    reportedActivityTimeZone: string;
//    convertedActivityUTC: Date;
//    logType: string;
//    parameters: string;
//    amigoTenantMoveId: number;
//    amigoTenantMoveNumber: string;
//    equipmentNumber: string;
//    equipmentId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    latitude: number;
//    longitude: number;
//    accuracy: number;
//    locationProvider: string;
//    chargeNo: string;
//    includeRequestLog: boolean;
//    userId: number;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;
//    rowStatus: boolean;
//    entityStatus: AmigoTenantTEventLogDTOEntityStatus;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.activityCode = data["ActivityCode"] !== undefined ? data["ActivityCode"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.convertedActivityUTC = data["ConvertedActivityUTC"] ? new Date(data["ConvertedActivityUTC"].toString()) : null;
//            this.logType = data["LogType"] !== undefined ? data["LogType"] : null;
//            this.parameters = data["Parameters"] !== undefined ? data["Parameters"] : null;
//            this.amigoTenantMoveId = data["AmigoTenantMoveId"] !== undefined ? data["AmigoTenantMoveId"] : null;
//            this.amigoTenantMoveNumber = data["AmigoTenantMoveNumber"] !== undefined ? data["AmigoTenantMoveNumber"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentId = data["EquipmentId"] !== undefined ? data["EquipmentId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.includeRequestLog = data["IncludeRequestLog"] !== undefined ? data["IncludeRequestLog"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenantTEventLogDTO {
//        return new AmigoTenantTEventLogDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["ActivityCode"] = this.activityCode !== undefined ? this.activityCode : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["ConvertedActivityUTC"] = this.convertedActivityUTC ? this.convertedActivityUTC.toISOString() : null;
//        data["LogType"] = this.logType !== undefined ? this.logType : null;
//        data["Parameters"] = this.parameters !== undefined ? this.parameters : null;
//        data["AmigoTenantMoveId"] = this.amigoTenantMoveId !== undefined ? this.amigoTenantMoveId : null;
//        data["AmigoTenantMoveNumber"] = this.amigoTenantMoveNumber !== undefined ? this.amigoTenantMoveNumber : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentId"] = this.equipmentId !== undefined ? this.equipmentId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["IncludeRequestLog"] = this.includeRequestLog !== undefined ? this.includeRequestLog : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTEventLogDTO(JSON.parse(json));
//    }
//}

//export class AmigoTenantTEventLogSearchRequest {
//    activityTypeCode: string;
//    username: string;
//    reportedActivityDateFrom: Date;
//    reportedActivityDateTo: Date;
//    reportedActivityTimeZone: string;
//    logType: string;
//    parameters: string;
//    amigoTenantMoveId: number;
//    amigoTenantMoveNumber: string;
//    shipmentID: string;
//    costCenterCode: string;
//    costCenterId: number;
//    equipmentNumber: string;
//    equipmentId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    locationProvider: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.activityTypeCode = data["ActivityTypeCode"] !== undefined ? data["ActivityTypeCode"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.reportedActivityDateFrom = data["ReportedActivityDateFrom"] ? new Date(data["ReportedActivityDateFrom"].toString()) : null;
//            this.reportedActivityDateTo = data["ReportedActivityDateTo"] ? new Date(data["ReportedActivityDateTo"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.logType = data["LogType"] !== undefined ? data["LogType"] : null;
//            this.parameters = data["Parameters"] !== undefined ? data["Parameters"] : null;
//            this.amigoTenantMoveId = data["AmigoTenantMoveId"] !== undefined ? data["AmigoTenantMoveId"] : null;
//            this.amigoTenantMoveNumber = data["AmigoTenantMoveNumber"] !== undefined ? data["AmigoTenantMoveNumber"] : null;
//            this.shipmentID = data["ShipmentID"] !== undefined ? data["ShipmentID"] : null;
//            this.costCenterCode = data["CostCenterCode"] !== undefined ? data["CostCenterCode"] : null;
//            this.costCenterId = data["CostCenterId"] !== undefined ? data["CostCenterId"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentId = data["EquipmentId"] !== undefined ? data["EquipmentId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenantTEventLogSearchRequest {
//        return new AmigoTenantTEventLogSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ActivityTypeCode"] = this.activityTypeCode !== undefined ? this.activityTypeCode : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["ReportedActivityDateFrom"] = this.reportedActivityDateFrom ? this.reportedActivityDateFrom.toISOString() : null;
//        data["ReportedActivityDateTo"] = this.reportedActivityDateTo ? this.reportedActivityDateTo.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["LogType"] = this.logType !== undefined ? this.logType : null;
//        data["Parameters"] = this.parameters !== undefined ? this.parameters : null;
//        data["AmigoTenantMoveId"] = this.amigoTenantMoveId !== undefined ? this.amigoTenantMoveId : null;
//        data["AmigoTenantMoveNumber"] = this.amigoTenantMoveNumber !== undefined ? this.amigoTenantMoveNumber : null;
//        data["ShipmentID"] = this.shipmentID !== undefined ? this.shipmentID : null;
//        data["CostCenterCode"] = this.costCenterCode !== undefined ? this.costCenterCode : null;
//        data["CostCenterId"] = this.costCenterId !== undefined ? this.costCenterId : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentId"] = this.equipmentId !== undefined ? this.equipmentId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTEventLogSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfAmigoTenantTEventLogSearchResultDTO {
//    data: PagedListOfAmigoTenantTEventLogSearchResultDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfAmigoTenantTEventLogSearchResultDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfAmigoTenantTEventLogSearchResultDTO {
//        return new ResponseDTOOfPagedListOfAmigoTenantTEventLogSearchResultDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfAmigoTenantTEventLogSearchResultDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfAmigoTenantTEventLogSearchResultDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: AmigoTenantTEventLogSearchResultDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(AmigoTenantTEventLogSearchResultDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfAmigoTenantTEventLogSearchResultDTO {
//        return new PagedListOfAmigoTenantTEventLogSearchResultDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfAmigoTenantTEventLogSearchResultDTO(JSON.parse(json));
//    }
//}

//export class AmigoTenantTEventLogSearchResultDTO {
//    amigoTenantTEventLogId: number;
//    activityTypeId: number;
//    activityTypeCode: string;
//    activityTypeName: string;
//    username: string;
//    reportedActivityDate: Date;
//    reportedActivityTimeZone: string;
//    convertedActivityUTC: Date;
//    logType: string;
//    parameters: string;
//    amigoTenantMoveId: number;
//    amigoTenantMoveNumber: string;
//    equipmentNumber: string;
//    equipmentId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    latitude: number;
//    longitude: number;
//    accuracy: number;
//    locationProvider: string;
//    chargeNo: string;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;
//    rowStatus: boolean;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTEventLogId = data["AmigoTenantTEventLogId"] !== undefined ? data["AmigoTenantTEventLogId"] : null;
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.activityTypeCode = data["ActivityTypeCode"] !== undefined ? data["ActivityTypeCode"] : null;
//            this.activityTypeName = data["ActivityTypeName"] !== undefined ? data["ActivityTypeName"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.convertedActivityUTC = data["ConvertedActivityUTC"] ? new Date(data["ConvertedActivityUTC"].toString()) : null;
//            this.logType = data["LogType"] !== undefined ? data["LogType"] : null;
//            this.parameters = data["Parameters"] !== undefined ? data["Parameters"] : null;
//            this.amigoTenantMoveId = data["AmigoTenantMoveId"] !== undefined ? data["AmigoTenantMoveId"] : null;
//            this.amigoTenantMoveNumber = data["AmigoTenantMoveNumber"] !== undefined ? data["AmigoTenantMoveNumber"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentId = data["EquipmentId"] !== undefined ? data["EquipmentId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenantTEventLogSearchResultDTO {
//        return new AmigoTenantTEventLogSearchResultDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTEventLogId"] = this.amigoTenantTEventLogId !== undefined ? this.amigoTenantTEventLogId : null;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["ActivityTypeCode"] = this.activityTypeCode !== undefined ? this.activityTypeCode : null;
//        data["ActivityTypeName"] = this.activityTypeName !== undefined ? this.activityTypeName : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["ConvertedActivityUTC"] = this.convertedActivityUTC ? this.convertedActivityUTC.toISOString() : null;
//        data["LogType"] = this.logType !== undefined ? this.logType : null;
//        data["Parameters"] = this.parameters !== undefined ? this.parameters : null;
//        data["AmigoTenantMoveId"] = this.amigoTenantMoveId !== undefined ? this.amigoTenantMoveId : null;
//        data["AmigoTenantMoveNumber"] = this.amigoTenantMoveNumber !== undefined ? this.amigoTenantMoveNumber : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentId"] = this.equipmentId !== undefined ? this.equipmentId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTEventLogSearchResultDTO(JSON.parse(json));
//    }
//}

export class AmigoTenantTRoleSearchRequest {
    amigoTenantTRoleId: number;
    name: string;
    code: string;
    isAdmin: boolean;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.isAdmin = data["IsAdmin"] !== undefined ? data["IsAdmin"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTRoleSearchRequest {
        return new AmigoTenantTRoleSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTRoleSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfAmigoTenantTRoleDTO {
    data: PagedListOfAmigoTenantTRoleDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfAmigoTenantTRoleDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfAmigoTenantTRoleDTO {
        return new ResponseDTOOfPagedListOfAmigoTenantTRoleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfAmigoTenantTRoleDTO(JSON.parse(json));
    }
}

export class PagedListOfAmigoTenantTRoleDTO {
    page: number;
    total: number;
    pageSize: number;
    items: AmigoTenantTRoleDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(AmigoTenantTRoleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfAmigoTenantTRoleDTO {
        return new PagedListOfAmigoTenantTRoleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfAmigoTenantTRoleDTO(JSON.parse(json));
    }
}

export class AmigoTenantTRoleDTO {
    amigoTenantTRoleId: number;
    name: string;
    code: string;
    isAdmin: boolean;
    rowStatus: boolean;
    entityStatus: AmigoTenantTRoleDTOEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.isAdmin = data["IsAdmin"] !== undefined ? data["IsAdmin"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTRoleDTO {
        return new AmigoTenantTRoleDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTRoleDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO {
    data: PagedListOfAmigoTenantTRoleBasicDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfAmigoTenantTRoleBasicDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO {
        return new ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfAmigoTenantTRoleBasicDTO(JSON.parse(json));
    }
}

export class PagedListOfAmigoTenantTRoleBasicDTO {
    page: number;
    total: number;
    pageSize: number;
    items: AmigoTenantTRoleBasicDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(AmigoTenantTRoleBasicDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfAmigoTenantTRoleBasicDTO {
        return new PagedListOfAmigoTenantTRoleBasicDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfAmigoTenantTRoleBasicDTO(JSON.parse(json));
    }
}

export class AmigoTenantTRoleBasicDTO {
    amigoTenantTRoleId: number;
    name: string;
    code: string;
    isAdmin: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.isAdmin = data["IsAdmin"] !== undefined ? data["IsAdmin"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTRoleBasicDTO {
        return new AmigoTenantTRoleBasicDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTRoleBasicDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfModuleTreeDTO {
    data: ModuleTreeDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(ModuleTreeDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfModuleTreeDTO {
        return new ResponseDTOOfListOfModuleTreeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfModuleTreeDTO(JSON.parse(json));
    }
}

export class ModuleTreeDTO {
    actionId: number;
    code: string;
    enabled: boolean;
    name: string;
    parentCode: string;
    moduleTreeType: ModuleTreeDTOModuleTreeType;
    children: ModuleTreeDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.actionId = data["ActionId"] !== undefined ? data["ActionId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.enabled = data["Enabled"] !== undefined ? data["Enabled"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.parentCode = data["ParentCode"] !== undefined ? data["ParentCode"] : null;
            this.moduleTreeType = data["ModuleTreeType"] !== undefined ? data["ModuleTreeType"] : null;
            if (data["Children"] && data["Children"].constructor === Array) {
                this.children = [];
                for (let item of data["Children"])
                    this.children.push(ModuleTreeDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleTreeDTO {
        return new ModuleTreeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ActionId"] = this.actionId !== undefined ? this.actionId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Enabled"] = this.enabled !== undefined ? this.enabled : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["ParentCode"] = this.parentCode !== undefined ? this.parentCode : null;
        data["ModuleTreeType"] = this.moduleTreeType !== undefined ? this.moduleTreeType : null;
        if (this.children && this.children.constructor === Array) {
            data["Children"] = [];
            for (let item of this.children)
                data["Children"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ModuleTreeDTO(JSON.parse(json));
    }
}

export class AmigoTenanttRolPermissionRequest {
    codeRol: string;
    codeAction: string;
    actionId: number;
    entityStatus: AmigoTenanttRolPermissionRequestEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.codeRol = data["CodeRol"] !== undefined ? data["CodeRol"] : null;
            this.codeAction = data["CodeAction"] !== undefined ? data["CodeAction"] : null;
            this.actionId = data["ActionId"] !== undefined ? data["ActionId"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenanttRolPermissionRequest {
        return new AmigoTenanttRolPermissionRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CodeRol"] = this.codeRol !== undefined ? this.codeRol : null;
        data["CodeAction"] = this.codeAction !== undefined ? this.codeAction : null;
        data["ActionId"] = this.actionId !== undefined ? this.actionId : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenanttRolPermissionRequest(JSON.parse(json));
    }
}

export class AmigoTenantTRoleStatusDTO {
    amigoTenantTRoleId: number;
    rowStatus: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTRoleStatusDTO {
        return new AmigoTenantTRoleStatusDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTRoleStatusDTO(JSON.parse(json));
    }
}

//export class AmigoTenanttServiceDTO {
//    amigoTenantTServiceId: number;
//    serviceOrderNo: string;
//    serviceStartDate: Date;
//    serviceStartDateTZ: string;
//    serviceFinishDate: Date;
//    serviceFinishDateTZ: string;
//    serviceStartDateUTC: Date;
//    serviceFinishDateUTC: Date;
//    equipmentNumber: string;
//    equipmentTestDate25Year: Date;
//    equipmentTestDate5Year: Date;
//    chassisNumber: string;
//    chargeType: string;
//    shipmentID: string;
//    authorizationCode: string;
//    hasH34: boolean;
//    detentionInMinutesReal: number;
//    detentionInMinutesRounded: number;
//    acknowledgeBy: string;
//    serviceAcknowledgeDate: Date;
//    serviceAcknowledgeDateTZ: string;
//    serviceAcknowledgeDateUTC: Date;
//    isAknowledged: boolean;
//    approvedBy: string;
//    approvalDate: Date;
//    serviceStatus: boolean;
//    approvalModified: string;
//    originLocationId: number;
//    destinationLocationId: number;
//    dispatchingPartyId: number;
//    equipmentSizeId: number;
//    equipmentTypeId: number;
//    equipmentStatusId: number;
//    costCenterId: number;
//    productId: number;
//    productDescription: string;
//    serviceId: number;
//    amigoTenantTUserId: number;
//    payBy: string;
//    includeRequestLog: boolean;
//    chargeNo: string;
//    driverComments: string;
//    activityTypeId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    latitude: number;
//    longitude: number;
//    accuracy: number;
//    locationProvider: string;
//    reportedActivityDate: Date;
//    reportedActivityTimeZone: string;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.serviceOrderNo = data["ServiceOrderNo"] !== undefined ? data["ServiceOrderNo"] : null;
//            this.serviceStartDate = data["ServiceStartDate"] ? new Date(data["ServiceStartDate"].toString()) : null;
//            this.serviceStartDateTZ = data["ServiceStartDateTZ"] !== undefined ? data["ServiceStartDateTZ"] : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? new Date(data["ServiceFinishDate"].toString()) : null;
//            this.serviceFinishDateTZ = data["ServiceFinishDateTZ"] !== undefined ? data["ServiceFinishDateTZ"] : null;
//            this.serviceStartDateUTC = data["ServiceStartDateUTC"] ? new Date(data["ServiceStartDateUTC"].toString()) : null;
//            this.serviceFinishDateUTC = data["ServiceFinishDateUTC"] ? new Date(data["ServiceFinishDateUTC"].toString()) : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentTestDate25Year = data["EquipmentTestDate25Year"] ? new Date(data["EquipmentTestDate25Year"].toString()) : null;
//            this.equipmentTestDate5Year = data["EquipmentTestDate5Year"] ? new Date(data["EquipmentTestDate5Year"].toString()) : null;
//            this.chassisNumber = data["ChassisNumber"] !== undefined ? data["ChassisNumber"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.shipmentID = data["ShipmentID"] !== undefined ? data["ShipmentID"] : null;
//            this.authorizationCode = data["AuthorizationCode"] !== undefined ? data["AuthorizationCode"] : null;
//            this.hasH34 = data["HasH34"] !== undefined ? data["HasH34"] : null;
//            this.detentionInMinutesReal = data["DetentionInMinutesReal"] !== undefined ? data["DetentionInMinutesReal"] : null;
//            this.detentionInMinutesRounded = data["DetentionInMinutesRounded"] !== undefined ? data["DetentionInMinutesRounded"] : null;
//            this.acknowledgeBy = data["AcknowledgeBy"] !== undefined ? data["AcknowledgeBy"] : null;
//            this.serviceAcknowledgeDate = data["ServiceAcknowledgeDate"] ? new Date(data["ServiceAcknowledgeDate"].toString()) : null;
//            this.serviceAcknowledgeDateTZ = data["ServiceAcknowledgeDateTZ"] !== undefined ? data["ServiceAcknowledgeDateTZ"] : null;
//            this.serviceAcknowledgeDateUTC = data["ServiceAcknowledgeDateUTC"] ? new Date(data["ServiceAcknowledgeDateUTC"].toString()) : null;
//            this.isAknowledged = data["IsAknowledged"] !== undefined ? data["IsAknowledged"] : null;
//            this.approvedBy = data["ApprovedBy"] !== undefined ? data["ApprovedBy"] : null;
//            this.approvalDate = data["ApprovalDate"] ? new Date(data["ApprovalDate"].toString()) : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.approvalModified = data["ApprovalModified"] !== undefined ? data["ApprovalModified"] : null;
//            this.originLocationId = data["OriginLocationId"] !== undefined ? data["OriginLocationId"] : null;
//            this.destinationLocationId = data["DestinationLocationId"] !== undefined ? data["DestinationLocationId"] : null;
//            this.dispatchingPartyId = data["DispatchingPartyId"] !== undefined ? data["DispatchingPartyId"] : null;
//            this.equipmentSizeId = data["EquipmentSizeId"] !== undefined ? data["EquipmentSizeId"] : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.costCenterId = data["CostCenterId"] !== undefined ? data["CostCenterId"] : null;
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.productDescription = data["ProductDescription"] !== undefined ? data["ProductDescription"] : null;
//            this.serviceId = data["ServiceId"] !== undefined ? data["ServiceId"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.payBy = data["PayBy"] !== undefined ? data["PayBy"] : null;
//            this.includeRequestLog = data["IncludeRequestLog"] !== undefined ? data["IncludeRequestLog"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenanttServiceDTO {
//        return new AmigoTenanttServiceDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["ServiceOrderNo"] = this.serviceOrderNo !== undefined ? this.serviceOrderNo : null;
//        data["ServiceStartDate"] = this.serviceStartDate ? this.serviceStartDate.toISOString() : null;
//        data["ServiceStartDateTZ"] = this.serviceStartDateTZ !== undefined ? this.serviceStartDateTZ : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate.toISOString() : null;
//        data["ServiceFinishDateTZ"] = this.serviceFinishDateTZ !== undefined ? this.serviceFinishDateTZ : null;
//        data["ServiceStartDateUTC"] = this.serviceStartDateUTC ? this.serviceStartDateUTC.toISOString() : null;
//        data["ServiceFinishDateUTC"] = this.serviceFinishDateUTC ? this.serviceFinishDateUTC.toISOString() : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentTestDate25Year"] = this.equipmentTestDate25Year ? this.equipmentTestDate25Year.toISOString() : null;
//        data["EquipmentTestDate5Year"] = this.equipmentTestDate5Year ? this.equipmentTestDate5Year.toISOString() : null;
//        data["ChassisNumber"] = this.chassisNumber !== undefined ? this.chassisNumber : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["ShipmentID"] = this.shipmentID !== undefined ? this.shipmentID : null;
//        data["AuthorizationCode"] = this.authorizationCode !== undefined ? this.authorizationCode : null;
//        data["HasH34"] = this.hasH34 !== undefined ? this.hasH34 : null;
//        data["DetentionInMinutesReal"] = this.detentionInMinutesReal !== undefined ? this.detentionInMinutesReal : null;
//        data["DetentionInMinutesRounded"] = this.detentionInMinutesRounded !== undefined ? this.detentionInMinutesRounded : null;
//        data["AcknowledgeBy"] = this.acknowledgeBy !== undefined ? this.acknowledgeBy : null;
//        data["ServiceAcknowledgeDate"] = this.serviceAcknowledgeDate ? this.serviceAcknowledgeDate.toISOString() : null;
//        data["ServiceAcknowledgeDateTZ"] = this.serviceAcknowledgeDateTZ !== undefined ? this.serviceAcknowledgeDateTZ : null;
//        data["ServiceAcknowledgeDateUTC"] = this.serviceAcknowledgeDateUTC ? this.serviceAcknowledgeDateUTC.toISOString() : null;
//        data["IsAknowledged"] = this.isAknowledged !== undefined ? this.isAknowledged : null;
//        data["ApprovedBy"] = this.approvedBy !== undefined ? this.approvedBy : null;
//        data["ApprovalDate"] = this.approvalDate ? this.approvalDate.toISOString() : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["ApprovalModified"] = this.approvalModified !== undefined ? this.approvalModified : null;
//        data["OriginLocationId"] = this.originLocationId !== undefined ? this.originLocationId : null;
//        data["DestinationLocationId"] = this.destinationLocationId !== undefined ? this.destinationLocationId : null;
//        data["DispatchingPartyId"] = this.dispatchingPartyId !== undefined ? this.dispatchingPartyId : null;
//        data["EquipmentSizeId"] = this.equipmentSizeId !== undefined ? this.equipmentSizeId : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["CostCenterId"] = this.costCenterId !== undefined ? this.costCenterId : null;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["ProductDescription"] = this.productDescription !== undefined ? this.productDescription : null;
//        data["ServiceId"] = this.serviceId !== undefined ? this.serviceId : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["PayBy"] = this.payBy !== undefined ? this.payBy : null;
//        data["IncludeRequestLog"] = this.includeRequestLog !== undefined ? this.includeRequestLog : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenanttServiceDTO(JSON.parse(json));
//    }
//}

export class ResponseDTOOfInt32 {
    data: number;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] !== undefined ? data["Data"] : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfInt32 {
        return new ResponseDTOOfInt32(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data !== undefined ? this.data : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfInt32(JSON.parse(json));
    }
}

//export class UpdateAmigoTenantServiceRequest {
//    amigoTenantTServiceId: number;
//    serviceFinishDate: Date;
//    serviceFinishDateTZ: string;
//    serviceFinishDateUTC: Date;
//    destinationLocationId: number;
//    updatedBy: number;
//    updatedDate: Date;
//    serviceOrderNo: string;
//    amigoTenantTUserId: number;
//    includeRequestLog: boolean;
//    chargeType: string;
//    shipmentID: string;
//    costCenterId: number;
//    driverComments: string;
//    activityTypeId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    latitude: number;
//    longitude: number;
//    accuracy: number;
//    locationProvider: string;
//    reportedActivityDate: Date;
//    reportedActivityTimeZone: string;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? new Date(data["ServiceFinishDate"].toString()) : null;
//            this.serviceFinishDateTZ = data["ServiceFinishDateTZ"] !== undefined ? data["ServiceFinishDateTZ"] : null;
//            this.serviceFinishDateUTC = data["ServiceFinishDateUTC"] ? new Date(data["ServiceFinishDateUTC"].toString()) : null;
//            this.destinationLocationId = data["DestinationLocationId"] !== undefined ? data["DestinationLocationId"] : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.serviceOrderNo = data["ServiceOrderNo"] !== undefined ? data["ServiceOrderNo"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.includeRequestLog = data["IncludeRequestLog"] !== undefined ? data["IncludeRequestLog"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.shipmentID = data["ShipmentID"] !== undefined ? data["ShipmentID"] : null;
//            this.costCenterId = data["CostCenterId"] !== undefined ? data["CostCenterId"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): UpdateAmigoTenantServiceRequest {
//        return new UpdateAmigoTenantServiceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate.toISOString() : null;
//        data["ServiceFinishDateTZ"] = this.serviceFinishDateTZ !== undefined ? this.serviceFinishDateTZ : null;
//        data["ServiceFinishDateUTC"] = this.serviceFinishDateUTC ? this.serviceFinishDateUTC.toISOString() : null;
//        data["DestinationLocationId"] = this.destinationLocationId !== undefined ? this.destinationLocationId : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["ServiceOrderNo"] = this.serviceOrderNo !== undefined ? this.serviceOrderNo : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["IncludeRequestLog"] = this.includeRequestLog !== undefined ? this.includeRequestLog : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["ShipmentID"] = this.shipmentID !== undefined ? this.shipmentID : null;
//        data["CostCenterId"] = this.costCenterId !== undefined ? this.costCenterId : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new UpdateAmigoTenantServiceRequest(JSON.parse(json));
//    }
//}

//export class AmigoTenantTServiceSearchRequest {
//    from: Date;
//    to: Date;
//    driverId: number;
//    chargeNoType: string;
//    equipmentTypeCode: string;
//    equipmentSizeCode: string;
//    equipmentTypeId: number;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.from = data["From"] ? new Date(data["From"].toString()) : null;
//            this.to = data["To"] ? new Date(data["To"].toString()) : null;
//            this.driverId = data["DriverId"] !== undefined ? data["DriverId"] : null;
//            this.chargeNoType = data["ChargeNoType"] !== undefined ? data["ChargeNoType"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenantTServiceSearchRequest {
//        return new AmigoTenantTServiceSearchRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["From"] = this.from ? this.from.toISOString() : null;
//        data["To"] = this.to ? this.to.toISOString() : null;
//        data["DriverId"] = this.driverId !== undefined ? this.driverId : null;
//        data["ChargeNoType"] = this.chargeNoType !== undefined ? this.chargeNoType : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTServiceSearchRequest(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfPagedListOfAmigoTenantTServiceReportDTO {
//    data: PagedListOfAmigoTenantTServiceReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListOfAmigoTenantTServiceReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListOfAmigoTenantTServiceReportDTO {
//        return new ResponseDTOOfPagedListOfAmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListOfAmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

//export class PagedListOfAmigoTenantTServiceReportDTO {
//    page: number;
//    total: number;
//    pageSize: number;
//    items: AmigoTenantTServiceReportDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(AmigoTenantTServiceReportDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListOfAmigoTenantTServiceReportDTO {
//        return new PagedListOfAmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListOfAmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

//export class AmigoTenantTServiceReportDTO {
//    serviceName: string;
//    isSelected: boolean;
//    amigoTenantTServiceId: string;
//    costCenterCode: string;
//    chargeNoType: string;
//    serviceCode: string;
//    equipmentSizeCode: string;
//    equipmentTypeCode: string;
//    equipmentTypeName: string;
//    equipmentTypeId: number;
//    equipmentStatusCode: string;
//    equipmentStatusName: string;
//    equipmentStatusId: number;
//    originLocationCode: string;
//    originLocationName: string;
//    destinationLocationCode: string;
//    originLocationId: number;
//    destinationLocationId: number;
//    destinationLocationName: string;
//    productCode: string;
//    productName: string;
//    dispatchingPartyCode: string;
//    equipmentNumber: string;
//    chassisNumber: string;
//    shipmentID: string;
//    approvedBy: string;
//    serviceStartDate: string;
//    serviceFinishDate: string;
//    amigoTenantTUserId: number;
//    userName: string;
//    chargeType: string;
//    serviceId: number;
//    productId: number;
//    hasH34: boolean;
//    serviceStatus: boolean;
//    acknowledgeBy: string;
//    payBy: string;
//    equipmentSizeId: number;
//    dispatchingPartyId: number;
//    equipmentTestDate25Year: Date;
//    equipmentTestDate5Year: Date;
//    authorizationCode: string;
//    activityCode: string;
//    serviceTypeCode: string;
//    chargeNo: string;
//    driverComments: string;
//    serviceStartDateLocal: Date;
//    approvalComments: string;
//    createdBy: number;
//    creationDate: Date;
//    updatedBy: number;
//    updatedDate: Date;
//    private _localServiceStartDate: Date;
//    private _localServiceFinishDate: Date;

//    public get localServiceStartDate(): Date {
//        return this._localServiceStartDate;
//    };

//    public set localServiceStartDate(date: Date) {
//        this.serviceStartDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//    };

//    public get localServiceFinishDate(): Date {
//        return this._localServiceFinishDate;
//    };
//    public set localServiceFinishDate(date: Date) {
//        this.serviceFinishDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//    };

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.serviceName = data["ServiceName"] !== undefined ? data["ServiceName"] : null;
//            this.isSelected = data["IsSelected"] !== undefined ? data["IsSelected"] : null;
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.costCenterCode = data["CostCenterCode"] !== undefined ? data["CostCenterCode"] : null;
//            this.chargeNoType = data["ChargeNoType"] !== undefined ? data["ChargeNoType"] : null;
//            this.serviceCode = data["ServiceCode"] !== undefined ? data["ServiceCode"] : null;
//            this.equipmentSizeCode = data["EquipmentSizeCode"] !== undefined ? data["EquipmentSizeCode"] : null;
//            this.equipmentTypeCode = data["EquipmentTypeCode"] !== undefined ? data["EquipmentTypeCode"] : null;
//            this.equipmentTypeName = data["EquipmentTypeName"] !== undefined ? data["EquipmentTypeName"] : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.equipmentStatusCode = data["EquipmentStatusCode"] !== undefined ? data["EquipmentStatusCode"] : null;
//            this.equipmentStatusName = data["EquipmentStatusName"] !== undefined ? data["EquipmentStatusName"] : null;
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.originLocationCode = data["OriginLocationCode"] !== undefined ? data["OriginLocationCode"] : null;
//            this.originLocationName = data["OriginLocationName"] !== undefined ? data["OriginLocationName"] : null;
//            this.destinationLocationCode = data["DestinationLocationCode"] !== undefined ? data["DestinationLocationCode"] : null;
//            this.originLocationId = data["OriginLocationId"] !== undefined ? data["OriginLocationId"] : null;
//            this.destinationLocationId = data["DestinationLocationId"] !== undefined ? data["DestinationLocationId"] : null;
//            this.destinationLocationName = data["DestinationLocationName"] !== undefined ? data["DestinationLocationName"] : null;
//            this.productCode = data["ProductCode"] !== undefined ? data["ProductCode"] : null;
//            this.productName = data["ProductName"] !== undefined ? data["ProductName"] : null;
//            this.dispatchingPartyCode = data["DispatchingPartyCode"] !== undefined ? data["DispatchingPartyCode"] : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.chassisNumber = data["ChassisNumber"] !== undefined ? data["ChassisNumber"] : null;
//            this.shipmentID = data["ShipmentID"] !== undefined ? data["ShipmentID"] : null;
//            this.approvedBy = data["ApprovedBy"] !== undefined ? data["ApprovedBy"] : null;
//            this.serviceStartDate = data["ServiceStartDate"] ? data["ServiceStartDate"] : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? data["ServiceFinishDate"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.serviceId = data["ServiceId"] !== undefined ? data["ServiceId"] : null;
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.hasH34 = data["HasH34"] !== undefined ? data["HasH34"] : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.acknowledgeBy = data["AcknowledgeBy"] !== undefined ? data["AcknowledgeBy"] : null;
//            this.payBy = data["PayBy"] !== undefined ? data["PayBy"] : null;
//            this.equipmentSizeId = data["EquipmentSizeId"] !== undefined ? data["EquipmentSizeId"] : null;
//            this.dispatchingPartyId = data["DispatchingPartyId"] !== undefined ? data["DispatchingPartyId"] : null;
//            this.equipmentTestDate25Year = data["EquipmentTestDate25Year"] ? new Date(data["EquipmentTestDate25Year"].toString()) : null;
//            this.equipmentTestDate5Year = data["EquipmentTestDate5Year"] ? new Date(data["EquipmentTestDate5Year"].toString()) : null;
//            this.authorizationCode = data["AuthorizationCode"] !== undefined ? data["AuthorizationCode"] : null;
//            this.activityCode = data["ActivityCode"] !== undefined ? data["ActivityCode"] : null;
//            this.serviceTypeCode = data["ServiceTypeCode"] !== undefined ? data["ServiceTypeCode"] : null;
//            this.chargeNo = data["ChargeNo"] !== undefined ? data["ChargeNo"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.serviceStartDateLocal = data["ServiceStartDateLocal"] ? new Date(data["ServiceStartDateLocal"].toString()) : null;
//            this.approvalComments = data["ApprovalComments"] !== undefined ? data["ApprovalComments"] : null;
//            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
//            this.creationDate = data["CreationDate"] !== undefined ? data["CreationDate"] : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] !== undefined ? data["UpdatedDate"] : null;

//            this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//            this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//        }
//    }

//    static fromJS(data: any): AmigoTenantTServiceReportDTO {
//        return new AmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ServiceName"] = this.serviceName !== undefined ? this.serviceName : null;
//        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : null;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["CostCenterCode"] = this.costCenterCode !== undefined ? this.costCenterCode : null;
//        data["ChargeNoType"] = this.chargeNoType !== undefined ? this.chargeNoType : null;
//        data["ServiceCode"] = this.serviceCode !== undefined ? this.serviceCode : null;
//        data["EquipmentSizeCode"] = this.equipmentSizeCode !== undefined ? this.equipmentSizeCode : null;
//        data["EquipmentTypeCode"] = this.equipmentTypeCode !== undefined ? this.equipmentTypeCode : null;
//        data["EquipmentTypeName"] = this.equipmentTypeName !== undefined ? this.equipmentTypeName : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["EquipmentStatusCode"] = this.equipmentStatusCode !== undefined ? this.equipmentStatusCode : null;
//        data["EquipmentStatusName"] = this.equipmentStatusName !== undefined ? this.equipmentStatusName : null;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["OriginLocationCode"] = this.originLocationCode !== undefined ? this.originLocationCode : null;
//        data["OriginLocationName"] = this.originLocationName !== undefined ? this.originLocationName : null;
//        data["DestinationLocationCode"] = this.destinationLocationCode !== undefined ? this.destinationLocationCode : null;
//        data["OriginLocationId"] = this.originLocationId !== undefined ? this.originLocationId : null;
//        data["DestinationLocationId"] = this.destinationLocationId !== undefined ? this.destinationLocationId : null;
//        data["DestinationLocationName"] = this.destinationLocationName !== undefined ? this.destinationLocationName : null;
//        data["ProductCode"] = this.productCode !== undefined ? this.productCode : null;
//        data["ProductName"] = this.productName !== undefined ? this.productName : null;
//        data["DispatchingPartyCode"] = this.dispatchingPartyCode !== undefined ? this.dispatchingPartyCode : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["ChassisNumber"] = this.chassisNumber !== undefined ? this.chassisNumber : null;
//        data["ShipmentID"] = this.shipmentID !== undefined ? this.shipmentID : null;
//        data["ApprovedBy"] = this.approvedBy !== undefined ? this.approvedBy : null;
//        data["ServiceStartDate"] = this.serviceStartDate ? this.serviceStartDate : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["UserName"] = this.userName !== undefined ? this.userName : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["ServiceId"] = this.serviceId !== undefined ? this.serviceId : null;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["HasH34"] = this.hasH34 !== undefined ? this.hasH34 : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["AcknowledgeBy"] = this.acknowledgeBy !== undefined ? this.acknowledgeBy : null;
//        data["PayBy"] = this.payBy !== undefined ? this.payBy : null;
//        data["EquipmentSizeId"] = this.equipmentSizeId !== undefined ? this.equipmentSizeId : null;
//        data["DispatchingPartyId"] = this.dispatchingPartyId !== undefined ? this.dispatchingPartyId : null;
//        data["EquipmentTestDate25Year"] = this.equipmentTestDate25Year ? this.equipmentTestDate25Year.toISOString() : null;
//        data["EquipmentTestDate5Year"] = this.equipmentTestDate5Year ? this.equipmentTestDate5Year.toISOString() : null;
//        data["AuthorizationCode"] = this.authorizationCode !== undefined ? this.authorizationCode : null;
//        data["ActivityCode"] = this.activityCode !== undefined ? this.activityCode : null;
//        data["ServiceTypeCode"] = this.serviceTypeCode !== undefined ? this.serviceTypeCode : null;
//        data["ChargeNo"] = this.chargeNo !== undefined ? this.chargeNo : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ServiceStartDateLocal"] = this.serviceStartDateLocal ? this.serviceStartDateLocal.toISOString() : null;
//        data["ApprovalComments"] = this.approvalComments !== undefined ? this.approvalComments : null;
//        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
//        data["CreationDate"] = this.creationDate !== undefined ? this.creationDate : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate !== undefined ? this.updatedDate : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

//export class ResponseDTOOfAmigoTenantTServiceReportDTO {
//    data: AmigoTenantTServiceReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? AmigoTenantTServiceReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfAmigoTenantTServiceReportDTO {
//        return new ResponseDTOOfAmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfAmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

export class AmigoTenantTServiceApproveSearchRequest {
    serviceDate: Date;
    reportDateFrom: Date;
    reportDateTo: Date;
    paidBy: string;
    driverId: number;
    username: string;
    serviceStatusId: number;
    approvedBy: string;
    approvalComments: string;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.serviceDate = data["ServiceDate"] ? new Date(data["ServiceDate"].toString()) : null;
            this.reportDateFrom = data["ReportDateFrom"] ? new Date(data["ReportDateFrom"].toString()) : null;
            this.reportDateTo = data["ReportDateTo"] ? new Date(data["ReportDateTo"].toString()) : null;
            this.paidBy = data["PaidBy"] !== undefined ? data["PaidBy"] : null;
            this.driverId = data["DriverId"] !== undefined ? data["DriverId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
            this.serviceStatusId = data["ServiceStatusId"] !== undefined ? data["ServiceStatusId"] : null;
            this.approvedBy = data["ApprovedBy"] !== undefined ? data["ApprovedBy"] : null;
            this.approvalComments = data["ApprovalComments"] !== undefined ? data["ApprovalComments"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTServiceApproveSearchRequest {
        return new AmigoTenantTServiceApproveSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ServiceDate"] = this.serviceDate ? this.serviceDate.toISOString() : null;
        data["ReportDateTo"] = this.reportDateTo ? this.reportDateTo.toISOString() : null;
        data["ReportDateFrom"] = this.reportDateFrom ? this.reportDateFrom.toISOString() : null;
        data["PaidBy"] = this.paidBy !== undefined ? this.paidBy : null;
        data["DriverId"] = this.driverId !== undefined ? this.driverId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        data["ServiceStatusId"] = this.serviceStatusId !== undefined ? this.serviceStatusId : null;
        data["ApprovedBy"] = this.approvedBy !== undefined ? this.approvedBy : null;
        data["ApprovalComments"] = this.approvalComments !== undefined ? this.approvalComments : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTServiceApproveSearchRequest(JSON.parse(json));
    }
}

//export class ResponseDTOOfPagedListServicesOfAmigoTenantTServiceReportDTO {
//    data: PagedListServicesOfAmigoTenantTServiceReportDTO;
//    isValid: boolean;
//    messages: ApplicationMessage[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.data = data["Data"] ? PagedListServicesOfAmigoTenantTServiceReportDTO.fromJS(data["Data"]) : null;
//            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
//            if (data["Messages"] && data["Messages"].constructor === Array) {
//                this.messages = [];
//                for (let item of data["Messages"])
//                    this.messages.push(ApplicationMessage.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): ResponseDTOOfPagedListServicesOfAmigoTenantTServiceReportDTO {
//        return new ResponseDTOOfPagedListServicesOfAmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Data"] = this.data ? this.data.toJS() : null;
//        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
//        if (this.messages && this.messages.constructor === Array) {
//            data["Messages"] = [];
//            for (let item of this.messages)
//                data["Messages"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ResponseDTOOfPagedListServicesOfAmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

//export class PagedListServicesOfAmigoTenantTServiceReportDTO {
//    page: number;
//    totalApproved: number;
//    totalRejected: number;
//    totalPending: number;
//    total: number;
//    pageSize: number;
//    items: AmigoTenantTServiceReportDTO[];

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.totalApproved = data["TotalApproved"] !== undefined ? data["TotalApproved"] : null;
//            this.totalRejected = data["TotalRejected"] !== undefined ? data["TotalRejected"] : null;
//            this.totalPending = data["TotalPending"] !== undefined ? data["TotalPending"] : null;
//            this.total = data["Total"] !== undefined ? data["Total"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//            if (data["Items"] && data["Items"].constructor === Array) {
//                this.items = [];
//                for (let item of data["Items"])
//                    this.items.push(AmigoTenantTServiceReportDTO.fromJS(item));
//            }
//        }
//    }

//    static fromJS(data: any): PagedListServicesOfAmigoTenantTServiceReportDTO {
//        return new PagedListServicesOfAmigoTenantTServiceReportDTO(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["TotalApproved"] = this.totalApproved !== undefined ? this.totalApproved : null;
//        data["TotalRejected"] = this.totalRejected !== undefined ? this.totalRejected : null;
//        data["TotalPending"] = this.totalPending !== undefined ? this.totalPending : null;
//        data["Total"] = this.total !== undefined ? this.total : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        if (this.items && this.items.constructor === Array) {
//            data["Items"] = [];
//            for (let item of this.items)
//                data["Items"].push(item.toJS());
//        }
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new PagedListServicesOfAmigoTenantTServiceReportDTO(JSON.parse(json));
//    }
//}

//export class AmigoTenantTServiceSearchChargeNumRequest {
//    chargeNumber: string;
//    page: number;
//    pageSize: number;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.chargeNumber = data["ChargeNumber"] !== undefined ? data["ChargeNumber"] : null;
//            this.page = data["Page"] !== undefined ? data["Page"] : null;
//            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
//        }
//    }

//    static fromJS(data: any): AmigoTenantTServiceSearchChargeNumRequest {
//        return new AmigoTenantTServiceSearchChargeNumRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["ChargeNumber"] = this.chargeNumber !== undefined ? this.chargeNumber : null;
//        data["Page"] = this.page !== undefined ? this.page : null;
//        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTServiceSearchChargeNumRequest(JSON.parse(json));
//    }
//}

//export class AmigoTenantTServiceRequest {
//    amigoTenantTServiceId: number;
//    serviceOrderNo: string;
//    serviceStartDate: string;
//    serviceStartDateTZ: string;
//    serviceFinishDate: string;
//    serviceFinishDateTZ: string;
//    serviceStartDateUTC: Date;
//    serviceFinishDateUTC: Date;
//    equipmentNumber: string;
//    equipmentTestDate25Year: Date;
//    equipmentTestDate5Year: Date;
//    chassisNumber: string;
//    chargeType: string;
//    shipmentID: string;
//    authorizationCode: string;
//    hasH34: boolean;
//    detentionInMinutesReal: number;
//    detentionInMinutesRounded: number;
//    acknowledgeBy: string;
//    serviceAcknowledgeDate: Date;
//    serviceAcknowledgeDateTZ: string;
//    serviceAcknowledgeDateUTC: Date;
//    isAknowledged: boolean;
//    approvedBy: string;
//    approvalDate: Date;
//    serviceStatus: boolean;
//    approvalModified: string;
//    originLocationId: number;
//    destinationLocationId: number;
//    dispatchingPartyId: number;
//    equipmentSizeId: number;
//    equipmentTypeId: number;
//    equipmentStatusId: number;
//    productId: number;
//    productDescription: string;
//    serviceId: number;
//    amigoTenantTUserId: number;
//    rowStatus: boolean;
//    updatedBy: number;
//    updatedDate: Date;
//    costCenterCode: string;
//    serviceStartDateLocal: Date;
//    username: string;
//    driverComments: string;
//    approvalComments: string;
//    private _localServiceStartDate: Date;
//    private _localServiceFinishDate: Date;

//    public get localServiceStartDate(): Date {
//        return this._localServiceStartDate;
//    };

//    public set localServiceStartDate(date: Date) {
//        this.serviceStartDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//    };

//    public get localServiceFinishDate(): Date {
//        return this._localServiceFinishDate;
//    };
//    public set localServiceFinishDate(date: Date) {
//        this.serviceFinishDate = AmigoTenantOffsetBase.parse(date);
//        this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//    };
//    entityStatus: AmigoTenantTServiceRequestEntityStatus;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.serviceOrderNo = data["ServiceOrderNo"] !== undefined ? data["ServiceOrderNo"] : null;
//            this.serviceStartDate = data["ServiceStartDate"] ? data["ServiceStartDate"] : null;
//            this.serviceStartDateTZ = data["ServiceStartDateTZ"] !== undefined ? data["ServiceStartDateTZ"] : null;
//            this.serviceFinishDate = data["ServiceFinishDate"] ? data["ServiceFinishDate"] : null;
//            this.serviceFinishDateTZ = data["ServiceFinishDateTZ"] !== undefined ? data["ServiceFinishDateTZ"] : null;
//            this.serviceStartDateUTC = data["ServiceStartDateUTC"] ? new Date(data["ServiceStartDateUTC"].toString()) : null;
//            this.serviceFinishDateUTC = data["ServiceFinishDateUTC"] ? new Date(data["ServiceFinishDateUTC"].toString()) : null;
//            this.equipmentNumber = data["EquipmentNumber"] !== undefined ? data["EquipmentNumber"] : null;
//            this.equipmentTestDate25Year = data["EquipmentTestDate25Year"] ? new Date(data["EquipmentTestDate25Year"].toString()) : null;
//            this.equipmentTestDate5Year = data["EquipmentTestDate5Year"] ? new Date(data["EquipmentTestDate5Year"].toString()) : null;
//            this.chassisNumber = data["ChassisNumber"] !== undefined ? data["ChassisNumber"] : null;
//            this.chargeType = data["ChargeType"] !== undefined ? data["ChargeType"] : null;
//            this.shipmentID = data["ShipmentID"] !== undefined ? data["ShipmentID"] : null;
//            this.authorizationCode = data["AuthorizationCode"] !== undefined ? data["AuthorizationCode"] : null;
//            this.hasH34 = data["HasH34"] !== undefined ? data["HasH34"] : null;
//            this.detentionInMinutesReal = data["DetentionInMinutesReal"] !== undefined ? data["DetentionInMinutesReal"] : null;
//            this.detentionInMinutesRounded = data["DetentionInMinutesRounded"] !== undefined ? data["DetentionInMinutesRounded"] : null;
//            this.acknowledgeBy = data["AcknowledgeBy"] !== undefined ? data["AcknowledgeBy"] : null;
//            this.serviceAcknowledgeDate = data["ServiceAcknowledgeDate"] ? new Date(data["ServiceAcknowledgeDate"].toString()) : null;
//            this.serviceAcknowledgeDateTZ = data["ServiceAcknowledgeDateTZ"] !== undefined ? data["ServiceAcknowledgeDateTZ"] : null;
//            this.serviceAcknowledgeDateUTC = data["ServiceAcknowledgeDateUTC"] ? new Date(data["ServiceAcknowledgeDateUTC"].toString()) : null;
//            this.isAknowledged = data["IsAknowledged"] !== undefined ? data["IsAknowledged"] : null;
//            this.approvedBy = data["ApprovedBy"] !== undefined ? data["ApprovedBy"] : null;
//            this.approvalDate = data["ApprovalDate"] ? new Date(data["ApprovalDate"].toString()) : null;
//            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
//            this.approvalModified = data["ApprovalModified"] !== undefined ? data["ApprovalModified"] : null;
//            this.originLocationId = data["OriginLocationId"] !== undefined ? data["OriginLocationId"] : null;
//            this.destinationLocationId = data["DestinationLocationId"] !== undefined ? data["DestinationLocationId"] : null;
//            this.dispatchingPartyId = data["DispatchingPartyId"] !== undefined ? data["DispatchingPartyId"] : null;
//            this.equipmentSizeId = data["EquipmentSizeId"] !== undefined ? data["EquipmentSizeId"] : null;
//            this.equipmentTypeId = data["EquipmentTypeId"] !== undefined ? data["EquipmentTypeId"] : null;
//            this.equipmentStatusId = data["EquipmentStatusId"] !== undefined ? data["EquipmentStatusId"] : null;
//            this.productId = data["ProductId"] !== undefined ? data["ProductId"] : null;
//            this.productDescription = data["ProductDescription"] !== undefined ? data["ProductDescription"] : null;
//            this.serviceId = data["ServiceId"] !== undefined ? data["ServiceId"] : null;
//            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
//            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            this.costCenterCode = data["CostCenterCode"] !== undefined ? data["CostCenterCode"] : null;
//            this.serviceStartDateLocal = data["ServiceStartDateLocal"] ? new Date(data["ServiceStartDateLocal"].toString()) : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//            this.driverComments = data["DriverComments"] !== undefined ? data["DriverComments"] : null;
//            this.approvalComments = data["ApprovalComments"] !== undefined ? data["ApprovalComments"] : null;
//            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;

//            this._localServiceStartDate = AmigoTenantOffsetBase.format(this.serviceStartDate);
//            this._localServiceFinishDate = AmigoTenantOffsetBase.format(this.serviceFinishDate);
//        }
//    }

//    static fromJS(data: any): AmigoTenantTServiceRequest {
//        return new AmigoTenantTServiceRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["ServiceOrderNo"] = this.serviceOrderNo !== undefined ? this.serviceOrderNo : null;
//        data["ServiceStartDate"] = this.serviceStartDate ? this.serviceStartDate : null;
//        data["ServiceStartDateTZ"] = this.serviceStartDateTZ !== undefined ? this.serviceStartDateTZ : null;
//        data["ServiceFinishDate"] = this.serviceFinishDate ? this.serviceFinishDate : null;
//        data["ServiceFinishDateTZ"] = this.serviceFinishDateTZ !== undefined ? this.serviceFinishDateTZ : null;
//        data["ServiceStartDateUTC"] = this.serviceStartDateUTC ? this.serviceStartDateUTC.toISOString() : null;
//        data["ServiceFinishDateUTC"] = this.serviceFinishDateUTC ? this.serviceFinishDateUTC.toISOString() : null;
//        data["EquipmentNumber"] = this.equipmentNumber !== undefined ? this.equipmentNumber : null;
//        data["EquipmentTestDate25Year"] = this.equipmentTestDate25Year ? this.equipmentTestDate25Year.toISOString() : null;
//        data["EquipmentTestDate5Year"] = this.equipmentTestDate5Year ? this.equipmentTestDate5Year.toISOString() : null;
//        data["ChassisNumber"] = this.chassisNumber !== undefined ? this.chassisNumber : null;
//        data["ChargeType"] = this.chargeType !== undefined ? this.chargeType : null;
//        data["ShipmentID"] = this.shipmentID !== undefined ? this.shipmentID : null;
//        data["AuthorizationCode"] = this.authorizationCode !== undefined ? this.authorizationCode : null;
//        data["HasH34"] = this.hasH34 !== undefined ? this.hasH34 : null;
//        data["DetentionInMinutesReal"] = this.detentionInMinutesReal !== undefined ? this.detentionInMinutesReal : null;
//        data["DetentionInMinutesRounded"] = this.detentionInMinutesRounded !== undefined ? this.detentionInMinutesRounded : null;
//        data["AcknowledgeBy"] = this.acknowledgeBy !== undefined ? this.acknowledgeBy : null;
//        data["ServiceAcknowledgeDate"] = this.serviceAcknowledgeDate ? this.serviceAcknowledgeDate.toISOString() : null;
//        data["ServiceAcknowledgeDateTZ"] = this.serviceAcknowledgeDateTZ !== undefined ? this.serviceAcknowledgeDateTZ : null;
//        data["ServiceAcknowledgeDateUTC"] = this.serviceAcknowledgeDateUTC ? this.serviceAcknowledgeDateUTC.toISOString() : null;
//        data["IsAknowledged"] = this.isAknowledged !== undefined ? this.isAknowledged : null;
//        data["ApprovedBy"] = this.approvedBy !== undefined ? this.approvedBy : null;
//        data["ApprovalDate"] = this.approvalDate ? this.approvalDate.toISOString() : null;
//        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
//        data["ApprovalModified"] = this.approvalModified !== undefined ? this.approvalModified : null;
//        data["OriginLocationId"] = this.originLocationId !== undefined ? this.originLocationId : null;
//        data["DestinationLocationId"] = this.destinationLocationId !== undefined ? this.destinationLocationId : null;
//        data["DispatchingPartyId"] = this.dispatchingPartyId !== undefined ? this.dispatchingPartyId : null;
//        data["EquipmentSizeId"] = this.equipmentSizeId !== undefined ? this.equipmentSizeId : null;
//        data["EquipmentTypeId"] = this.equipmentTypeId !== undefined ? this.equipmentTypeId : null;
//        data["EquipmentStatusId"] = this.equipmentStatusId !== undefined ? this.equipmentStatusId : null;
//        data["ProductId"] = this.productId !== undefined ? this.productId : null;
//        data["ProductDescription"] = this.productDescription !== undefined ? this.productDescription : null;
//        data["ServiceId"] = this.serviceId !== undefined ? this.serviceId : null;
//        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
//        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        data["CostCenterCode"] = this.costCenterCode !== undefined ? this.costCenterCode : null;
//        data["ServiceStartDateLocal"] = this.serviceStartDateLocal ? this.serviceStartDateLocal.toISOString() : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        data["DriverComments"] = this.driverComments !== undefined ? this.driverComments : null;
//        data["ApprovalComments"] = this.approvalComments !== undefined ? this.approvalComments : null;
//        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new AmigoTenantTServiceRequest(JSON.parse(json));
//    }
//}

export class AmigoTenantTServiceApproveRequest {
    reportDate: Date;
    driverId: number;
    currentTime: Date;
    approvedBy: string;
    amigoTenantTServiceIdsListStatus: AmigoTenantTServiceStatus[];
    approvalComments: string;
    driverName: string;
    userId: number;
    username: string;
    fromDate: Date;
    toDate: Date;
    isApprove: boolean;
    moveOrHour: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.reportDate = data["ReportDate"] ? new Date(data["ReportDate"].toString()) : null;
            this.driverId = data["DriverId"] !== undefined ? data["DriverId"] : null;
            this.currentTime = data["CurrentTime"] ? new Date(data["CurrentTime"].toString()) : null;
            this.approvedBy = data["ApprovedBy"] !== undefined ? data["ApprovedBy"] : null;
            if (data["AmigoTenantTServiceIdsListStatus"] && data["AmigoTenantTServiceIdsListStatus"].constructor === Array) {
                this.amigoTenantTServiceIdsListStatus = [];
                for (let item of data["AmigoTenantTServiceIdsListStatus"])
                    this.amigoTenantTServiceIdsListStatus.push(AmigoTenantTServiceStatus.fromJS(item));
            }
            this.approvalComments = data["ApprovalComments"] !== undefined ? data["ApprovalComments"] : null;
            this.driverName = data["DriverName"] !== undefined ? data["DriverName"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
            this.fromDate = data["FromDate"] ? new Date(data["FromDate"].toString()) : null;
            this.toDate = data["toDate"] ? new Date(data["toDate"].toString()) : null;
            this.isApprove = data["isApprove"] !== undefined ? data["isApprove"] : null;
            this.moveOrHour = data["moveOrHour"] !== undefined ? data["moveOrHour"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTServiceApproveRequest {
        return new AmigoTenantTServiceApproveRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["ReportDate"] = this.reportDate ? this.reportDate.toISOString() : null;
        data["DriverId"] = this.driverId !== undefined ? this.driverId : null;
        data["CurrentTime"] = this.currentTime ? this.currentTime.toISOString() : null;
        data["ApprovedBy"] = this.approvedBy !== undefined ? this.approvedBy : null;
        if (this.amigoTenantTServiceIdsListStatus && this.amigoTenantTServiceIdsListStatus.constructor === Array) {
            data["AmigoTenantTServiceIdsListStatus"] = [];
            for (let item of this.amigoTenantTServiceIdsListStatus)
                data["AmigoTenantTServiceIdsListStatus"].push(item.toJS());
        }
        data["ApprovalComments"] = this.approvalComments !== undefined ? this.approvalComments : null;
        data["DriverName"] = this.driverName !== undefined ? this.driverName : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        data["FromDate"] = this.fromDate ? this.fromDate.toISOString() : null;
        data["ToDate"] = this.toDate ? this.toDate.toISOString() : null;
        data["IsApprove"] = this.isApprove !== undefined ? this.isApprove : null;
        data["moveOrHour"] = this.moveOrHour !== undefined ? this.moveOrHour : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTServiceApproveRequest(JSON.parse(json));
    }
}

export class AmigoTenantTServiceStatus {
    amigoTenantTServiceId: string;
    serviceStatus: boolean;
    driverId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
            this.serviceStatus = data["ServiceStatus"] !== undefined ? data["ServiceStatus"] : null;
            this.driverId = data["DriverId"] !== undefined ? data["DriverId"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTServiceStatus {
        return new AmigoTenantTServiceStatus(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
        data["ServiceStatus"] = this.serviceStatus !== undefined ? this.serviceStatus : null;
        data["DriverId"] = this.driverId !== undefined ? this.driverId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTServiceStatus(JSON.parse(json));
    }
}

//export class UpdateAmigoTenantTServiceAckRequest {
//    amigoTenantTServiceId: number;
//    acknowledgeBy: string;
//    serviceAcknowledgeDate: Date;
//    serviceAcknowledgeDateTZ: string;
//    updatedBy: number;
//    updatedDate: Date;
//    serviceOrderNoList: ServiceOrderNoRequest[];
//    includeRequestLog: boolean;
//    activityTypeId: number;
//    isAutoDateTime: boolean;
//    isSpoofingGPS: boolean;
//    isRootedJailbreaked: boolean;
//    platform: string;
//    oSVersion: string;
//    appVersion: string;
//    latitude: number;
//    longitude: number;
//    accuracy: number;
//    locationProvider: string;
//    reportedActivityDate: Date;
//    reportedActivityTimeZone: string;
//    userId: number;
//    username: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.acknowledgeBy = data["AcknowledgeBy"] !== undefined ? data["AcknowledgeBy"] : null;
//            this.serviceAcknowledgeDate = data["ServiceAcknowledgeDate"] ? new Date(data["ServiceAcknowledgeDate"].toString()) : null;
//            this.serviceAcknowledgeDateTZ = data["ServiceAcknowledgeDateTZ"] !== undefined ? data["ServiceAcknowledgeDateTZ"] : null;
//            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
//            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
//            if (data["ServiceOrderNoList"] && data["ServiceOrderNoList"].constructor === Array) {
//                this.serviceOrderNoList = [];
//                for (let item of data["ServiceOrderNoList"])
//                    this.serviceOrderNoList.push(ServiceOrderNoRequest.fromJS(item));
//            }
//            this.includeRequestLog = data["IncludeRequestLog"] !== undefined ? data["IncludeRequestLog"] : null;
//            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
//            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
//            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
//            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
//            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
//            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
//            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
//            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
//            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
//            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
//            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
//            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
//            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
//            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
//            this.username = data["Username"] !== undefined ? data["Username"] : null;
//        }
//    }

//    static fromJS(data: any): UpdateAmigoTenantTServiceAckRequest {
//        return new UpdateAmigoTenantTServiceAckRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["AcknowledgeBy"] = this.acknowledgeBy !== undefined ? this.acknowledgeBy : null;
//        data["ServiceAcknowledgeDate"] = this.serviceAcknowledgeDate ? this.serviceAcknowledgeDate.toISOString() : null;
//        data["ServiceAcknowledgeDateTZ"] = this.serviceAcknowledgeDateTZ !== undefined ? this.serviceAcknowledgeDateTZ : null;
//        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
//        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
//        if (this.serviceOrderNoList && this.serviceOrderNoList.constructor === Array) {
//            data["ServiceOrderNoList"] = [];
//            for (let item of this.serviceOrderNoList)
//                data["ServiceOrderNoList"].push(item.toJS());
//        }
//        data["IncludeRequestLog"] = this.includeRequestLog !== undefined ? this.includeRequestLog : null;
//        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
//        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
//        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
//        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
//        data["Platform"] = this.platform !== undefined ? this.platform : null;
//        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
//        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
//        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
//        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
//        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
//        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
//        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
//        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
//        data["UserId"] = this.userId !== undefined ? this.userId : null;
//        data["Username"] = this.username !== undefined ? this.username : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new UpdateAmigoTenantTServiceAckRequest(JSON.parse(json));
//    }
//}

//export class ServiceOrderNoRequest {
//    amigoTenantTServiceId: number;
//    serviceOrderNo: string;

//    constructor(data?: any) {
//        if (data !== undefined) {
//            this.amigoTenantTServiceId = data["AmigoTenantTServiceId"] !== undefined ? data["AmigoTenantTServiceId"] : null;
//            this.serviceOrderNo = data["ServiceOrderNo"] !== undefined ? data["ServiceOrderNo"] : null;
//        }
//    }

//    static fromJS(data: any): ServiceOrderNoRequest {
//        return new ServiceOrderNoRequest(data);
//    }

//    toJS(data?: any) {
//        data = data === undefined ? {} : data;
//        data["AmigoTenantTServiceId"] = this.amigoTenantTServiceId !== undefined ? this.amigoTenantTServiceId : null;
//        data["ServiceOrderNo"] = this.serviceOrderNo !== undefined ? this.serviceOrderNo : null;
//        return data;
//    }

//    toJSON() {
//        return JSON.stringify(this.toJS());
//    }

//    clone() {
//        const json = this.toJSON();
//        return new ServiceOrderNoRequest(JSON.parse(json));
//    }
//}

export class UserSearchRequest {
    amigoTenantTUserId: number;
    userName: string;
    firstName: string;
    lastName: string;
    dedicatedLocationId: number;
    userType: string;
    amigoTenantTRoleId: number;
    payBy: string;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.dedicatedLocationId = data["DedicatedLocationId"] !== undefined ? data["DedicatedLocationId"] : null;
            this.userType = data["UserType"] !== undefined ? data["UserType"] : null;
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.payBy = data["PayBy"] !== undefined ? data["PayBy"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): UserSearchRequest {
        return new UserSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["DedicatedLocationId"] = this.dedicatedLocationId !== undefined ? this.dedicatedLocationId : null;
        data["UserType"] = this.userType !== undefined ? this.userType : null;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["PayBy"] = this.payBy !== undefined ? this.payBy : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfAmigoTenantTUserDTO {
    data: PagedListOfAmigoTenantTUserDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfAmigoTenantTUserDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfAmigoTenantTUserDTO {
        return new ResponseDTOOfPagedListOfAmigoTenantTUserDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfAmigoTenantTUserDTO(JSON.parse(json));
    }
}

export class PagedListOfAmigoTenantTUserDTO {
    page: number;
    total: number;
    pageSize: number;
    items: AmigoTenantTUserDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(AmigoTenantTUserDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfAmigoTenantTUserDTO {
        return new PagedListOfAmigoTenantTUserDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfAmigoTenantTUserDTO(JSON.parse(json));
    }
}

export class AmigoTenantTUserDTO {
    amigoTenantTUserId: number;
    username: string;
    payBy: string;
    userType: string;
    dedicatedLocationId: number;
    bypassDeviceValidation: boolean;
    unitNumber: string;
    tractorNumber: string;
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    id: number;
    phoneNumber: string;
    amigoTenantTRoleName: string;
    locationName: string;
    amigoTenantTRoleId: number;
    userTypeName: string;
    payByName: string;
    customUsername: string;
    deviceId: number;
    cellphoneNumber: string;
    isAdmin: boolean;
    isAdminModifiedUser: boolean;
    createdBy: number;
    creationDate: Date;
    updatedBy: number;
    updatedDate: Date;
    rowStatus: boolean;
    entityStatus: AmigoTenantTUserDTOEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
            this.payBy = data["PayBy"] !== undefined ? data["PayBy"] : null;
            this.userType = data["UserType"] !== undefined ? data["UserType"] : null;
            this.dedicatedLocationId = data["DedicatedLocationId"] !== undefined ? data["DedicatedLocationId"] : null;
            this.bypassDeviceValidation = data["BypassDeviceValidation"] !== undefined ? data["BypassDeviceValidation"] : null;
            this.unitNumber = data["UnitNumber"] !== undefined ? data["UnitNumber"] : null;
            this.tractorNumber = data["TractorNumber"] !== undefined ? data["TractorNumber"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.email = data["Email"] !== undefined ? data["Email"] : null;
            this.password = data["Password"] !== undefined ? data["Password"] : null;
            this.id = data["Id"] !== undefined ? data["Id"] : null;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : null;
            this.amigoTenantTRoleName = data["AmigoTenantTRoleName"] !== undefined ? data["AmigoTenantTRoleName"] : null;
            this.locationName = data["LocationName"] !== undefined ? data["LocationName"] : null;
            this.amigoTenantTRoleId = data["AmigoTenantTRoleId"] !== undefined ? data["AmigoTenantTRoleId"] : null;
            this.userTypeName = data["UserTypeName"] !== undefined ? data["UserTypeName"] : null;
            this.payByName = data["PayByName"] !== undefined ? data["PayByName"] : null;
            this.customUsername = data["CustomUsername"] !== undefined ? data["CustomUsername"] : null;
            this.deviceId = data["DeviceId"] !== undefined ? data["DeviceId"] : null;
            this.cellphoneNumber = data["CellphoneNumber"] !== undefined ? data["CellphoneNumber"] : null;
            this.isAdmin = data["IsAdmin"] !== undefined ? data["IsAdmin"] : null;
            this.isAdminModifiedUser = data["IsAdminModifiedUser"] !== undefined ? data["IsAdminModifiedUser"] : null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTUserDTO {
        return new AmigoTenantTUserDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        data["PayBy"] = this.payBy !== undefined ? this.payBy : null;
        data["UserType"] = this.userType !== undefined ? this.userType : null;
        data["DedicatedLocationId"] = this.dedicatedLocationId !== undefined ? this.dedicatedLocationId : null;
        data["BypassDeviceValidation"] = this.bypassDeviceValidation !== undefined ? this.bypassDeviceValidation : null;
        data["UnitNumber"] = this.unitNumber !== undefined ? this.unitNumber : null;
        data["TractorNumber"] = this.tractorNumber !== undefined ? this.tractorNumber : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["Email"] = this.email !== undefined ? this.email : null;
        data["Password"] = this.password !== undefined ? this.password : null;
        data["Id"] = this.id !== undefined ? this.id : null;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["AmigoTenantTRoleName"] = this.amigoTenantTRoleName !== undefined ? this.amigoTenantTRoleName : null;
        data["LocationName"] = this.locationName !== undefined ? this.locationName : null;
        data["AmigoTenantTRoleId"] = this.amigoTenantTRoleId !== undefined ? this.amigoTenantTRoleId : null;
        data["UserTypeName"] = this.userTypeName !== undefined ? this.userTypeName : null;
        data["PayByName"] = this.payByName !== undefined ? this.payByName : null;
        data["CustomUsername"] = this.customUsername !== undefined ? this.customUsername : null;
        data["DeviceId"] = this.deviceId !== undefined ? this.deviceId : null;
        data["CellphoneNumber"] = this.cellphoneNumber !== undefined ? this.cellphoneNumber : null;
        data["IsAdmin"] = this.isAdmin !== undefined ? this.isAdmin : null;
        data["IsAdminModifiedUser"] = this.isAdminModifiedUser !== undefined ? this.isAdminModifiedUser : null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTUserDTO(JSON.parse(json));
    }
}

export class UserSearchBasicRequest {
    userName: string;
    firstName: string;
    lastName: string;
    customUsername: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.customUsername = data["CustomUsername"] !== undefined ? data["CustomUsername"] : null;
        }
    }

    static fromJS(data: any): UserSearchBasicRequest {
        return new UserSearchBasicRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["CustomUsername"] = this.customUsername !== undefined ? this.customUsername : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserSearchBasicRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfAmigoTenantTUserBasicDTO {
    data: AmigoTenantUserBasicDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(AmigoTenantUserBasicDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfAmigoTenantTUserBasicDTO {
        return new ResponseDTOOfListOfAmigoTenantTUserBasicDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfAmigoTenantTUserBasicDTO(JSON.parse(json));
    }
}

export class AmigoTenantUserBasicDTO {
    amigoTenantTUserId: number;
    username: string;
    payBy: string;
    firstName: string;
    lastName: string;
    customUsername: string;
    createdBy: number;
    creationDate: Date;
    updatedBy: number;
    updatedDate: Date;
    rowStatus: boolean;
    entityStatus: AmigoTenantTUserBasicDTOEntityStatus;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
            this.payBy = data["PayBy"] !== undefined ? data["PayBy"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.customUsername = data["CustomUsername"] !== undefined ? data["CustomUsername"] : null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.entityStatus = data["EntityStatus"] !== undefined ? data["EntityStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantUserBasicDTO {
        return new AmigoTenantUserBasicDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        data["PayBy"] = this.payBy !== undefined ? this.payBy : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["CustomUsername"] = this.customUsername !== undefined ? this.customUsername : null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["EntityStatus"] = this.entityStatus !== undefined ? this.entityStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantUserBasicDTO(JSON.parse(json));
    }
}

export class UserResponse {
    amigoTenantTUserId: number;
    firstName: string;
    lastName: string;
    userName: string;
    email: string;
    id: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
            this.firstName = data["FirstName"] !== undefined ? data["FirstName"] : null;
            this.lastName = data["LastName"] !== undefined ? data["LastName"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
            this.email = data["Email"] !== undefined ? data["Email"] : null;
            this.id = data["Id"] !== undefined ? data["Id"] : null;
        }
    }

    static fromJS(data: any): UserResponse {
        return new UserResponse(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
        data["FirstName"] = this.firstName !== undefined ? this.firstName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        data["Email"] = this.email !== undefined ? this.email : null;
        data["Id"] = this.id !== undefined ? this.id : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserResponse(JSON.parse(json));
    }
}

export class AmigoTenantTUserStatusDTO {
    amigoTenantTUserId: number;
    userName: string;
    rowStatus: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.amigoTenantTUserId = data["AmigoTenantTUserId"] !== undefined ? data["AmigoTenantTUserId"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
        }
    }

    static fromJS(data: any): AmigoTenantTUserStatusDTO {
        return new AmigoTenantTUserStatusDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["AmigoTenantTUserId"] = this.amigoTenantTUserId !== undefined ? this.amigoTenantTUserId : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTUserStatusDTO(JSON.parse(json));
    }
}

export class AuthorizationRequest {
    identifier: string;
    includeRequestLog: boolean;
    activityTypeId: number;
    isAutoDateTime: boolean;
    isSpoofingGPS: boolean;
    isRootedJailbreaked: boolean;
    platform: string;
    oSVersion: string;
    appVersion: string;
    latitude: number;
    longitude: number;
    accuracy: number;
    locationProvider: string;
    reportedActivityDate: Date;
    reportedActivityTimeZone: string;
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.identifier = data["Identifier"] !== undefined ? data["Identifier"] : null;
            this.includeRequestLog = data["IncludeRequestLog"] !== undefined ? data["IncludeRequestLog"] : null;
            this.activityTypeId = data["ActivityTypeId"] !== undefined ? data["ActivityTypeId"] : null;
            this.isAutoDateTime = data["IsAutoDateTime"] !== undefined ? data["IsAutoDateTime"] : null;
            this.isSpoofingGPS = data["IsSpoofingGPS"] !== undefined ? data["IsSpoofingGPS"] : null;
            this.isRootedJailbreaked = data["IsRootedJailbreaked"] !== undefined ? data["IsRootedJailbreaked"] : null;
            this.platform = data["Platform"] !== undefined ? data["Platform"] : null;
            this.oSVersion = data["OSVersion"] !== undefined ? data["OSVersion"] : null;
            this.appVersion = data["AppVersion"] !== undefined ? data["AppVersion"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.accuracy = data["Accuracy"] !== undefined ? data["Accuracy"] : null;
            this.locationProvider = data["LocationProvider"] !== undefined ? data["LocationProvider"] : null;
            this.reportedActivityDate = data["ReportedActivityDate"] ? new Date(data["ReportedActivityDate"].toString()) : null;
            this.reportedActivityTimeZone = data["ReportedActivityTimeZone"] !== undefined ? data["ReportedActivityTimeZone"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): AuthorizationRequest {
        return new AuthorizationRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Identifier"] = this.identifier !== undefined ? this.identifier : null;
        data["IncludeRequestLog"] = this.includeRequestLog !== undefined ? this.includeRequestLog : null;
        data["ActivityTypeId"] = this.activityTypeId !== undefined ? this.activityTypeId : null;
        data["IsAutoDateTime"] = this.isAutoDateTime !== undefined ? this.isAutoDateTime : null;
        data["IsSpoofingGPS"] = this.isSpoofingGPS !== undefined ? this.isSpoofingGPS : null;
        data["IsRootedJailbreaked"] = this.isRootedJailbreaked !== undefined ? this.isRootedJailbreaked : null;
        data["Platform"] = this.platform !== undefined ? this.platform : null;
        data["OSVersion"] = this.oSVersion !== undefined ? this.oSVersion : null;
        data["AppVersion"] = this.appVersion !== undefined ? this.appVersion : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Accuracy"] = this.accuracy !== undefined ? this.accuracy : null;
        data["LocationProvider"] = this.locationProvider !== undefined ? this.locationProvider : null;
        data["ReportedActivityDate"] = this.reportedActivityDate ? this.reportedActivityDate.toISOString() : null;
        data["ReportedActivityTimeZone"] = this.reportedActivityTimeZone !== undefined ? this.reportedActivityTimeZone : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthorizationRequest(JSON.parse(json));
    }
}

export class AmigoTenantTUserAuditDTO {
    createdBy: number;
    createdByCode: string;
    creationDate: Date;
    updatedBy: number;
    updatedByCode: string;
    updatedDate: Date;

    constructor(data?: any) {
        if (data !== undefined) {
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.createdByCode = data["CreatedByCode"] !== undefined ? data["CreatedByCode"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
            this.updatedByCode = data["UpdatedByCode"] !== undefined ? data["UpdatedByCode"] : null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
        }
    }

    static fromJS(data: any): AmigoTenantTUserAuditDTO {
        return new AmigoTenantTUserAuditDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreatedByCode"] = this.createdByCode !== undefined ? this.createdByCode : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedByCode"] = this.updatedByCode !== undefined ? this.updatedByCode : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AmigoTenantTUserAuditDTO(JSON.parse(json));
    }
}

export class ContractSearchRequest implements IContractSearchRequest {
    periodId: number | null;
    contractCode: string | null;
    contractStatusId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    tenantFullName: string | null;
    houseId: number | null;
    unpaidPeriods: string | null;
    nextDaysToCollect: number | null;
    nextPeriodDate: Date | null;
    nextDueDate: Date | null;
    page: number | null;
    pageSize: number | null;

    constructor(data?: IContractSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            this.tenantFullName = data["TenantFullName"] !== undefined ? data["TenantFullName"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.unpaidPeriods = data["UnpaidPeriods"] !== undefined ? data["UnpaidPeriods"] : <any>null;
            this.nextDaysToCollect = data["NextDaysToCollect"] !== undefined ? data["NextDaysToCollect"] : <any>null;
            this.nextPeriodDate = data["NextPeriodDate"] ? new Date(data["NextPeriodDate"].toString()) : <any>null;
            this.nextDueDate = data["NextDueDate"] ? new Date(data["NextDueDate"].toString()) : <any>null;
            this.page = data["Page"] !== undefined ? data["Page"] : <any>null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : <any>null;
        }
    }

    static fromJS(data: any): ContractSearchRequest {
        let result = new ContractSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["TenantFullName"] = this.tenantFullName !== undefined ? this.tenantFullName : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["UnpaidPeriods"] = this.unpaidPeriods !== undefined ? this.unpaidPeriods : <any>null;
        data["NextDaysToCollect"] = this.nextDaysToCollect !== undefined ? this.nextDaysToCollect : <any>null;
        data["NextPeriodDate"] = this.nextPeriodDate ? this.nextPeriodDate.toISOString() : <any>null;
        data["NextDueDate"] = this.nextDueDate ? this.nextDueDate.toISOString() : <any>null;
        data["Page"] = this.page !== undefined ? this.page : <any>null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractSearchRequest();
        result.init(json);
        return result;
    }
}

export interface IContractSearchRequest {
    periodId: number | null;
    contractCode: string | null;
    contractStatusId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    tenantFullName: string | null;
    houseId: number | null;
    unpaidPeriods: string | null;
    nextDaysToCollect: number | null;
    nextPeriodDate: Date | null;
    nextDueDate: Date | null;
    page: number | null;
    pageSize: number | null;
}

export class ContractRegisterRequest implements IContractRegisterRequest {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    monthsNumber: number | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: number | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    houseName: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    otherTenants: OtherTenantRegisterRequest[] | null;
    userId: number | null;
    username: string | null;
    fullName: string | null;
    contractStatusCode: string | null;
    tenantCode: string | null;
    periodCode: string | null;

    constructor(data?: IContractRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            this.monthsNumber = data["MonthsNumber"] !== undefined ? data["MonthsNumber"] : <any>null;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.contractDate = data["ContractDate"] ? new Date(data["ContractDate"].toString()) : <any>null;
            this.paymentModeId = data["PaymentModeId"] !== undefined ? data["PaymentModeId"] : <any>null;
            this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            this.referencedBy = data["ReferencedBy"] !== undefined ? data["ReferencedBy"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.houseName = data["HouseName"] !== undefined ? data["HouseName"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.frecuencyTypeId = data["FrecuencyTypeId"] !== undefined ? data["FrecuencyTypeId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            if (data["ContractDetails"] && data["ContractDetails"].constructor === Array) {
                this.contractDetails = [];
                for (let item of data["ContractDetails"])
                    this.contractDetails.push(ContractDetailRegisterRequest.fromJS(item));
            }
            if (data["ContractHouseDetails"] && data["ContractHouseDetails"].constructor === Array) {
                this.contractHouseDetails = [];
                for (let item of data["ContractHouseDetails"])
                    this.contractHouseDetails.push(ContractHouseDetailRegisterRequest.fromJS(item));
            }
            if (data["OtherTenants"] && data["OtherTenants"].constructor === Array) {
                this.otherTenants = [];
                for (let item of data["OtherTenants"])
                    this.otherTenants.push(OtherTenantRegisterRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : <any>null;
            this.contractStatusCode = data["ContractStatusCode"] !== undefined ? data["ContractStatusCode"] : <any>null;
            this.tenantCode = data["TenantCode"] !== undefined ? data["TenantCode"] : <any>null;
            this.periodCode = data["PeriodCode"] !== undefined ? data["PeriodCode"] : <any>null;
        }
    }

    static fromJS(data: any): ContractRegisterRequest {
        let result = new ContractRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["MonthsNumber"] = this.monthsNumber !== undefined ? this.monthsNumber : <any>null;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : <any>null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        data["ContractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>null;
        data["PaymentModeId"] = this.paymentModeId !== undefined ? this.paymentModeId : <any>null;
        data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        data["ReferencedBy"] = this.referencedBy !== undefined ? this.referencedBy : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["HouseName"] = this.houseName !== undefined ? this.houseName : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["FrecuencyTypeId"] = this.frecuencyTypeId !== undefined ? this.frecuencyTypeId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        if (this.contractDetails && this.contractDetails.constructor === Array) {
            data["ContractDetails"] = [];
            for (let item of this.contractDetails)
                data["ContractDetails"].push(item.toJSON());
        }
        if (this.contractHouseDetails && this.contractHouseDetails.constructor === Array) {
            data["ContractHouseDetails"] = [];
            for (let item of this.contractHouseDetails)
                data["ContractHouseDetails"].push(item.toJSON());
        }
        if (this.otherTenants && this.otherTenants.constructor === Array) {
            data["OtherTenants"] = [];
            for (let item of this.otherTenants)
                data["OtherTenants"].push(item.toJSON());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["ContractStatusCode"] = this.contractStatusCode !== undefined ? this.contractStatusCode : <any>null;
        data["TenantCode"] = this.tenantCode !== undefined ? this.tenantCode : <any>null;
        data["PeriodCode"] = this.periodCode !== undefined ? this.periodCode : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IContractRegisterRequest {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    monthsNumber: number | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: number | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    houseName: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    otherTenants: OtherTenantRegisterRequest[] | null;
    userId: number | null;
    username: string | null;
    fullName: string | null;
}

export class ContractDetailRegisterRequest implements IContractDetailRegisterRequest {
    contractDetailId: number | null;
    dueDate: Date | null;
    itemNo: number | null;
    description: string | null;
    comment: string | null;
    rent: number | null;
    contractId: number | null;
    contractDetailStatusId: number | null;
    paymentDate: Date | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    periodId: number | null;
    delayDays: number | null;
    finePerDay: number | null;
    fineAmount: number | null;
    totalPayment: number | null;
    payTypeId: number | null;
    paymentReferenceNo: string | null;
    contractDetailObligations: ContractDetailObligationRegisterRequest[] | null;
    userId: number | null;
    username: string | null;

    constructor(data?: IContractDetailRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractDetailId = data["ContractDetailId"] !== undefined ? data["ContractDetailId"] : <any>null;
            this.dueDate = data["DueDate"] ? new Date(data["DueDate"].toString()) : <any>null;
            this.itemNo = data["ItemNo"] !== undefined ? data["ItemNo"] : <any>null;
            this.description = data["Description"] !== undefined ? data["Description"] : <any>null;
            this.comment = data["Comment"] !== undefined ? data["Comment"] : <any>null;
            this.rent = data["Rent"] !== undefined ? data["Rent"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.contractDetailStatusId = data["ContractDetailStatusId"] !== undefined ? data["ContractDetailStatusId"] : <any>null;
            this.paymentDate = data["PaymentDate"] ? new Date(data["PaymentDate"].toString()) : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.delayDays = data["DelayDays"] !== undefined ? data["DelayDays"] : <any>null;
            this.finePerDay = data["FinePerDay"] !== undefined ? data["FinePerDay"] : <any>null;
            this.fineAmount = data["FineAmount"] !== undefined ? data["FineAmount"] : <any>null;
            this.totalPayment = data["TotalPayment"] !== undefined ? data["TotalPayment"] : <any>null;
            this.payTypeId = data["PayTypeId"] !== undefined ? data["PayTypeId"] : <any>null;
            this.paymentReferenceNo = data["PaymentReferenceNo"] !== undefined ? data["PaymentReferenceNo"] : <any>null;
            if (data["ContractDetailObligations"] && data["ContractDetailObligations"].constructor === Array) {
                this.contractDetailObligations = [];
                for (let item of data["ContractDetailObligations"])
                    this.contractDetailObligations.push(ContractDetailObligationRegisterRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): ContractDetailRegisterRequest {
        let result = new ContractDetailRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractDetailId"] = this.contractDetailId !== undefined ? this.contractDetailId : <any>null;
        data["DueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
        data["ItemNo"] = this.itemNo !== undefined ? this.itemNo : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["Rent"] = this.rent !== undefined ? this.rent : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["ContractDetailStatusId"] = this.contractDetailStatusId !== undefined ? this.contractDetailStatusId : <any>null;
        data["PaymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["DelayDays"] = this.delayDays !== undefined ? this.delayDays : <any>null;
        data["FinePerDay"] = this.finePerDay !== undefined ? this.finePerDay : <any>null;
        data["FineAmount"] = this.fineAmount !== undefined ? this.fineAmount : <any>null;
        data["TotalPayment"] = this.totalPayment !== undefined ? this.totalPayment : <any>null;
        data["PayTypeId"] = this.payTypeId !== undefined ? this.payTypeId : <any>null;
        data["PaymentReferenceNo"] = this.paymentReferenceNo !== undefined ? this.paymentReferenceNo : <any>null;
        if (this.contractDetailObligations && this.contractDetailObligations.constructor === Array) {
            data["ContractDetailObligations"] = [];
            for (let item of this.contractDetailObligations)
                data["ContractDetailObligations"].push(item.toJSON());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractDetailRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IContractDetailRegisterRequest {
    contractDetailId: number | null;
    dueDate: Date | null;
    itemNo: number | null;
    description: string | null;
    comment: string | null;
    rent: number | null;
    contractId: number | null;
    contractDetailStatusId: number | null;
    paymentDate: Date | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    periodId: number | null;
    delayDays: number | null;
    finePerDay: number | null;
    fineAmount: number | null;
    totalPayment: number | null;
    payTypeId: number | null;
    paymentReferenceNo: string | null;
    contractDetailObligations: ContractDetailObligationRegisterRequest[] | null;
    userId: number | null;
    username: string | null;
}

export class ContractHouseDetailRegisterRequest implements IContractHouseDetailRegisterRequest {
    contractHouseDetailId: number | null;
    contractId: number | null;
    houseFeatureId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tableStatus: ContractHouseDetailRegisterRequestTableStatus | null;

    constructor(data?: IContractHouseDetailRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractHouseDetailId = data["ContractHouseDetailId"] !== undefined ? data["ContractHouseDetailId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.tableStatus = data["TableStatus"] !== undefined ? data["TableStatus"] : <any>null;
        }
    }

    static fromJS(data: any): ContractHouseDetailRegisterRequest {
        let result = new ContractHouseDetailRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractHouseDetailId"] = this.contractHouseDetailId !== undefined ? this.contractHouseDetailId : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["TableStatus"] = this.tableStatus !== undefined ? this.tableStatus : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractHouseDetailRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IContractHouseDetailRegisterRequest {
    contractHouseDetailId: number | null;
    contractId: number | null;
    houseFeatureId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tableStatus: ContractHouseDetailRegisterRequestTableStatus | null;
}

export class OtherTenantRegisterRequest implements IOtherTenantRegisterRequest {
    otherTenantId: number | null;
    contractId: number | null;
    tenantId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tableStatus: OtherTenantRegisterRequestTableStatus | null;
    fullName: string | null;

    constructor(data?: IOtherTenantRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.otherTenantId = data["OtherTenantId"] !== undefined ? data["OtherTenantId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.tableStatus = data["TableStatus"] !== undefined ? data["TableStatus"] : <any>null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : <any>null;
        }
    }

    static fromJS(data: any): OtherTenantRegisterRequest {
        let result = new OtherTenantRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OtherTenantId"] = this.otherTenantId !== undefined ? this.otherTenantId : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["TableStatus"] = this.tableStatus !== undefined ? this.tableStatus : <any>null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new OtherTenantRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IOtherTenantRegisterRequest {
    otherTenantId: number | null;
    contractId: number | null;
    tenantId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tableStatus: OtherTenantRegisterRequestTableStatus | null;
    fullName: string | null;
}

export class ContractDetailObligationRegisterRequest implements IContractDetailObligationRegisterRequest {
    contractDetailObligationId: number | null;
    contractDetailId: number | null;
    obligationDate: Date | null;
    conceptId: number | null;
    comment: string | null;
    infractionAmount: number | null;
    tenantId: number | null;
    periodId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tenantInfractorId: number | null;
    entityStatusId: number | null;
    userId: number | null;
    username: string | null;

    constructor(data?: IContractDetailObligationRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractDetailObligationId = data["ContractDetailObligationId"] !== undefined ? data["ContractDetailObligationId"] : <any>null;
            this.contractDetailId = data["ContractDetailId"] !== undefined ? data["ContractDetailId"] : <any>null;
            this.obligationDate = data["ObligationDate"] ? new Date(data["ObligationDate"].toString()) : <any>null;
            this.conceptId = data["ConceptId"] !== undefined ? data["ConceptId"] : <any>null;
            this.comment = data["Comment"] !== undefined ? data["Comment"] : <any>null;
            this.infractionAmount = data["InfractionAmount"] !== undefined ? data["InfractionAmount"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.tenantInfractorId = data["TenantInfractorId"] !== undefined ? data["TenantInfractorId"] : <any>null;
            this.entityStatusId = data["EntityStatusId"] !== undefined ? data["EntityStatusId"] : <any>null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): ContractDetailObligationRegisterRequest {
        let result = new ContractDetailObligationRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractDetailObligationId"] = this.contractDetailObligationId !== undefined ? this.contractDetailObligationId : <any>null;
        data["ContractDetailId"] = this.contractDetailId !== undefined ? this.contractDetailId : <any>null;
        data["ObligationDate"] = this.obligationDate ? this.obligationDate.toISOString() : <any>null;
        data["ConceptId"] = this.conceptId !== undefined ? this.conceptId : <any>null;
        data["Comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["InfractionAmount"] = this.infractionAmount !== undefined ? this.infractionAmount : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["TenantInfractorId"] = this.tenantInfractorId !== undefined ? this.tenantInfractorId : <any>null;
        data["EntityStatusId"] = this.entityStatusId !== undefined ? this.entityStatusId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractDetailObligationRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IContractDetailObligationRegisterRequest {
    contractDetailObligationId: number | null;
    contractDetailId: number | null;
    obligationDate: Date | null;
    conceptId: number | null;
    comment: string | null;
    infractionAmount: number | null;
    tenantId: number | null;
    periodId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    tenantInfractorId: number | null;
    entityStatusId: number | null;
    userId: number | null;
    username: string | null;
}

export class ContractUpdateRequest implements IContractUpdateRequest {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    monthsNumber: number | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: number | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    otherTenants: OtherTenantRegisterRequest[] | null;
    userId: number | null;
    username: string | null;

    constructor(data?: IContractUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            this.monthsNumber = data["MonthsNumber"] !== undefined ? data["MonthsNumber"] : <any>null;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.contractDate = data["ContractDate"] ? new Date(data["ContractDate"].toString()) : <any>null;
            this.paymentModeId = data["PaymentModeId"] !== undefined ? data["PaymentModeId"] : <any>null;
            this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            this.referencedBy = data["ReferencedBy"] !== undefined ? data["ReferencedBy"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.frecuencyTypeId = data["FrecuencyTypeId"] !== undefined ? data["FrecuencyTypeId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            if (data["ContractDetails"] && data["ContractDetails"].constructor === Array) {
                this.contractDetails = [];
                for (let item of data["ContractDetails"])
                    this.contractDetails.push(ContractDetailRegisterRequest.fromJS(item));
            }
            if (data["ContractHouseDetails"] && data["ContractHouseDetails"].constructor === Array) {
                this.contractHouseDetails = [];
                for (let item of data["ContractHouseDetails"])
                    this.contractHouseDetails.push(ContractHouseDetailRegisterRequest.fromJS(item));
            }
            if (data["OtherTenants"] && data["OtherTenants"].constructor === Array) {
                this.otherTenants = [];
                for (let item of data["OtherTenants"])
                    this.otherTenants.push(OtherTenantRegisterRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): ContractUpdateRequest {
        let result = new ContractUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["MonthsNumber"] = this.monthsNumber !== undefined ? this.monthsNumber : <any>null;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : <any>null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        data["ContractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>null;
        data["PaymentModeId"] = this.paymentModeId !== undefined ? this.paymentModeId : <any>null;
        data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        data["ReferencedBy"] = this.referencedBy !== undefined ? this.referencedBy : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["FrecuencyTypeId"] = this.frecuencyTypeId !== undefined ? this.frecuencyTypeId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        if (this.contractDetails && this.contractDetails.constructor === Array) {
            data["ContractDetails"] = [];
            for (let item of this.contractDetails)
                data["ContractDetails"].push(item.toJSON());
        }
        if (this.contractHouseDetails && this.contractHouseDetails.constructor === Array) {
            data["ContractHouseDetails"] = [];
            for (let item of this.contractHouseDetails)
                data["ContractHouseDetails"].push(item.toJSON());
        }
        if (this.otherTenants && this.otherTenants.constructor === Array) {
            data["OtherTenants"] = [];
            for (let item of this.otherTenants)
                data["OtherTenants"].push(item.toJSON());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractUpdateRequest();
        result.init(json);
        return result;
    }
}

export interface IContractUpdateRequest {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    monthsNumber: number | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: number | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    otherTenants: OtherTenantRegisterRequest[] | null;
    userId: number | null;
    username: string | null;
}

export class ContractChangeStatusRequest implements IContractChangeStatusRequest {
    contractId: number | null;
    //beginDate: Date | null;
    //endDate: Date | null;
    //monthsNumber: number | null;
    //rentDeposit: number | null;
    //rentPrice: number | null;
    //contractDate: Date | null;
    //paymentModeId: number | null;
    //contractStatusId: number | null;
    //periodId: number | null;
    //contractCode: string | null;
    //referencedBy: string | null;
    //houseId: number | null;
    //rowStatus: boolean | null;
    //createdBy: number | null;
    //creationDate: Date | null;
    //updatedBy: number | null;
    //updatedDate: Date | null;
    //frecuencyTypeId: string | null;
    //tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    //contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    //otherTenants: OtherTenantRegisterRequest[] | null;
    paymentsPeriod: PaymentPeriodRegisterRequest[] | null;
    userId: number | null;
    username: string | null;

    constructor(data?: IContractChangeStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            //this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            //this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            //this.monthsNumber = data["MonthsNumber"] !== undefined ? data["MonthsNumber"] : <any>null;
            //this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : <any>null;
            //this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            //this.contractDate = data["ContractDate"] ? new Date(data["ContractDate"].toString()) : <any>null;
            //this.paymentModeId = data["PaymentModeId"] !== undefined ? data["PaymentModeId"] : <any>null;
            //this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            //this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            //this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            //this.referencedBy = data["ReferencedBy"] !== undefined ? data["ReferencedBy"] : <any>null;
            //this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            //this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            //this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            //this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            //this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            //this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            //this.frecuencyTypeId = data["FrecuencyTypeId"] !== undefined ? data["FrecuencyTypeId"] : <any>null;
            //this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            if (data["ContractDetails"] && data["ContractDetails"].constructor === Array) {
                this.contractDetails = [];
                for (let item of data["ContractDetails"])
                    this.contractDetails.push(ContractDetailRegisterRequest.fromJS(item));
            }
            //if (data["ContractHouseDetails"] && data["ContractHouseDetails"].constructor === Array) {
            //    this.contractHouseDetails = [];
            //    for (let item of data["ContractHouseDetails"])
            //        this.contractHouseDetails.push(ContractHouseDetailRegisterRequest.fromJS(item));
            //}
            //if (data["OtherTenants"] && data["OtherTenants"].constructor === Array) {
            //    this.otherTenants = [];
            //    for (let item of data["OtherTenants"])
            //        this.otherTenants.push(OtherTenantRegisterRequest.fromJS(item));
            //}
            if (data["PaymentsPeriod"] && data["PaymentsPeriod"].constructor === Array) {
                this.paymentsPeriod = [];
                for (let item of data["PaymentsPeriod"])
                    this.paymentsPeriod.push(PaymentPeriodRegisterRequest.fromJS(item));
            }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): ContractChangeStatusRequest {
        let result = new ContractChangeStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        //data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        //data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        //data["MonthsNumber"] = this.monthsNumber !== undefined ? this.monthsNumber : <any>null;
        //data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : <any>null;
        //data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        //data["ContractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>null;
        //data["PaymentModeId"] = this.paymentModeId !== undefined ? this.paymentModeId : <any>null;
        //data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        //data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        //data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        //data["ReferencedBy"] = this.referencedBy !== undefined ? this.referencedBy : <any>null;
        //data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        //data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        //data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        //data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        //data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        //data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        //data["FrecuencyTypeId"] = this.frecuencyTypeId !== undefined ? this.frecuencyTypeId : <any>null;
        //data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        if (this.contractDetails && this.contractDetails.constructor === Array) {
            data["ContractDetails"] = [];
            for (let item of this.contractDetails)
                data["ContractDetails"].push(item.toJSON());
        }
        //if (this.contractHouseDetails && this.contractHouseDetails.constructor === Array) {
        //    data["ContractHouseDetails"] = [];
        //    for (let item of this.contractHouseDetails)
        //        data["ContractHouseDetails"].push(item.toJSON());
        //}
        //if (this.otherTenants && this.otherTenants.constructor === Array) {
        //    data["OtherTenants"] = [];
        //    for (let item of this.otherTenants)
        //        data["OtherTenants"].push(item.toJSON());
        //}
        if (this.paymentsPeriod && this.paymentsPeriod.constructor === Array) {
            data["PaymentsPeriod"] = [];
            for (let item of this.paymentsPeriod)
                data["PaymentsPeriod"].push(item.toJSON());
        }
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractChangeStatusRequest();
        result.init(json);
        return result;
    }
}

export interface IContractChangeStatusRequest {
    contractId: number | null;
    //beginDate: Date | null;
    //endDate: Date | null;
    //monthsNumber: number | null;
    //rentDeposit: number | null;
    //rentPrice: number | null;
    //contractDate: Date | null;
    //paymentModeId: number | null;
    //contractStatusId: number | null;
    //periodId: number | null;
    //contractCode: string | null;
    //referencedBy: string | null;
    //houseId: number | null;
    //rowStatus: boolean | null;
    //createdBy: number | null;
    //creationDate: Date | null;
    //updatedBy: number | null;
    //updatedDate: Date | null;
    //frecuencyTypeId: string | null;
    //tenantId: number | null;
    contractDetails: ContractDetailRegisterRequest[] | null;
    //contractHouseDetails: ContractHouseDetailRegisterRequest[] | null;
    //otherTenants: OtherTenantRegisterRequest[] | null;
    paymentsPeriod: PaymentPeriodRegisterRequest[] | null;
    userId: number | null;
    username: string | null;
}

export class PaymentPeriodRegisterRequest implements IPaymentPeriodRegisterRequest {
    paymentPeriodId: number | null;
    conceptId: number | null;
    contractId: number | null;
    tenantId: number | null;
    periodId: number | null;
    paymentAmount: number | null;
    dueDate: Date | null;
    paymentPeriodStatusId: number | null;
    userId: number | null;
    username: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    constructor(data?: IPaymentPeriodRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paymentPeriodId = data["PaymentPeriodId"] !== undefined ? data["PaymentPeriodId"] : <any>null;
            this.conceptId = data["ConceptId"] !== undefined ? data["ConceptId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.paymentAmount = data["PaymentAmount"] !== undefined ? data["PaymentAmount"] : <any>null;
            this.paymentPeriodStatusId = data["PaymentPeriodStatusId"] !== undefined ? data["PaymentPeriodStatusId"] : <any>null;
            this.dueDate = data["DueDate"] ? new Date(data["DueDate"].toString()) : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;

            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): PaymentPeriodRegisterRequest {
        let result = new PaymentPeriodRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PaymentPeriodId"] = this.paymentPeriodId !== undefined ? this.paymentPeriodId : <any>null;
        data["ConceptId"] = this.conceptId ? this.conceptId : <any>null;
        data["ContractId"] = this.contractId ? this.contractId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["PaymentAmount"] = this.paymentAmount !== undefined ? this.paymentAmount : <any>null;
        data["PaymentPeriodStatusId"] = this.paymentPeriodStatusId ? this.paymentPeriodStatusId : <any>null;
        data["DueDate"] = this.dueDate !== undefined ? this.dueDate.toISOString() : <any>null;
        
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new PaymentPeriodRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IPaymentPeriodRegisterRequest {
    paymentPeriodId: number | null;
    conceptId: number | null;
    contractId: number | null;
    tenantId: number | null;
    periodId: number | null;
    paymentAmount: number | null;
    dueDate: Date | null;
    paymentPeriodStatusId: number | null;
    userId: number | null;
    username: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
}

export class ResponseDTOOfListOfHouseFeatureDetailContractDTO implements IResponseDTOOfListOfHouseFeatureDetailContractDTO {
    data: HouseFeatureDetailContractDTO[] | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseFeatureDetailContractDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseFeatureDetailContractDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            this.pk = data["Pk"] !== undefined ? data["Pk"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseFeatureDetailContractDTO {
        let result = new ResponseDTOOfListOfHouseFeatureDetailContractDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["Pk"] = this.pk !== undefined ? this.pk : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseFeatureDetailContractDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfHouseFeatureDetailContractDTO {
    data: HouseFeatureDetailContractDTO[] | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;
}

export class HouseFeatureDetailContractDTO implements IHouseFeatureDetailContractDTO {
    contractHouseDetailId: number | null;
    contractId: number | null;
    houseId: number | null;
    houseFeatureId: number | null;
    beginDate: Date | null;
    endDate: Date | null;

    constructor(data?: IHouseFeatureDetailContractDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractHouseDetailId = data["ContractHouseDetailId"] !== undefined ? data["ContractHouseDetailId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): HouseFeatureDetailContractDTO {
        let result = new HouseFeatureDetailContractDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractHouseDetailId"] = this.contractHouseDetailId !== undefined ? this.contractHouseDetailId : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseFeatureDetailContractDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseFeatureDetailContractDTO {
    contractHouseDetailId: number | null;
    contractId: number | null;
    houseId: number | null;
    houseFeatureId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
}

export interface IContractClient {
    /**
     * @return OK
     */
    search(search_periodId: number, search_contractCode: string, search_contractStatusId: number, search_beginDate: Date, search_endDate: Date, search_tenantFullName: string, search_houseId: number, search_unpaidPeriods: string, search_nextDaysToCollect: number, //search_nextPeriodDate: Date, search_nextDueDate: Date, 
        search_featureIds: number[], search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfContractSearchDTO | null>;
    /**
     * @return OK
     */
    getById(id: number): Observable<ResponseDTOOfContractRegisterRequest | null>;
    /**
     * @return OK
     */
    register(contract: ContractRegisterRequest): Observable<ResponseDTO | null>;
    /**
     * @return OK
     */
    update(contract: ContractUpdateRequest): Observable<ResponseDTO | null>;
    /**
     * @return OK
     */
    delete(contract: ContractDeleteRequest): Observable<ResponseDTO | null>;
    /**
     * @return OK
     */
    searchHouseFeatureDetailContract(houseId: number): Observable<ResponseDTOOfListOfHouseFeatureDetailContractDTO | null>;

    searchReport(search_periodId: number, search_contractCode: string, search_contractStatusId: number, search_beginDate: Date, search_endDate: Date, search_tenantFullName: string, search_houseId: number, search_unpaidPeriods: string, search_nextDaysToCollect: number, search_featureIds: number[], search_page: number, search_pageSize: number);

    changeStatus(contract: ContractChangeStatusRequest): Observable<ResponseDTO | null>;
}

@Injectable()
export class ContractClient extends AmigoTenantServiceBase implements IContractClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:7072";
    }

    /**
     * @return OK
     */
    search(search_periodId: number, search_contractCode: string, search_contractStatusId: number, search_beginDate: Date, search_endDate: Date, search_tenantFullName: string, search_houseId: number, search_unpaidPeriods: string, search_nextDaysToCollect: number, //search_nextPeriodDate: Date, search_nextDueDate: Date, 
    search_featureIds: number[], search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfContractSearchDTO | null> {

        let url_ = this.baseUrl + "/api/contract/searchCriteria?";
        if (search_periodId !== undefined)
            url_ += "search.periodId=" + encodeURIComponent("" + search_periodId) + "&";
        if (search_contractCode !== undefined)
            url_ += "search.contractCode=" + encodeURIComponent("" + search_contractCode) + "&";
        if (search_contractStatusId !== undefined)
            url_ += "search.contractStatusId=" + encodeURIComponent("" + search_contractStatusId) + "&";
        if (search_beginDate !== undefined)
            url_ += "search.beginDate=" + encodeURIComponent("" + search_beginDate.toJSON()) + "&";
        if (search_endDate !== undefined)
            url_ += "search.endDate=" + encodeURIComponent("" + search_endDate.toJSON()) + "&";
        if (search_tenantFullName !== undefined)
            url_ += "search.tenantFullName=" + encodeURIComponent("" + search_tenantFullName) + "&";
        if (search_houseId !== undefined)
            url_ += "search.houseId=" + encodeURIComponent("" + search_houseId) + "&";
        if (search_unpaidPeriods !== undefined)
            url_ += "search.unpaidPeriods=" + encodeURIComponent("" + search_unpaidPeriods) + "&";
        if (search_nextDaysToCollect !== undefined)
            url_ += "search.nextDaysToCollect=" + encodeURIComponent("" + search_nextDaysToCollect) + "&";
        // if (search_nextPeriodDate !== undefined)
        //     url_ += "search.nextPeriodDate=" + encodeURIComponent("" + search_nextPeriodDate.toJSON()) + "&";
        // if (search_nextDueDate !== undefined)
        //     url_ += "search.nextDueDate=" + encodeURIComponent("" + search_nextDueDate.toJSON()) + "&";
        if (search_featureIds !== undefined)
            search_featureIds.forEach(item => { url_ += "search.featureIds=" + encodeURIComponent("" + item) + "&"; });
        if (search_page !== undefined)
            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";
        if (search_pageSize !== undefined)
            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearch(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPagedListOfContractSearchDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPagedListOfContractSearchDTO>><any>Observable.throw(response);
        });
    }

    protected processSearch(response: Response): Observable<ResponseDTOOfPagedListOfContractSearchDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfPagedListOfContractSearchDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfContractSearchDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfContractSearchDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfPagedListOfContractSearchDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    getById(id: number): Observable<ResponseDTOOfContractRegisterRequest | null> {
        let url_ = this.baseUrl + "/api/contract/getById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfContractRegisterRequest>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfContractRegisterRequest>><any>Observable.throw(response);
        });
    }

    protected processGetById(response: Response): ResponseDTOOfContractRegisterRequest {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfContractRegisterRequest = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfContractRegisterRequest.fromJS(resultData200) : new ResponseDTOOfContractRegisterRequest();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
    /**
     * @return OK
     */
    register(contract: ContractRegisterRequest): Observable<ResponseDTO | null> {
        let url_ = this.baseUrl + "/api/contract/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contract ? contract.toJSON() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(contract: ContractUpdateRequest): Observable<ResponseDTO | null> {
        let url_ = this.baseUrl + "/api/contract/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contract ? contract.toJSON() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(contract: ContractDeleteRequest): Observable<ResponseDTO | null> {
        let url_ = this.baseUrl + "/api/contract/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contract ? contract.toJSON() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchHouseFeatureDetailContract(houseId: number): Observable<ResponseDTOOfListOfHouseFeatureDetailContractDTO | null> {
        let url_ = this.baseUrl + "/api/contract/searchHouseFeatureDetailContract?";
        if (houseId === undefined || houseId === null)
            throw new Error("The parameter 'houseId' must be defined and cannot be null.");
        else
            url_ += "houseId=" + encodeURIComponent("" + houseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchHouseFeatureDetailContract(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchHouseFeatureDetailContract(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseFeatureDetailContractDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseFeatureDetailContractDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchHouseFeatureDetailContract(response: Response): Observable<ResponseDTOOfListOfHouseFeatureDetailContractDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfHouseFeatureDetailContractDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseFeatureDetailContractDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseFeatureDetailContractDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfHouseFeatureDetailContractDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    searchReport(search_periodId: number, search_contractCode: string, search_contractStatusId: number, search_beginDate: Date,
        search_endDate: Date, search_tenantFullName: string, search_houseId: number, search_unpaidPeriods: string, search_nextDaysToCollect: number,
        search_featureIds: number[], search_page: number, search_pageSize: number) {
        let url_ = this.baseUrl + "/api/contract/searchReport?";
        if (search_periodId !== undefined)
            url_ += "search.periodId=" + encodeURIComponent("" + search_periodId) + "&";
        if (search_contractCode !== undefined)
            url_ += "search.contractCode=" + encodeURIComponent("" + search_contractCode) + "&";
        if (search_contractStatusId !== undefined)
            url_ += "search.contractStatusId=" + encodeURIComponent("" + search_contractStatusId) + "&";
        if (search_beginDate !== undefined)
            url_ += "search.beginDate=" + encodeURIComponent("" + search_beginDate.toJSON()) + "&";
        if (search_endDate !== undefined)
            url_ += "search.endDate=" + encodeURIComponent("" + search_endDate.toJSON()) + "&";
        if (search_tenantFullName !== undefined)
            url_ += "search.tenantFullName=" + encodeURIComponent("" + search_tenantFullName) + "&";
        if (search_houseId !== undefined)
            url_ += "search.houseId=" + encodeURIComponent("" + search_houseId) + "&";
        if (search_unpaidPeriods !== undefined)
            url_ += "search.unpaidPeriods=" + encodeURIComponent("" + search_unpaidPeriods) + "&";
        if (search_nextDaysToCollect !== undefined)
            url_ += "search.nextDaysToCollect=" + encodeURIComponent("" + search_nextDaysToCollect) + "&";
        if (search_featureIds !== undefined)
            search_featureIds.forEach(item => { url_ += "search.featureIds=" + encodeURIComponent("" + item) + "&"; });
        if (search_page !== undefined)
            url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";
        if (search_pageSize !== undefined)
            url_ += "search.pageSize=" + encodeURIComponent("" + search_pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        window.open(url_);

    }

    /**
     * @return OK
     */
    changeStatus(contract: ContractChangeStatusRequest): Observable<ResponseDTO | null> {
        //debugger;
        let url_ = this.baseUrl + "/api/contract/changeStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(contract ? contract.toJSON() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processChangeStatus(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processChangeStatus(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processChangeStatus(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export class ContractDeleteRequest implements IContractDeleteRequest {
    contractId: number | null;
    userId: number | null;
    username: string | null;

    constructor(data?: IContractDeleteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : <any>null;
            this.username = data["Username"] !== undefined ? data["Username"] : <any>null;
        }
    }

    static fromJS(data: any): ContractDeleteRequest {
        let result = new ContractDeleteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        data["Username"] = this.username !== undefined ? this.username : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractDeleteRequest();
        result.init(json);
        return result;
    }
}

export interface IContractDeleteRequest {
    contractId: number | null;
    userId: number | null;
    username: string | null;
}

export class ResponseDTOOfPagedListOfContractSearchDTO implements IResponseDTOOfPagedListOfContractSearchDTO {
    data: PagedListOfContractSearchDTO | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfPagedListOfContractSearchDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"] ? PagedListOfContractSearchDTO.fromJS(data["Data"]) : <any>null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfContractSearchDTO {
        let result = new ResponseDTOOfPagedListOfContractSearchDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data ? this.data.toJSON() : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfPagedListOfContractSearchDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfPagedListOfContractSearchDTO {
    data: PagedListOfContractSearchDTO | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class PagedListOfContractSearchDTO implements IPagedListOfContractSearchDTO {
    page: number | null;
    total: number | null;
    pageSize: number | null;
    items: ContractSearchDTO[] | null;

    constructor(data?: IPagedListOfContractSearchDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["Page"] !== undefined ? data["Page"] : <any>null;
            this.total = data["Total"] !== undefined ? data["Total"] : <any>null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : <any>null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(ContractSearchDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfContractSearchDTO {
        let result = new PagedListOfContractSearchDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page !== undefined ? this.page : <any>null;
        data["Total"] = this.total !== undefined ? this.total : <any>null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new PagedListOfContractSearchDTO();
        result.init(json);
        return result;
    }
}

export interface IPagedListOfContractSearchDTO {
    page: number | null;
    total: number | null;
    pageSize: number | null;
    items: ContractSearchDTO[] | null;
}

export class ContractSearchDTO implements IContractSearchDTO {
    isSelected: boolean | null;
    contractCode: string | null;
    periodCode: string | null;
    tenantFullName: string | null;
    creationDate: Date | null;
    houseName: string | null;
    nextDueDate: Date | null;
    nextDaysToCollect: number | null;
    unpaidPeriods: number | null;
    houseId: number | null;
    contractStatusId: number | null;
    contractId: number | null;
    rowStatus: boolean | null;
    beginDate: Date | null;
    endDate: Date | null;
    features: string | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractStatusCode: string | null;

    constructor(data?: IContractSearchDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isSelected = data["IsSelected"] !== undefined ? data["IsSelected"] : <any>null;
            this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            this.periodCode = data["PeriodCode"] !== undefined ? data["PeriodCode"] : <any>null;
            this.tenantFullName = data["TenantFullName"] !== undefined ? data["TenantFullName"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.houseName = data["HouseName"] !== undefined ? data["HouseName"] : <any>null;
            this.nextDueDate = data["NextDueDate"] ? new Date(data["NextDueDate"].toString()) : <any>null;
            this.nextDaysToCollect = data["NextDaysToCollect"] !== undefined ? data["NextDaysToCollect"] : <any>null;
            this.unpaidPeriods = data["UnpaidPeriods"] !== undefined ? data["UnpaidPeriods"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.beginDate = data["BeginDate"] !== undefined ? data["BeginDate"] : <any>null;
            this.endDate = data["EndDate"] !== undefined ? data["EndDate"] : <any>null;
            this.features = data["Features"] !== undefined ? data["Features"] : <any>null;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.contractStatusCode = data["ContractStatusCode"] !== undefined ? data["ContractStatusCode"] : <any>null;

        }
    }

    static fromJS(data: any): ContractSearchDTO {
        let result = new ContractSearchDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        data["PeriodCode"] = this.periodCode !== undefined ? this.periodCode : <any>null;
        data["TenantFullName"] = this.tenantFullName !== undefined ? this.tenantFullName : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["HouseName"] = this.houseName !== undefined ? this.houseName : <any>null;
        data["NextDueDate"] = this.nextDueDate ? this.nextDueDate.toISOString() : <any>null;
        data["NextDaysToCollect"] = this.nextDaysToCollect !== undefined ? this.nextDaysToCollect : <any>null;
        data["UnpaidPeriods"] = this.unpaidPeriods !== undefined ? this.unpaidPeriods : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["BeginDate"] = this.beginDate !== undefined ? this.beginDate : <any>null;
        data["EndDate"] = this.endDate !== undefined ? this.endDate : <any>null;
        data["Features"] = this.features !== undefined ? this.features : <any>null;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : <any>null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        data["ContractStatusCode"] = this.contractStatusCode !== undefined ? this.contractStatusCode : <any>null;

        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractSearchDTO();
        result.init(json);
        return result;
    }
}

export interface IContractSearchDTO {
    isSelected: boolean | null;
    contractCode: string | null;
    periodCode: string | null;
    tenantFullName: string | null;
    creationDate: Date | null;
    houseName: string | null;
    nextDueDate: Date | null;
    nextDaysToCollect: number | null;
    unpaidPeriods: number | null;
    houseId: number | null;
    contractStatusId: number | null;
    contractId: number | null;
    rowStatus: boolean | null;
    beginDate: Date | null;
    endDate: Date | null;
    features: string | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractStatusCode: string | null;
}

export class ResponseDTOOfContractRegisterRequest implements IResponseDTOOfContractRegisterRequest {
    data: ContractRegisterRequest | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfContractRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"] ? ContractRegisterRequest.fromJS(data["Data"]) : <any>null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfContractRegisterRequest {
        let result = new ResponseDTOOfContractRegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data ? this.data.toJSON() : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfContractRegisterRequest();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfContractRegisterRequest {
    data: ContractRegisterRequest | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class ContractDTO implements IContractDTO {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: string | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractStatusCode: string | null;
    tenantCode: string | null;
    tenantFullName: string | null;
    periodCode: string | null;
    otherTenantsDTO: OtherTenantDTO[] | null;

    constructor(data?: IContractDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.contractDate = data["ContractDate"] ? new Date(data["ContractDate"].toString()) : <any>null;
            this.paymentModeId = data["PaymentModeId"] !== undefined ? data["PaymentModeId"] : <any>null;
            this.contractStatusId = data["ContractStatusId"] !== undefined ? data["ContractStatusId"] : <any>null;
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.contractCode = data["ContractCode"] !== undefined ? data["ContractCode"] : <any>null;
            this.referencedBy = data["ReferencedBy"] !== undefined ? data["ReferencedBy"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.frecuencyTypeId = data["FrecuencyTypeId"] !== undefined ? data["FrecuencyTypeId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.contractStatusCode = data["ContractStatusCode"] !== undefined ? data["ContractStatusCode"] : <any>null;
            this.tenantCode = data["TenantCode"] !== undefined ? data["TenantCode"] : <any>null;
            this.tenantFullName = data["TenantFullName"] !== undefined ? data["TenantFullName"] : <any>null;
            this.periodCode = data["PeriodCode"] !== undefined ? data["PeriodCode"] : <any>null;
            if (data["OtherTenantsDTO"] && data["OtherTenantsDTO"].constructor === Array) {
                this.otherTenantsDTO = [];
                for (let item of data["OtherTenantsDTO"])
                    this.otherTenantsDTO.push(OtherTenantDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContractDTO {
        let result = new ContractDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : <any>null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        data["ContractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>null;
        data["PaymentModeId"] = this.paymentModeId !== undefined ? this.paymentModeId : <any>null;
        data["ContractStatusId"] = this.contractStatusId !== undefined ? this.contractStatusId : <any>null;
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["ContractCode"] = this.contractCode !== undefined ? this.contractCode : <any>null;
        data["ReferencedBy"] = this.referencedBy !== undefined ? this.referencedBy : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["FrecuencyTypeId"] = this.frecuencyTypeId !== undefined ? this.frecuencyTypeId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["ContractStatusCode"] = this.contractStatusCode !== undefined ? this.contractStatusCode : <any>null;
        data["TenantCode"] = this.tenantCode !== undefined ? this.tenantCode : <any>null;
        data["TenantFullName"] = this.tenantFullName !== undefined ? this.tenantFullName : <any>null;
        data["PeriodCode"] = this.periodCode !== undefined ? this.periodCode : <any>null;
        if (this.otherTenantsDTO && this.otherTenantsDTO.constructor === Array) {
            data["OtherTenantsDTO"] = [];
            for (let item of this.otherTenantsDTO)
                data["OtherTenantsDTO"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ContractDTO();
        result.init(json);
        return result;
    }
}

export interface IContractDTO {
    contractId: number | null;
    beginDate: Date | null;
    endDate: Date | null;
    rentDeposit: number | null;
    rentPrice: number | null;
    contractDate: Date | null;
    paymentModeId: number | null;
    contractStatusId: number | null;
    periodId: string | null;
    contractCode: string | null;
    referencedBy: string | null;
    houseId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    frecuencyTypeId: string | null;
    tenantId: number | null;
    contractStatusCode: string | null;
    tenantCode: string | null;
    tenantFullName: string | null;
    periodCode: string | null;
    otherTenantsDTO: OtherTenantDTO[] | null;
}

export class OtherTenantDTO implements IOtherTenantDTO {
    otherTenantId: number | null;
    contractId: number | null;
    tenantId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    fullName: string | null;

    constructor(data?: IOtherTenantDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.otherTenantId = data["OtherTenantId"] !== undefined ? data["OtherTenantId"] : <any>null;
            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : <any>null;
        }
    }

    static fromJS(data: any): OtherTenantDTO {
        let result = new OtherTenantDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["OtherTenantId"] = this.otherTenantId !== undefined ? this.otherTenantId : <any>null;
        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new OtherTenantDTO();
        result.init(json);
        return result;
    }
}

export interface IOtherTenantDTO {
    otherTenantId: number | null;
    contractId: number | null;
    tenantId: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    fullName: string | null;
}

export interface IEntityStatusClient {
    /**
     * @return OK
     */
    getEntityStatusByEntityCodeAsync(entityCode: string): Observable<ResponseDTOOfListOfEntityStatusDTO | null>;
}

@Injectable()
export class EntityStatusClient extends AmigoTenantServiceBase implements IEntityStatusClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    getEntityStatusByEntityCodeAsync(entityCode: string): Observable<ResponseDTOOfListOfEntityStatusDTO | null> {
        let url_ = this.baseUrl + "/api/entityStatus/getEntityStatusByEntityCodeAll?";
        if (entityCode === undefined || entityCode === null)
            throw new Error("The parameter 'entityCode' must be defined and cannot be null.");
        else
            url_ += "entityCode=" + encodeURIComponent("" + entityCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetEntityStatusByEntityCodeAsync(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetEntityStatusByEntityCodeAsync(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfEntityStatusDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfEntityStatusDTO>><any>Observable.throw(response);
        });
    }

    protected processGetEntityStatusByEntityCodeAsync(response: Response): ResponseDTOOfListOfEntityStatusDTO | null {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfEntityStatusDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfEntityStatusDTO.fromJS(resultData200) : new ResponseDTOOfListOfEntityStatusDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class ResponseDTOOfListOfEntityStatusDTO implements IResponseDTOOfListOfEntityStatusDTO {
    data: EntityStatusDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfEntityStatusDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(EntityStatusDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfEntityStatusDTO {
        let result = new ResponseDTOOfListOfEntityStatusDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfEntityStatusDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfEntityStatusDTO {
    data: EntityStatusDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class EntityStatusDTO implements IEntityStatusDTO {
    entityStatusId: number | null;
    code: string | null;
    name: string | null;
    entityCode: string | null;
    sequence: number | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    constructor(data?: IEntityStatusDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityStatusId = data["EntityStatusId"] !== undefined ? data["EntityStatusId"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
            this.entityCode = data["EntityCode"] !== undefined ? data["EntityCode"] : <any>null;
            this.sequence = data["Sequence"] !== undefined ? data["Sequence"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EntityStatusDTO {
        let result = new EntityStatusDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EntityStatusId"] = this.entityStatusId !== undefined ? this.entityStatusId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["EntityCode"] = this.entityCode !== undefined ? this.entityCode : <any>null;
        data["Sequence"] = this.sequence !== undefined ? this.sequence : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new EntityStatusDTO();
        result.init(json);
        return result;
    }
}

export interface IEntityStatusDTO {
    entityStatusId: number | null;
    code: string | null;
    name: string | null;
    entityCode: string | null;
    sequence: number | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
}

/*
    House Client
*/
export interface IHouseClient {
    /**
     * @return OK
     */
    search(search_address: string, search_houseTypeId: number, search_phoneNumber: string, search_name: string, search_code: string, search_houseStatusId: number, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfHouseDTO>;
    /**
     * @return OK
     */
    searchHouseAll(): Observable<ResponseDTOOfListOfHouseDTO | null>;
    /**
     * @return OK
     */
    searchHouseFeatureAndDetail(houseId: number, contractId: number): Observable<ResponseDTOOfListOfHouseFeatureAndDetailDTO | null>;
    /**
     * @return OK
     */
    searchForTypeAhead(search: string): Observable<ResponseDTOOfListOfHouseBasicDTO | null>;
    /**
     * @return OK
     */
    getById(id: number): Observable<ResponseDTOOfHouseDTO | null>;
    /**
     * @return OK
     */
    getHouseTypes(): Observable<ResponseDTOOfListOfHouseTypeDTO>;
    /**
     * @return OK
     */
    getHouseStatuses(): Observable<ResponseDTOOfListOfHouseStatusDTO>;
    /**
     * @return OK
     */
    register(location: RegisterHouseRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(location: UpdateHouseRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(location: DeleteHouseRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    get(getRequest_id: string): Observable<ResponseDTOOfHouseDTO>;
    /**
     * @return OK
     */
    getFeaturesByHouse(houseId: number): Observable<ResponseDTOOfListOfHouseFeatureDTO | null>;
    /**
     * @return OK
     */
    getHouseFeatureStatuses(): Observable<ResponseDTOOfListOfHouseStatusDTO>;
    /**
     * @return OK
     */
    registerFeature(feature: HouseFeatureRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    updateFeature(feature: HouseFeatureRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    deleteFeature(house: DeleteHouseFeatureRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    getHouseServices(houseId: number): Observable<ResponseDTOOfListOfHouseServiceDTO>;
}

@Injectable()
export class HouseClient extends AmigoTenantServiceBase implements IHouseClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:7072";
    }

    /**
     * @return OK
     */
    search(search_address: string, search_houseTypeId: number, search_phoneNumber: string, search_name: string, search_code: string, search_houseStatusId: number, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfHouseDTO> {
      let url_ = this.baseUrl + "/api/house/searchCriteria?";
      if (search_address !== undefined)

          url_ += "search.address=" + encodeURIComponent("" + search_address) + "&";

      if (search_houseTypeId !== undefined)

          url_ += "search.houseTypeId=" + encodeURIComponent("" + search_houseTypeId) + "&";

      if (search_phoneNumber !== undefined)

          url_ += "search.phoneNumber=" + encodeURIComponent("" + search_phoneNumber) + "&";

      if (search_name !== undefined)

          url_ += "search.name=" + encodeURIComponent("" + search_name) + "&";

      if (search_code !== undefined)

          url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";


      if (search_houseStatusId !== undefined)

          url_ += "search.houseStatusId=" + encodeURIComponent("" + search_houseStatusId) + "&";

      if (search_page !== undefined)

          url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

      if (search_pageSize !== undefined)

          url_ += "search.pageSize=" + encodeURIComponent("" + (search_pageSize==0?20:search_pageSize)) + "&";


      const content_ = "";

      return this.http.request(url_, this.transformOptions({
          body: content_,
          method: "get",
          headers: new Headers({
              "Content-Type": "application/json; charset=UTF-8",
              "Accept": "application/json; charset=UTF-8"
          })
      })).map((response) => {
          return this.transformResult(url_, response, (response) => this.processSearch(response));
      }).catch((response: any, caught: any) => {
        // debugger;
        if (response instanceof Response) {
            try {
                return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
            } catch (e) {
                return <Observable<ResponseDTOOfPagedListOfHouseDTO>><any>Observable.throw(e);
            }
        } else
            return <Observable<ResponseDTOOfPagedListOfHouseDTO>><any>Observable.throw(response);
      });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfHouseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfHouseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfHouseDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfHouseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    searchHouseAll(): Observable<ResponseDTOOfListOfHouseDTO | null> {
        let url_ = this.baseUrl + "/api/house/searchHouseAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchHouseAll(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchHouseAll(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchHouseAll(response: Response): Observable<ResponseDTOOfListOfHouseDTO | null> {
        const status = response.status;

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfHouseDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfHouseDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    searchHouseFeatureAndDetail(houseId: number, contractId: number): Observable<ResponseDTOOfListOfHouseFeatureAndDetailDTO | null> {
        let url_ = this.baseUrl + "/api/house/searchHouseFeatureAndDetail?";
        if (houseId === undefined || houseId === null)
            throw new Error("The parameter 'houseId' must be defined and cannot be null.");
        else
            url_ += "houseId=" + encodeURIComponent("" + houseId) + "&";
        if (contractId === undefined || contractId === null)
            throw new Error("The parameter 'contractId' must be defined and cannot be null.");
        else
            url_ += "contractId=" + encodeURIComponent("" + contractId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchHouseFeatureAndDetail(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchHouseFeatureAndDetail(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseFeatureAndDetailDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseFeatureAndDetailDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchHouseFeatureAndDetail(response: Response): Observable<ResponseDTOOfListOfHouseFeatureAndDetailDTO | null> {
        const status = response.status;

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfHouseFeatureAndDetailDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseFeatureAndDetailDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseFeatureAndDetailDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfHouseFeatureAndDetailDTO | null>(<any>null);
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }

    /**
     * @return OK
     */
    searchForTypeAhead(search: string): Observable<ResponseDTOOfListOfHouseBasicDTO | null> {
        let url_ = this.baseUrl + "/api/house/searchForTypeAhead?";
        if (search === undefined || search === null)
            throw new Error("The parameter 'search' must be defined and cannot be null.");
        else
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseBasicDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseBasicDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchForTypeAhead(response: Response): ResponseDTOOfListOfHouseBasicDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseBasicDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseBasicDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseBasicDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getById(id: number): Observable<ResponseDTOOfHouseDTO | null> {
        let url_ = this.baseUrl + "/api/house/getById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfHouseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfHouseDTO>><any>Observable.throw(response);
        });    
    }

    protected processGetById(response: Response): Observable<ResponseDTOOfHouseDTO | null> {
        const status = response.status;

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfHouseDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfHouseDTO.fromJS(resultData200) : new ResponseDTOOfHouseDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfHouseDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    getHouseTypes(): Observable<ResponseDTOOfListOfHouseTypeDTO> {
        let url_ = this.baseUrl + "/api/house/getHouseTypes";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetHouseTypes(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetHouseTypes(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseTypeDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseTypeDTO>><any>Observable.throw(response);
        });
    }

    protected processGetHouseTypes(response: Response): ResponseDTOOfListOfHouseTypeDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseTypeDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseTypeDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseTypeDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getHouseStatuses(): Observable<ResponseDTOOfListOfHouseStatusDTO> {
        let url_ = this.baseUrl + "/api/house/getHouseStatuses";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetHouseStatuses(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetHouseStatuses(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseStatusDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseStatusDTO>><any>Observable.throw(response);
        });
    }

    protected processGetHouseStatuses(response: Response): ResponseDTOOfListOfHouseStatusDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseStatusDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseStatusDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseStatusDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }


    /**
     * @return OK
     */
    getHouseFeatureStatuses(): Observable<ResponseDTOOfListOfHouseStatusDTO> {
        let url_ = this.baseUrl + "/api/house/getHouseFeatureStatuses";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetHouseFeatureStatuses(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetHouseFeatureStatuses(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseStatusDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseStatusDTO>><any>Observable.throw(response);
        });
    }

    protected processGetHouseFeatureStatuses(response: Response): ResponseDTOOfListOfHouseStatusDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseStatusDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseStatusDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseStatusDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

   /**
     * @return OK
     */
    register(house: RegisterHouseRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/register";

        const content_ = JSON.stringify(house ? house.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(house: UpdateHouseRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/update";

        const content_ = JSON.stringify(house ? house.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(house: DeleteHouseRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/delete";

        const content_ = JSON.stringify(house ? house.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
    * @return OK
    */
    get(getRequest_id: string): Observable<ResponseDTOOfHouseDTO> {
        let url_ = this.baseUrl + "/api/house/get?";

        if (getRequest_id !== undefined)
            url_ += "getRequest.id=" + encodeURIComponent("" + getRequest_id) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGet(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGet(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfHouseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfHouseDTO>><any>Observable.throw(response);
        });
    }

    protected processGet(response: Response): ResponseDTOOfHouseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfHouseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfHouseDTO.fromJS(resultData200) : new ResponseDTOOfHouseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
    * @return OK
    */
    getFeaturesByHouse(houseId: number): Observable<ResponseDTOOfListOfHouseFeatureDTO | null> {
        let url_ = this.baseUrl + "/api/house/getFeaturesByHouse?";

        if (houseId !== undefined)
            url_ += "houseId=" + encodeURIComponent("" + houseId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetFeaturesByHouse(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetFeaturesByHouse(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseFeatureDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseFeatureDTO>><any>Observable.throw(response);
        });
    }

    protected processGetFeaturesByHouse(response: Response): ResponseDTOOfListOfHouseFeatureDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseFeatureDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseFeatureDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseFeatureDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    registerFeature(feature: HouseFeatureRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/registerFeature";
        feature.createdBy = 0;
        const content_ = JSON.stringify(feature ? feature.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegisterFeature(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegisterFeature(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegisterFeature(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    updateFeature(feature: HouseFeatureRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/updateFeature";

        const content_ = JSON.stringify(feature ? feature.toJS() : null);
        //debugger;
        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdateFeature(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdateFeature(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdateFeature(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

        /**
     * @return OK
     */
    deleteFeature(house: DeleteHouseFeatureRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/deleteFeature";

        const content_ = JSON.stringify(house ? house.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDeleteFeature(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDeleteFeature(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDeleteFeature(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

        /**
    * @return OK
    */
    getHouseServices(houseId: number): Observable<ResponseDTOOfListOfHouseServiceDTO | null> {
        let url_ = this.baseUrl + "/api/house/getHouseService?";

        if (houseId !== undefined)
            url_ += "houseId=" + encodeURIComponent("" + houseId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetHouseServices(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetHouseServices(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfHouseServiceDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfHouseServiceDTO>><any>Observable.throw(response);
        });
    }

    protected processGetHouseServices(response: Response): ResponseDTOOfListOfHouseServiceDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfHouseServiceDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfHouseServiceDTO.fromJS(resultData200) : new ResponseDTOOfListOfHouseServiceDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

        /**
     * @return OK
     */
    registerHouseService(houseServices: HouseServiceRequest[]): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/house/registerHouseService";
        let content_: string = "[";
        for(var i=0; i < houseServices.length; i++) {
            content_ += JSON.stringify(houseServices[i] ? houseServices[i].toJS() : null) + ",";
        }
        content_ += "]";
        
        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegisterHouseService(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegisterHouseService(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegisterHouseService(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export class ResponseDTOOfListOfHouseTypeDTO {
    data: HouseTypeDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseTypeDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseTypeDTO {
        return new ResponseDTOOfListOfHouseTypeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfHouseTypeDTO(JSON.parse(json));
    }
}

export class HouseTypeDTO {
    id: number;
    code: string;
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
        }
    }

    static fromJS(data: any): HouseTypeDTO {
        return new HouseTypeDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HouseTypeDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfHouseStatusDTO {
    data: HouseStatusDTO[];
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseStatusDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseStatusDTO {
        return new ResponseDTOOfListOfHouseStatusDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJS());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfListOfHouseStatusDTO(JSON.parse(json));
    }
}

export class HouseStatusDTO {
    id: number;
    name: string;
    code: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
        }
    }

    static fromJS(data: any): HouseStatusDTO {
        return new HouseStatusDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Id"] = this.id !== undefined ? this.id : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HouseStatusDTO(JSON.parse(json));
    }
}

export class HouseSearchRequest {
    address: string;
    houseTypeId: number;
    phoneNumber: string;
    name: string;
    code: string;
    houseStatusId: number;
    rowStatus: boolean;
    page: number;
    pageSize: number;
    statusId: number;
    serviveId: any;
    
    constructor(data?: any) {
        if (data !== undefined) {
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.houseTypeId = data["HouseTypeId"] !== undefined ? data["HouseTypeId"] : null;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.houseStatusId = data["HouseStatusId"] !== undefined ? data["HouseStatusId"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): HouseSearchRequest {
        return new HouseSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["HouseTypeId"] = this.houseTypeId !== undefined ? this.houseTypeId : null;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["HouseStatusId"] = this.houseStatusId !== undefined ? this.houseStatusId : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HouseSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfHouseDTO {
    data: PagedListOfHouseDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfHouseDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfHouseDTO {
        return new ResponseDTOOfPagedListOfHouseDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfHouseDTO(JSON.parse(json));
    }
}

export class PagedListOfHouseDTO {
    page: number;
    total: number;
    pageSize: number;
    items: HouseDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(HouseDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfHouseDTO {
        return new PagedListOfHouseDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfHouseDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfListOfHouseBasicDTO implements IResponseDTOOfListOfHouseBasicDTO {
    data: HouseBasicDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseBasicDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseBasicDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseBasicDTO {
        let result = new ResponseDTOOfListOfHouseBasicDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseBasicDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfHouseBasicDTO {
    data: HouseBasicDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class HouseBasicDTO implements IHouseBasicDTO {
    houseId: number | null;
    name: string | null;
    code: string | null;

    constructor(data?: IHouseBasicDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
        }
    }

    static fromJS(data: any): HouseBasicDTO {
        let result = new HouseBasicDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["Name"] = this.name !== undefined ? this.name : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseBasicDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseBasicDTO {
    houseId: number | null;
    name: string | null;
    code: string | null;
}

//export interface IResponseDTOOfListOfEquipmentTypeDTO {
//    data: EquipmentTypeDTO[] | null;
//    isValid: boolean | null;
//    messages: ApplicationMessage[] | null;
//}

export class ResponseDTOOfListOfHouseDTO implements IResponseDTOOfListOfHouseDTO {
    data: HouseDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseDTO {
        let result = new ResponseDTOOfListOfHouseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfHouseDTO {
    data: HouseDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class ResponseDTOOfListOfHouseFeatureDTO implements IResponseDTOOfListOfHouseFeatureDTO {
    data: HouseFeatureDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseFeatureDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseFeatureDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseFeatureDTO {
        let result = new ResponseDTOOfListOfHouseFeatureDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseFeatureDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfHouseFeatureDTO {
    data: HouseFeatureDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class ResponseDTOOfListOfHouseServiceDTO implements IResponseDTOOfListOfHouseServiceDTO {
    data: HouseServiceDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseServiceDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseServiceDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseServiceDTO {
        let result = new ResponseDTOOfListOfHouseServiceDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseServiceDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfHouseServiceDTO {
    data: HouseServiceDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}


export class HouseDTO implements IHouseDTO {
    houseId: number | null;
    name: string | null;
    code: string | null;
    address: string | null;
    rentPrice: number | null;
    rowStatus: boolean | null;
    phoneNumber: string | null;
    houseTypeId: number | null;
    houseTypeName: string | null;
    houseStatusId: number | null;
    statusCode: string | null;
    statusName: string | null;
    shortName: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    latitude: number | null;
    longitude: number | null;
    houseTypeCode: string | null;
    cityId: number | null;
    cityName: string | null;

    constructor(data?: IHouseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.name = data["Name"] !== undefined ? data["Name"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.address = data["Address"] !== undefined ? data["Address"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : <any>null;
            this.houseTypeId = data["HouseTypeId"] !== undefined ? data["HouseTypeId"] : <any>null;
            this.houseTypeName = data["HouseTypeName"] !== undefined ? data["HouseTypeName"] : <any>null;
            this.houseStatusId = data["HouseStatusId"] !== undefined ? data["HouseStatusId"] : <any>null;
            this.statusCode = data["StatusCode"] !== undefined ? data["StatusCode"] : <any>null;
            this.statusName = data["StatusName"] !== undefined ? data["StatusName"] : <any>null;
            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : <any>null;
            
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;

            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : <any>null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : <any>null;
            this.houseTypeCode = data["HouseTypeCode"] !== undefined ? data["HouseTypeCode"] : <any>null;
            this.cityId = data["CityId"] !== undefined ? data["CityId"] : <any>null;
            this.cityName = data["CityName"] !== undefined ? data["CityName"] : <any>null;
        }
    }

    static fromJS(data: any): HouseDTO {
        let result = new HouseDTO();
        result.init(data);
        return result;
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseTypeId"] = this.houseTypeId !== undefined ? this.houseTypeId : null;
        data["HouseTypeName"] = this.houseTypeName !== undefined ? this.houseTypeName : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : null;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["HouseStatusId"] = this.houseStatusId !== undefined ? this.houseStatusId : null;
        data["StatusCode"] = this.statusCode !== undefined ? this.statusCode : null;
        data["StatusName"] = this.statusName !== undefined ? this.statusName : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;

        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
        
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["HouseTypeCode"] = this.houseTypeCode !== undefined ? this.houseTypeCode : null;
        data["CityId"] = this.cityId !== undefined ? this.cityId : null;
        data["CityName"] = this.cityName !== undefined ? this.cityName : null;
        return data;
    }

    toJSON(data?: any) {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseDTO {
    houseId: number | null;
    name: string | null;
    code: string | null;
    address: string | null;
    rentPrice: number | null;
    rowStatus: boolean | null;
    phoneNumber: string | null;
    houseTypeId: number | null;
    houseTypeName: string | null;
    houseStatusId: number | null;
    statusCode: string | null;
    statusName: string | null;
    shortName: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    latitude: number | null;
    longitude: number | null;
    houseTypeCode: string | null;
    cityId: number | null;
}

export class HouseFeatureDTO implements IHouseFeatureDTO {
    houseFeatureId: number | null;
    houseId: number | null;
    featureId: number | null;
    houseFeatureStatusId: number | null;
    isRentable: boolean | null;
    rowStatus: boolean | null;
    addressInfo: string | null;
    rentPrice: number | null;

    houseFeatureStatusName: number | null;

    featureCode: string | null;
    featureDescription: string | null;
    featureMeasure: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    checked: boolean | null;
    sequence: number | null;
    isNew: boolean | null;

    houseTypeCode: string | null;

    constructor(data?: IHouseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.featureId = data["FeatureId"] !== undefined ? data["FeatureId"] : <any>null;
            this.houseFeatureStatusId = data["HouseFeatureStatusId"] !== undefined ? data["HouseFeatureStatusId"] : <any>null;
            this.isRentable = data["IsRentable"] !== undefined ? data["IsRentable"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.addressInfo = data["AdditionalAddressInfo"] !== undefined ? data["AdditionalAddressInfo"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.houseFeatureStatusName = data["HouseFeatureStatusName"] !== undefined ? data["HouseFeatureStatusName"] : <any>null;
            this.featureCode = data["FeatureCode"] !== undefined ? data["FeatureCode"] : <any>null;
            this.featureDescription = data["FeatureDescription"] !== undefined ? data["FeatureDescription"] : <any>null;
            this.featureMeasure = data["FeatureMeasure"] !== undefined ? data["FeatureMeasure"] : <any>null;

            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;

            this.checked = data["Checked"] !== undefined ? data["Checked"] : <any>null;
            this.sequence = data["Sequence"] !== undefined ? data["Sequence"] : <any>null;
            this.isNew  = data["CreatedBy"] !== undefined ? true : false;
        }
    }

    static fromJS(data: any): HouseFeatureDTO {
        let result = new HouseFeatureDTO();
        result.init(data);
        return result;
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : null;
        data["FeatureId"] = this.featureId !== undefined ? this.featureId : null;
        data["HouseFeatureStatusId"] = this.houseFeatureStatusId !== undefined ? this.houseFeatureStatusId : null;
        data["IsRentable"] = this.isRentable !== undefined ? this.isRentable : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["AdditionalAddressInfo"] = this.addressInfo !== undefined ? this.addressInfo : null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : null;
        data["HouseFeatureStatusName"] = this.houseFeatureStatusName !== undefined ? this.houseFeatureStatusName : null;
        data["FeatureCode"] = this.featureCode !== undefined ? this.featureCode : null;
        data["FeatureDescription"] = this.featureDescription !== undefined ? this.featureDescription : null;
        data["FeatureMeasure"] = this.featureMeasure !== undefined ? this.featureMeasure : null;

        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;

        data["Checked"] = this.checked !== undefined ? this.checked : null;
        data["Sequence"] = this.sequence !== undefined ? this.sequence : null;

        return data;
    }

    toJSON(data?: any) {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseFeatureDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseFeatureDTO {
    houseFeatureId: number | null;
    houseId: number | null;
    featureId: number | null;
    houseFeatureStatusId: number | null;
    isRentable: boolean | null;
    rowStatus: boolean | null;
    addressInfo: string | null;
    rentPrice: number | null;

    houseFeatureStatusName: number | null;

    featureCode: string | null;
    featureDescription: string | null;
    featureMeasure: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    checked: boolean | null;
    sequence: number | null;

    houseTypeCode: string | null;
}

export class HouseServiceDTO implements IHouseServiceDTO {
    houseServiceId: number | null;
    houseId: number | null;
    rowStatus: boolean | null;

    serviceDescription: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    checked: boolean | null;

    constructor(data?: IHouseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.houseServiceId = data["HouseServiceId"] !== undefined ? data["HouseServiceId"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.serviceDescription = data["ServiceDescription"] !== undefined ? data["ServiceDescription"] : <any>null;

            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;

            this.checked = data["Checked"] !== undefined ? data["Checked"] : <any>null;
        }
    }

    static fromJS(data: any): HouseServiceDTO {
        let result = new HouseServiceDTO();
        result.init(data);
        return result;
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseServiceId"] = this.houseServiceId !== undefined ? this.houseServiceId : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["ServiceDescription"] = this.serviceDescription !== undefined ? this.serviceDescription : null;

        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;

        data["Checked"] = this.checked !== undefined ? this.checked : null;

        return data;
    }

    toJSON(data?: any) {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseServiceDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseServiceDTO {
    houseServiceId: number | null;
    houseId: number | null;
    rowStatus: boolean | null;

    serviceDescription: string | null;

    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    checked: boolean | null;
}


export class ResponseDTOOfListOfHouseFeatureAndDetailDTO implements IResponseDTOOfListOfHouseFeatureAndDetailDTO {
    data: HouseFeatureAndDetailDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfHouseFeatureAndDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(HouseFeatureAndDetailDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfHouseFeatureAndDetailDTO {
        let result = new ResponseDTOOfListOfHouseFeatureAndDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfHouseFeatureAndDetailDTO();
        result.init(json);
        return result;
    }
}

export class ResponseDTOOfHouseDTO implements IResponseDTOOfHouseDTO {
    data: HouseDTO | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfHouseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"] ? HouseDTO.fromJS(data["Data"]) : <any>null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfHouseDTO {
        let result = new ResponseDTOOfHouseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data ? this.data.toJSON() : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfHouseDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfHouseDTO {
    data: HouseDTO | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export interface IResponseDTOOfListOfHouseFeatureAndDetailDTO {
    data: HouseFeatureAndDetailDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class HouseFeatureAndDetailDTO implements IHouseFeatureAndDetailDTO {
    houseFeatureId: number | null;
    description: string | null;
    marked: boolean | null;
    houseId: number | null;
    isAllHouse: boolean | null;
    rentPrice: number | null;
    houseFeatureStatusId: number | null;
    houseFetureStatusCode: string | null;
    contractId: number | null;
    tableStatus: number | null;
    couldBeDeleted: boolean | null;
    sequence: number | null;
    isDisabled: boolean | null;
    beginDate: Date | null;
    endDate: Date | null;
    contractHouseDetailId: number | null;
    additionalAddressInfo: string | null;

    constructor(data?: IHouseFeatureAndDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : <any>null;
            this.description = data["Description"] !== undefined ? data["Description"] : <any>null;
            this.marked = data["Marked"] !== undefined ? data["Marked"] : <any>null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : <any>null;
            this.isAllHouse = data["IsAllHouse"] !== undefined ? data["IsAllHouse"] : <any>null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : <any>null;
            this.houseFeatureStatusId = data["HouseFeatureStatusId"] !== undefined ? data["HouseFeatureStatusId"] : <any>null;
            this.houseFetureStatusCode = data["HouseFetureStatusCode"] !== undefined ? data["HouseFetureStatusCode"] : <any>null;

            this.contractId = data["ContractId"] !== undefined ? data["ContractId"] : <any>null;
            this.tableStatus = data["TableStatus"] !== undefined ? data["TableStatus"] : <any>null;
            this.couldBeDeleted = data["CouldBeDeleted"] !== undefined ? data["CouldBeDeleted"] : <any>null;
            this.sequence = data["Sequence"] !== undefined ? data["Sequence"] : <any>null;
            this.isDisabled = data["IsDisabled"] !== undefined ? data["IsDisabled"] : <any>null;
            this.beginDate = data["BeginDate"] !== undefined ? data["BeginDate"] : <any>null;
            this.endDate = data["EndDate"] !== undefined ? data["EndDate"] : <any>null;
            this.contractHouseDetailId = data["ContractHouseDetailId"] !== undefined ? data["ContractHouseDetailId"] : <any>null;
            this.additionalAddressInfo = data["AdditionalAddressInfo"] !== undefined ? data["AdditionalAddressInfo"] : <any>null;
        }
    }

    static fromJS(data: any): HouseFeatureAndDetailDTO {
        let result = new HouseFeatureAndDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Marked"] = this.marked !== undefined ? this.marked : <any>null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : <any>null;
        data["IsAllHouse"] = this.isAllHouse !== undefined ? this.isAllHouse : <any>null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : <any>null;
        data["HouseFeatureStatusId"] = this.houseFeatureStatusId !== undefined ? this.houseFeatureStatusId : <any>null;
        data["HouseFetureStatusCode"] = this.houseFetureStatusCode !== undefined ? this.houseFetureStatusCode : <any>null;

        data["ContractId"] = this.contractId !== undefined ? this.contractId : <any>null;
        data["TableStatus"] = this.tableStatus !== undefined ? this.tableStatus : <any>null;
        data["CouldBeDeleted"] = this.couldBeDeleted !== undefined ? this.couldBeDeleted : <any>null;
        data["Sequence"] = this.sequence !== undefined ? this.sequence : <any>null;
        data["IsDisabled"] = this.isDisabled !== undefined ? this.isDisabled : <any>null;
        data["BeginDate"] = this.beginDate !== undefined ? this.beginDate : <any>null;
        data["EndDate"] = this.endDate !== undefined ? this.endDate : <any>null;
        data["ContractHouseDetailId"] = this.contractHouseDetailId !== undefined ? this.contractHouseDetailId : <any>null;
        data["AdditionalAddressInfo"] = this.additionalAddressInfo !== undefined ? this.additionalAddressInfo : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new HouseFeatureAndDetailDTO();
        result.init(json);
        return result;
    }
}

export interface IHouseFeatureAndDetailDTO {
    houseFeatureId: number | null;
    description: string | null;
    marked: boolean | null;
    houseId: number | null;
    isAllHouse: boolean | null;
    rentPrice: number | null;
    houseFeatureStatusId: number | null;
    houseFetureStatusCode: string | null;
    contractId: number | null;
    tableStatus: number | null;
    couldBeDeleted: boolean | null;
    sequence: number | null;
    isDisabled: boolean | null;
    beginDate: Date | null;
    endDate: Date | null;
    contractHouseDetailId: number | null;
    additionalAddressInfo: string | null;
}

export class RegisterHouseRequest {
    houseId: number;
    code: string;
    name: string;
    latitude: number;
    longitude: number;
    address: string;
    phoneNumber: string;
    shortName: string;
    rentPrice: number;
    rentDeposit: number;
    houseTypeId: number;
    houseStatusId: number;
    // coordinates: RegisterHouseCoordinateItem[];
    userId: number;
    username: string;
    cityId: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : null;
            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : 0;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : 0;
            this.houseTypeId = data["HouseTypeId"] !== undefined ? data["HouseTypeId"] : null;
            this.houseStatusId = data["HouseStatusId"] !== undefined ? data["HouseStatusId"] : null;
            // if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
            //     this.coordinates = [];
            //     for (let item of data["Coordinates"])
            //         this.coordinates.push(RegisterHouseCoordinateItem.fromJS(item));
            // }
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.cityId = data["CityId"] !== undefined ? data["CityId"] : null;
        }
    }

    static fromJS(data: any): RegisterHouseRequest {
        return new RegisterHouseRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : 0;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : 0;
        data["HouseTypeId"] = this.houseTypeId !== undefined ? this.houseTypeId : null;
        data["HouseStatusId"] = this.houseStatusId !== undefined ? this.houseStatusId : null;
        // if (this.coordinates && this.coordinates.constructor === Array) {
        //     data["Coordinates"] = [];
        //     for (let item of this.coordinates)
        //         data["Coordinates"].push(item.toJS());
        // }
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["CityId"] = this.cityId !== undefined ? this.cityId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterHouseRequest(JSON.parse(json));
    }
}

export class UpdateHouseRequest {
    code: string;
    name: string;
    latitude: number;
    longitude: number;
    address: string;
    phoneNumber: string;
    shortName: string;
    rentPrice: number;
    rentDeposit: number;
    houseTypeId: number;
    houseStatusId: number;
    createdBy: number;
    creationDate: Date;
    houseId: number;
    cityId: number;
    // coordinates: RegisterHouseCoordinateItem[];
    userId: number;
    userName: string;
    rowStatus: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.name = data["Name"] !== undefined ? data["Name"] : null;
            this.latitude = data["Latitude"] !== undefined ? data["Latitude"] : null;
            this.longitude = data["Longitude"] !== undefined ? data["Longitude"] : null;
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.phoneNumber = data["PhoneNumber"] !== undefined ? data["PhoneNumber"] : null;
            this.shortName = data["ShortName"] !== undefined ? data["ShortName"] : null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : 0;
            this.rentDeposit = data["RentDeposit"] !== undefined ? data["RentDeposit"] : 0;
            this.houseTypeId = data["HouseTypeId"] !== undefined ? data["HouseTypeId"] : null;
            this.houseStatusId = data["HouseStatusId"] !== undefined ? data["HouseStatusId"] : null;
            this.cityId = data["CityId"] !== undefined ? data["CityId"] : null;
            // if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
            //     this.coordinates = [];
            //     for (let item of data["Coordinates"])
            //         this.coordinates.push(RegisterHouseCoordinateItem.fromJS(item));
            // }
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] !== undefined ? data["CreationDate"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
       }
    }

    createFromDTO(data: HouseDTO) : UpdateHouseRequest {
        if (data !== undefined) {
            this.houseId = data["houseId"] !== undefined ? data["houseId"] : null;
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.latitude = data["latitude"] !== undefined ? data["latitude"] : null;
            this.longitude = data["longitude"] !== undefined ? data["longitude"] : null;
            this.address = data["address"] !== undefined ? data["address"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.shortName = data["shortName"] !== undefined ? data["shortName"] : null;
            this.rentPrice = data["rentPrice"] !== undefined ? data["rentPrice"] : 0;
            this.rentDeposit = data["rentDeposit"] !== undefined ? data["rentDeposit"] : 0;
            this.houseTypeId = data["houseTypeId"] !== undefined ? data["houseTypeId"] : null;
            this.houseStatusId = data["houseStatusId"] !== undefined ? data["houseStatusId"] : null;
            this.cityId = data["cityId"] !== undefined ? data["cityId"] : null;
            // if (data["Coordinates"] && data["Coordinates"].constructor === Array) {
            //     this.coordinates = [];
            //     for (let item of data["Coordinates"])
            //         this.coordinates.push(RegisterHouseCoordinateItem.fromJS(item));
            // }
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.creationDate = data["creationDate"] !== undefined ? data["creationDate"] : null;
            this.rowStatus = data["rowStatus"] !== undefined ? data["rowStatus"] : null;
        }
        return this;
    }

    static fromJS(data: any): UpdateHouseRequest {
        return new UpdateHouseRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["Name"] = this.name !== undefined ? this.name : null;
        data["Latitude"] = this.latitude !== undefined ? this.latitude : null;
        data["Longitude"] = this.longitude !== undefined ? this.longitude : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["PhoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["ShortName"] = this.shortName !== undefined ? this.shortName : null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : 0;
        data["RentDeposit"] = this.rentDeposit !== undefined ? this.rentDeposit : 0;
        data["HouseTypeId"] = this.houseTypeId !== undefined ? this.houseTypeId : null;
        data["HouseStatusId"] = this.houseStatusId !== undefined ? this.houseStatusId : null;
        data["CityId"] = this.cityId !== undefined ? this.cityId : null;
        // if (this.coordinates && this.coordinates.constructor === Array) {
        //     data["Coordinates"] = [];
        //     for (let item of this.coordinates)
        //         data["Coordinates"].push(item.toJS());
        // }
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate !== undefined ? this.creationDate : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateHouseRequest(JSON.parse(json));
    }
}

export class DeleteHouseRequest {
    houseId: number;
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): DeleteHouseRequest {
        return new DeleteHouseRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteHouseRequest(JSON.parse(json));
    }
}

export class HouseFeatureRequest {
    houseFeatureId: number;
    houseId: number;
    featureId: number;
    houseFeatureStatusId: number;
    isRentable: boolean;
    rowStatus: boolean;
    addressInfo: string;
    rentPrice: number;

    createdBy: number;
    creationDate: Date;
    userId: number;
    userName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : null;
            this.featureId = data["FeatureId"] !== undefined ? data["FeatureId"] : null;
            this.houseFeatureStatusId = data["HouseFeatureStatusId"] !== undefined ? data["HouseFeatureStatusId"] : null;
            this.isRentable = data["IsRentable"] !== undefined ? data["IsRentable"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.addressInfo = data["AdditionalAddressInfo"] !== undefined ? data["AdditionalAddressInfo"] : null;
            this.rentPrice = data["RentPrice"] !== undefined ? data["RentPrice"] : null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] !== undefined ? data["CreationDate"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
        }
    }

    static fromJS(data: any): HouseFeatureRequest {
        return new HouseFeatureRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : null;
        data["FeatureId"] = this.featureId !== undefined ? this.featureId : null;
        data["HouseFeatureStatusId"] = this.houseFeatureStatusId !== undefined ? this.houseFeatureStatusId : null;
        data["IsRentable"] = this.isRentable !== undefined ? this.isRentable : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["AdditionalAddressInfo"] = this.addressInfo !== undefined ? this.addressInfo : null;
        data["RentPrice"] = this.rentPrice !== undefined ? this.rentPrice : 0;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate !== undefined ? this.creationDate : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HouseFeatureRequest(JSON.parse(json));
    }
}

export class DeleteHouseFeatureRequest {
    houseId: number;
    houseFeatureId: number;
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.houseFeatureId = data["HouseFeatureId"] !== undefined ? data["HouseFeatureId"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): DeleteHouseFeatureRequest {
        return new DeleteHouseFeatureRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseFeatureId"] = this.houseFeatureId !== undefined ? this.houseFeatureId : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteHouseFeatureRequest(JSON.parse(json));
    }
}

export class HouseServiceRequest {
    houseServiceId: number;
    houseId: number;
    serviceId: number;

    dueMonthDay: string;
    initialMonthDay: string;
    finalMonthDay: string;

    rowStatus: boolean;
    createdBy: number;
    creationDate: Date;
    userId: number;
    userName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.houseId = data["HouseId"] !== undefined ? data["HouseId"] : null;
            this.houseServiceId = data["HouseServiceId"] !== undefined ? data["HouseServiceId"] : null;
            this.serviceId = data["ServiceId"] !== undefined ? data["ServiceId"] : null;
            this.dueMonthDay = data["DueDateMonthDay"] !== undefined ? data["DueDateMonthDay"] : null;
            this.initialMonthDay = data["InitialServiceMonthDay"] !== undefined ? data["InitialServiceMonthDay"] : null;
            this.finalMonthDay = data["FinalServiceMonthDay"] !== undefined ? data["FinalServiceMonthDay"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] !== undefined ? data["CreationDate"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.userName = data["UserName"] !== undefined ? data["UserName"] : null;
        }
    }

    static fromJS(data: any): HouseServiceRequest {
        return new HouseServiceRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["HouseId"] = this.houseId !== undefined ? this.houseId : null;
        data["HouseServiceId"] = this.houseServiceId !== undefined ? this.houseServiceId : null;
        data["ServiceId"] = this.serviceId !== undefined ? this.serviceId : null;
        data["DueDateMonthDay"] = this.dueMonthDay !== undefined ? this.dueMonthDay : null;
        data["InitialServiceMonthDay"] = this.initialMonthDay !== undefined ? this.initialMonthDay : 0;
        data["FinalServiceMonthDay"] = this.finalMonthDay !== undefined ? this.finalMonthDay : 0;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate !== undefined ? this.creationDate : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["UserName"] = this.userName !== undefined ? this.userName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HouseServiceRequest(JSON.parse(json));
    }
}


/*  
    Feature Table 
 */

export interface IFeatureClient {
    /**
     * @return OK
     */
    searchFeatureAll(houseTypeCode: string): Observable<ResponseDTOOfListOfFeatureDTO | null>;
}

@Injectable()
export class FeatureClient extends AmigoTenantServiceBase implements IFeatureClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    searchFeatureAll(houseTypeCode: string): Observable<ResponseDTOOfListOfFeatureDTO | null> {
        let url_ = this.baseUrl + "/api/feature/searchFeatureAll?";

        if (houseTypeCode !== undefined)
            url_ += "houseTypeCode=" + encodeURIComponent("" + houseTypeCode) + "&";

        url_ = url_.replace(/[?&]$/, "");


        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchFeatureAll(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchFeatureAll(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfFeatureDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfFeatureDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchFeatureAll(response: Response): Observable<ResponseDTOOfListOfFeatureDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfFeatureDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfFeatureDTO.fromJS(resultData200) : new ResponseDTOOfListOfFeatureDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfFeatureDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    getFeaturesByHouseType(houseTypeId: number): Observable<ResponseDTOOfListOfFeatureDTO | null> {
        let url_ = this.baseUrl + "/api/feature/getFeaturesByHouseType?";
        if (houseTypeId === undefined || houseTypeId === null)
            throw new Error("The parameter 'houseTypeId' must be defined and cannot be null.");
        else
            url_ += "houseTypeId=" + encodeURIComponent("" + houseTypeId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetFeaturesByHouseType(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchFeatureAll(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfFeatureDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfFeatureDTO>><any>Observable.throw(response);
        });
    }

    protected processGetFeaturesByHouseType(response: Response): Observable<ResponseDTOOfListOfFeatureDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfFeatureDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfFeatureDTO.fromJS(resultData200) : new ResponseDTOOfListOfFeatureDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfFeatureDTO | null>(<any>null);
    }
}

//export interface IResponseDTOOfListOfEquipmentTypeDTO {
//    data: EquipmentTypeDTO[] | null;
//    isValid: boolean | null;
//    messages: ApplicationMessage[] | null;
//}

export class ResponseDTOOfListOfFeatureDTO implements IResponseDTOOfListOfFeatureDTO {
    data: FeatureDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfFeatureDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(FeatureDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfFeatureDTO {
        let result = new ResponseDTOOfListOfFeatureDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfFeatureDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfFeatureDTO {
    data: FeatureDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class FeatureDTO implements IFeatureDTO {
    featureId: number | null;
    code: string | null;
    description: string | null;
    measure: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    isAllHouse: boolean | null;

    constructor(data?: IFeatureDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureId = data["FeatureId"] !== undefined ? data["FeatureId"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.description = data["Description"] !== undefined ? data["Description"] : <any>null;
            this.measure = data["Measure"] !== undefined ? data["Measure"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.isAllHouse = data["IsAllHouse"] !== undefined ? data["IsAllHouse"] : <any>null;
        }
    }

    static fromJS(data: any): FeatureDTO {
        let result = new FeatureDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FeatureId"] = this.featureId !== undefined ? this.featureId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["Measure"] = this.measure !== undefined ? this.measure : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["IsAllHouse"] = this.isAllHouse !== undefined ? this.isAllHouse : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new FeatureDTO();
        result.init(json);
        return result;
    }
}

export interface IFeatureDTO {
    featureId: number | null;
    code: string | null;
    description: string | null;
    measure: number | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    isAllHouse: boolean | null;
}

/*  
    Feature Table 
 */
export enum EntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum ActivityEventLogDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum DriverPayReportSearchRequestEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum ActionDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum ActionRequestEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum PermissionDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum AmigoTenantTEventLogDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum AmigoTenantTRoleDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum ModuleTreeDTOModuleTreeType {
    _1 = 1,
    _2 = 2,
}

export enum AmigoTenanttRolPermissionRequestEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum AmigoTenantTServiceRequestEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum AmigoTenantTUserDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum AmigoTenantTUserBasicDTOEntityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum OtherTenantRegisterRequestTableStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum ContractHouseDetailRegisterRequestTableStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}




export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    result?: any;

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

/*  TENANT  */

export interface ITenantClient {
    /**
     * @return OK
     */
    search(search_tenantId: number, search_statusId: number, search_countryId: number, search_typeId: number, search_code: string, search_fullName: string, search_phoneNumber: string, search_rowStatus: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfTenantDTO>;
    /**
     * @return OK
     */
    searchCodeName(search_code: string, search_fullName: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfBasicTenantDTO>;
    /**
     * @return OK
     */
    getById(id: number, typeId: number): Observable<ResponseDTOOfBasicTenantDTO>;
    /**
     * @return OK
     */
    register(tenant: RegisterTenantRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    update(tenant: UpdateTenantRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    delete(tenant: DeleteTenantRequest): Observable<ResponseDTO>;
    /**
     * @return OK
     */
    // getModels(): Observable<ResponseDTOOfListOfModelDTO>;
    /**
     * @return OK
     */
    // getOSVersions(): Observable<ResponseDTOOfListOfOSVersionDTO>;
    /**
     * @return OK
     */
    // getAppVersions(): Observable<ResponseDTOOfListOfAppVersionDTO>;

    searchForTypeAhead(search: string, validateInActiveContract: boolean): Observable<ResponseDTOOfListOfMainTenantBasicDTO | null>;
    /**
     * @return OK
     */
    getTenantById(id: number): Observable<ResponseDTOOfTenantDTO>;
}

@Injectable()
export class TenantClient extends AmigoTenantServiceBase implements ITenantClient {
    private http: Http = null;
    private baseUrl: string = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        //this.baseUrl = baseUrl ? baseUrl : "http://localhost:7072";
        this.baseUrl = environment.serviceUrl.substring(0, environment.serviceUrl.lastIndexOf("/"));
    }

    /**
     * @return OK
     */
    search(search_tenantId: number, search_statusId: number, search_countryId: number, search_typeId: number, search_code: string, search_fullName: string, search_phoneN01: string, search_rowStatus: boolean, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfTenantDTO> {
      let url_ = this.baseUrl + "/api/tenant/searchCriteria?";
      if (search_tenantId !== undefined)

          url_ += "search.tenantId=" + encodeURIComponent("" + search_tenantId) + "&";

      if (search_statusId !== undefined)

          url_ += "search.statusId=" + encodeURIComponent("" + search_statusId) + "&";

      if (search_countryId !== undefined)

          url_ += "search.countryId=" + encodeURIComponent("" + search_countryId) + "&";

      if (search_typeId !== undefined)

          url_ += "search.typeId=" + encodeURIComponent("" + search_typeId) + "&";

      if (search_code !== undefined)

          url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

      if (search_fullName !== undefined)

          url_ += "search.fullName=" + encodeURIComponent("" + search_fullName) + "&";

      if (search_phoneN01 !== undefined)

          url_ += "search.phoneNumber=" + encodeURIComponent("" + search_phoneN01) + "&";

      if (search_statusId !== undefined)

          url_ += "search.rowStatus=" + encodeURIComponent("" + search_statusId) + "&";

      if (search_page !== undefined)

          url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

      if (search_pageSize !== undefined)

          url_ += "search.pageSize=" + encodeURIComponent("" + (search_pageSize==0?20:search_pageSize)) + "&";

      const content_ = "";

      return this.http.request(url_, this.transformOptions({
          body: content_,
          method: "get",
          headers: new Headers({
              "Content-Type": "application/json; charset=UTF-8",
              "Accept": "application/json; charset=UTF-8"
          })
      })).map((response) => {
          return this.transformResult(url_, response, (response) => this.processSearch(response));
      }).catch((response: any, caught: any) => {
        // debugger;
        if (response instanceof Response) {
            try {
                return Observable.of(this.transformResult(url_, response, (response) => this.processSearch(response)));
            } catch (e) {
                return <Observable<ResponseDTOOfPagedListOfTenantDTO>><any>Observable.throw(e);
            }
        } else
            return <Observable<ResponseDTOOfPagedListOfTenantDTO>><any>Observable.throw(response);
      });
    }

    protected processSearch(response: Response): ResponseDTOOfPagedListOfTenantDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfTenantDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfTenantDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfTenantDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    searchCodeName(search_code: string, search_fullName: string, search_page: number, search_pageSize: number): Observable<ResponseDTOOfPagedListOfBasicTenantDTO> {
      let url_ = this.baseUrl + "/api/tenant/searchByCodeName?";
      if (search_code !== undefined)

          url_ += "search.code=" + encodeURIComponent("" + search_code) + "&";

      if (search_fullName !== undefined)

          url_ += "search.fullName=" + encodeURIComponent("" + search_fullName) + "&";

      if (search_page !== undefined)

          url_ += "search.page=" + encodeURIComponent("" + search_page) + "&";

      if (search_pageSize !== undefined)

          url_ += "search.pageSize=" + encodeURIComponent("" + (search_pageSize==0?20:search_pageSize)) + "&";

      const content_ = "";

      return this.http.request(url_, this.transformOptions({
          body: content_,
          method: "get",
          headers: new Headers({
              "Content-Type": "application/json; charset=UTF-8",
              "Accept": "application/json; charset=UTF-8"
          })
      })).map((response) => {
          return this.transformResult(url_, response, (response) => this.processSearchCodeName(response));
      }).catch((response: any, caught: any) => {
        // debugger;
        if (response instanceof Response) {
            try {
                return Observable.of(this.transformResult(url_, response, (response) => this.processSearchCodeName(response)));
            } catch (e) {
                return <Observable<ResponseDTOOfPagedListOfBasicTenantDTO>><any>Observable.throw(e);
            }
        } else
            return <Observable<ResponseDTOOfPagedListOfBasicTenantDTO>><any>Observable.throw(response);
      });
    }

    protected processSearchCodeName(response: Response): ResponseDTOOfPagedListOfBasicTenantDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPagedListOfBasicTenantDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPagedListOfBasicTenantDTO.fromJS(resultData200) : new ResponseDTOOfPagedListOfBasicTenantDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    getById(id: number, typeId: number): Observable<ResponseDTOOfBasicTenantDTO> {
        let url_ = this.baseUrl + "/api/tenant/getById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (typeId === undefined || typeId === null)
            throw new Error("The parameter 'typeId' must be defined and cannot be null.");
        else
            url_ += "typeId=" + encodeURIComponent("" + typeId) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfBasicTenantDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfBasicTenantDTO>><any>Observable.throw(response);
        });    
    }

    protected processSearchById(response: Response): ResponseDTOOfBasicTenantDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfBasicTenantDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfBasicTenantDTO.fromJS(resultData200) : new ResponseDTOOfBasicTenantDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    getTenantById(id: number): Observable<ResponseDTOOfTenantDTO> {
        let url_ = this.baseUrl + "/api/tenant/getTenantById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            //debugger;
            return this.transformResult(url_, response, (response) => this.processSearchTenantById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfTenantDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfTenantDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchTenantById(response: Response): ResponseDTOOfTenantDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfTenantDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfTenantDTO.fromJS(resultData200) : new ResponseDTOOfTenantDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    register(tenant: RegisterTenantRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/tenant/register";

        const content_ = JSON.stringify(tenant ? tenant.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processRegister(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processRegister(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    update(tenant: UpdateTenantRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/tenant/update";

        const content_ = JSON.stringify(tenant ? tenant.toJS() : null);
        //debugger;
        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processUpdate(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processUpdate(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processUpdate(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    delete(tenant: DeleteTenantRequest): Observable<ResponseDTO> {
        let url_ = this.baseUrl + "/api/tenant/delete";

        const content_ = JSON.stringify(tenant ? tenant.toJS() : null);

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processDelete(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processDelete(response)));
                } catch (e) {
                    return <Observable<ResponseDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTO>><any>Observable.throw(response);
        });
    }

    protected processDelete(response: Response): ResponseDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTO.fromJS(resultData200) : new ResponseDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }


    /**
     * @return OK
     */
    searchForTypeAhead(search: string, validateInActiveContract: boolean): Observable<ResponseDTOOfListOfMainTenantBasicDTO | null> {
        let url_ = this.baseUrl + "/api/tenant/searchForTypeAhead?";
        if (search === undefined || search === null)
            throw new Error("The parameter 'search' must be defined and cannot be null.");
        else
            url_ += "search=" + encodeURIComponent("" + search) + "&validateinActiveContract=" + encodeURIComponent("" + validateInActiveContract) +"&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfMainTenantBasicDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfMainTenantBasicDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchForTypeAhead(response: Response): ResponseDTOOfListOfMainTenantBasicDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfMainTenantBasicDTO = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfMainTenantBasicDTO.fromJS(resultData200) : new ResponseDTOOfListOfMainTenantBasicDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }
}

export class ResponseDTOOfListOfMainTenantBasicDTO implements IResponseDTOOfListOfMainTenantBasicDTO {
    data: MainTenantBasicDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfMainTenantBasicDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(MainTenantBasicDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfMainTenantBasicDTO {
        let result = new ResponseDTOOfListOfMainTenantBasicDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfMainTenantBasicDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfMainTenantBasicDTO {
    data: MainTenantBasicDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class MainTenantBasicDTO implements IMainTenantBasicDTO {
    tenantId: number | null;
    code: string | null;
    fullName: string | null;
    typeId: number | null;
    typeCode: string | null;
    typeName: string | null;

    constructor(data?: IMainTenantBasicDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : <any>null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : <any>null;
            this.typeCode = data["TypeCode"] !== undefined ? data["TypeCode"] : <any>null;
            this.typeName = data["TypeName"] !== undefined ? data["TypeName"] : <any>null;
        }
    }

    static fromJS(data: any): MainTenantBasicDTO {
        let result = new MainTenantBasicDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        data["TypeCode"] = this.typeCode !== undefined ? this.typeCode : <any>null;
        data["TypeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new MainTenantBasicDTO();
        result.init(json);
        return result;
    }
}

export interface IMainTenantBasicDTO {
    tenantId: number | null;
    code: string | null;
    fullName: string | null;
    typeId: number | null;
    typeCode: string | null;
    typeName: string | null;
}

export class TenantSearchRequest {
    tenantId: number;
    statusId: number;
    countryId: number;
    typeId: number;
    code: string;
    fullName: string;
    lastName: string;
    phoneN01: string;
    rowStatus: boolean;
    page: number;
    pageSize: number;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : null;
            this.countryId = data["CountryId"] !== undefined ? data["CountryId"] : null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
            this.phoneN01 = data["PhoneN01"] !== undefined ? data["PhoneN01"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
        }
    }

    static fromJS(data: any): TenantSearchRequest {
        return new TenantSearchRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["FirtsName"] = this.fullName !== undefined ? this.fullName : null;
        data["LastName"] = this.lastName !== undefined ? this.lastName : null;
        data["PhoneN01"] = this.phoneN01 !== undefined ? this.phoneN01 : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantSearchRequest(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfTenantDTO {
    data: PagedListOfTenantDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfTenantDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfTenantDTO {
        return new ResponseDTOOfPagedListOfTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfTenantDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfPagedListOfBasicTenantDTO {
    data: PagedListOfBasicTenantDTO;
    isValid: boolean;
    messages: ApplicationMessage[];
    
    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? PagedListOfBasicTenantDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPagedListOfBasicTenantDTO {
        return new ResponseDTOOfPagedListOfBasicTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfPagedListOfBasicTenantDTO(JSON.parse(json));
    }
}

export class PagedListOfTenantDTO {
    page: number;
    total: number;
    pageSize: number;
    items: TenantDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(TenantDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfTenantDTO {
        return new PagedListOfTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfTenantDTO(JSON.parse(json));
    }
}

export class PagedListOfBasicTenantDTO {
    page: number;
    total: number;
    pageSize: number;
    items: BasicTenantDTO[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.page = data["Page"] !== undefined ? data["Page"] : null;
            this.total = data["Total"] !== undefined ? data["Total"] : null;
            this.pageSize = data["PageSize"] !== undefined ? data["PageSize"] : null;
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(BasicTenantDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedListOfBasicTenantDTO {
        return new PagedListOfBasicTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Page"] = this.page !== undefined ? this.page : null;
        data["Total"] = this.total !== undefined ? this.total : null;
        data["PageSize"] = this.pageSize !== undefined ? this.pageSize : null;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedListOfBasicTenantDTO(JSON.parse(json));
    }    
}

export class ResponseDTOOfBasicTenantDTO {
    data: BasicTenantDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? BasicTenantDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfBasicTenantDTO {
        return new ResponseDTOOfBasicTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfBasicTenantDTO(JSON.parse(json));
    }
}

export class ResponseDTOOfTenantDTO {
    data: TenantDTO;
    isValid: boolean;
    messages: ApplicationMessage[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.data = data["Data"] ? TenantDTO.fromJS(data["Data"]) : null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfTenantDTO {
        return new ResponseDTOOfTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["Data"] = this.data ? this.data.toJS() : null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJS());
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResponseDTOOfTenantDTO(JSON.parse(json));
    }
}


export class TenantDTO {
    tenantId: number;
    statusId: number;
    countryId: number;
    typeId: number;
    code: string;
    fullName: string;
    phoneN01: string;
    statusName: string;
    countryName: string;
    typeName: string;
    rowStatus: boolean;
    createdBy: number;
    creationDate: Date;
    updatedBy: number;
    updatedDate: Date;
    idRef: string;
   
    passportNo: string;
    email: string;
    address: string;
    reference: string;
    phoneNo2: string;
    contactName: string;
    contactEmail: string;
    contactRelation: string;
    contactPhone: string;
    
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.countryId = data["CountryId"] !== undefined ? data["CountryId"] : null;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
            this.phoneN01 = data["PhoneN01"] !== undefined ? data["PhoneN01"] : null;
            this.statusName = data["StatusName"] !== undefined ? data["StatusName"] : null;
            this.countryName = data["CountryName"] !== undefined ? data["CountryName"] : null;
            this.typeName = data["TypeName"] !== undefined ? data["TypeName"] : null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : null;
            this.idRef = data["IdRef"] !== undefined ? data["IdRef"] : null;
            
            this.passportNo = data["PassportNo"] !== undefined ? data["PassportNo"] : null;
            this.email = data["Email"] !== undefined ? data["Email"] : null;
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.reference = data["Reference"] !== undefined ? data["Reference"] : null;
            this.phoneNo2 = data["PhoneNo2"] !== undefined ? data["PhoneNo2"] : null;
            this.contactName = data["ContactName"] !== undefined ? data["ContactName"] : null;
            this.contactEmail = data["ContactEmail"] !== undefined ? data["ContactEmail"] : null;
            this.contactRelation = data["ContactRelation"] !== undefined ? data["ContactRelation"] : null;
            this.contactPhone = data["ContactPhone"] !== undefined ? data["ContactPhone"] : null;
        }
    }

    static fromJS(data: any): TenantDTO {
        return new TenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : null;
        data["PhoneN01"] = this.phoneN01 !== undefined ? this.phoneN01 : null;
        data["StatusName"] = this.statusName !== undefined ? this.statusName : null;
        data["CountryName"] = this.countryName !== undefined ? this.countryName : null;
        data["TypeName"] = this.typeName !== undefined ? this.typeName : null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : null;
        data["IdRef"] = this.idRef ? this.idRef : null;

        data["PassportNo"] = this.passportNo !== undefined ? this.passportNo : null;
        data["Email"] = this.email !== undefined ? this.email : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["Reference"] = this.reference !== undefined ? this.reference : null;
        data["PhoneNo2"] = this.phoneNo2 !== undefined ? this.phoneNo2 : null;
        data["ContactName"] = this.contactName !== undefined ? this.contactName : null;
        data["ContactEmail"] = this.contactEmail !== undefined ? this.contactEmail : null;
        data["ContactRelation"] = this.contactRelation !== undefined ? this.contactRelation : null;
        data["ContactPhone"] = this.contactPhone !== undefined ? this.contactPhone : null;
        
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantDTO(JSON.parse(json));
    }
}

export class BasicTenantDTO {
    tenantId : number;
    code: string;
    fullName; string;
    typeId: number;
    typeCode: string;
    typeName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
            this.typeName = data["TypeName"] !== undefined ? data["TypeName"] : null;
            this.typeCode = data["TypeCode"] !== undefined ? data["TypeCode"] : null;
        }
    }

    static fromJS(data: any): BasicTenantDTO {
        return new BasicTenantDTO(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : null;
        data["TypeName"] = this.typeName !== undefined ? this.typeName : null;
        data["TypCode"] = this.typeCode !== undefined ? this.typeCode : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BasicTenantDTO(JSON.parse(json));
    }
}

export class RegisterTenantRequest {
    tenantId: number;
    statusId: number;
    countryId: number;
    typeId: number;
    code: string;
    fullName: string;
    phoneN01: string;
    userId: number;
    username: string;
    idRef: string;

    passportNo: string;
    email: string;
    address: string;
    reference: string;
    phoneNo2: string;
    contactName: string;
    contactEmail: string;
    contactRelation: string;
    contactPhone: string;
    rowStatus: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : null;
            this.countryId = data["CountryId"] !== undefined ? data["CountryId"] : null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
            this.phoneN01 = data["PhoneN01"] !== undefined ? data["PhoneN01"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;

            this.passportNo = data["PassportNo"] !== undefined ? data["PassportNo"] : null;
            this.email = data["Email"] !== undefined ? data["Email"] : null;
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.reference = data["Reference"] !== undefined ? data["Reference"] : null;
            this.phoneNo2 = data["PhoneNo2"] !== undefined ? data["PhoneNo2"] : null;
            this.contactName = data["ContactName"] !== undefined ? data["ContactName"] : null;
            this.contactEmail = data["ContactEmail"] !== undefined ? data["ContactEmail"] : null;
            this.contactRelation = data["ContactRelation"] !== undefined ? data["ContactRelation"] : null;
            this.contactPhone = data["ContactPhone"] !== undefined ? data["ContactPhone"] : null;
            this.idRef = data["IdRef"] !== undefined ? data["IdRef"] : null;

            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
        }
    }

    static fromJS(data: any): RegisterTenantRequest {
        return new RegisterTenantRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : null;
        data["PhoneN01"] = this.phoneN01 !== undefined ? this.phoneN01 : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;

        data["PassportNo"] = this.passportNo !== undefined ? this.passportNo : null;
        data["Email"] = this.email !== undefined ? this.email : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["Reference"] = this.reference !== undefined ? this.reference : null;
        data["PhoneNo2"] = this.phoneNo2 !== undefined ? this.phoneNo2 : null;
        data["ContactName"] = this.contactName !== undefined ? this.contactName : null;
        data["ContactEmail"] = this.contactEmail !== undefined ? this.contactEmail : null;
        data["ContactRelation"] = this.contactRelation !== undefined ? this.contactRelation : null;
        data["ContactPhone"] = this.contactPhone !== undefined ? this.contactPhone : null;
        data["IdRef"] = this.idRef !== undefined ? this.idRef : null;
        
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterTenantRequest(JSON.parse(json));
    }
}

export class UpdateTenantRequest {
    tenantId: number;
    statusId: number;
    countryId: number;
    typeId: number;
    code: string;
    fullName: string;
    phoneN01: string;
    userId: number;
    username: string;
    idRef: string;

    passportNo: string;
    email: string;
    address: string;
    reference: string;
    phoneNo2: string;
    contactName: string;
    contactEmail: string;
    contactRelation: string;
    contactPhone: string;
    rowStatus: boolean;

    createdBy: number;
    creationDate: Date;

    constructor(data?: any) {
        //debugger;
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.statusId = data["StatusId"] !== undefined ? data["StatusId"] : null;
            this.countryId = data["CountryId"] !== undefined ? data["CountryId"] : null;
            this.typeId = data["TypeId"] !== undefined ? data["TypeId"] : null;
            this.code = data["Code"] !== undefined ? data["Code"] : null;
            this.fullName = data["FullName"] !== undefined ? data["FullName"] : null;
            this.phoneN01 = data["PhoneN01"] !== undefined ? data["PhoneN01"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;

            this.passportNo = data["PassportNo"] !== undefined ? data["PassportNo"] : null;
            this.email = data["Email"] !== undefined ? data["Email"] : null;
            this.address = data["Address"] !== undefined ? data["Address"] : null;
            this.reference = data["Reference"] !== undefined ? data["Reference"] : null;
            this.phoneNo2 = data["PhoneNo2"] !== undefined ? data["PhoneNo2"] : null;
            this.contactName = data["ContactName"] !== undefined ? data["ContactName"] : null;
            this.contactEmail = data["ContactEmail"] !== undefined ? data["ContactEmail"] : null;
            this.contactRelation = data["ContactRelation"] !== undefined ? data["ContactRelation"] : null;
            this.contactPhone = data["ContactPhone"] !== undefined ? data["ContactPhone"] : null;
            this.idRef = data["IdRef"] !== undefined ? data["IdRef"] : null;

            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : null;
            this.creationDate = data["CreationDate"] !== undefined ? data["CreationDate"] : null;
        }
    }

    static fromJS(data: any): UpdateTenantRequest {
        return new UpdateTenantRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["StatusId"] = this.statusId !== undefined ? this.statusId : null;
        data["CountryId"] = this.countryId !== undefined ? this.countryId : null;
        data["TypeId"] = this.typeId !== undefined ? this.typeId : null;
        data["Code"] = this.code !== undefined ? this.code : null;
        data["FullName"] = this.fullName !== undefined ? this.fullName : null;
        data["PhoneN01"] = this.phoneN01 !== undefined ? this.phoneN01 : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;

        data["PassportNo"] = this.passportNo !== undefined ? this.passportNo : null;
        data["Email"] = this.email !== undefined ? this.email : null;
        data["Address"] = this.address !== undefined ? this.address : null;
        data["Reference"] = this.reference !== undefined ? this.reference : null;
        data["PhoneNo2"] = this.phoneNo2 !== undefined ? this.phoneNo2 : null;
        data["ContactName"] = this.contactName !== undefined ? this.contactName : null;
        data["ContactEmail"] = this.contactEmail !== undefined ? this.contactEmail : null;
        data["ContactRelation"] = this.contactRelation !== undefined ? this.contactRelation : null;
        data["ContactPhone"] = this.contactPhone !== undefined ? this.contactPhone : null;
        data["IdRef"] = this.idRef !== undefined ? this.idRef : null;
        
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["CreationDate"] = this.creationDate !== undefined ? this.creationDate : null;

        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateTenantRequest(JSON.parse(json));
    }
}

export class DeleteTenantRequest {
    tenantId: number;
    userId: number;
    username: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["TenantId"] !== undefined ? data["TenantId"] : null;
            this.userId = data["UserId"] !== undefined ? data["UserId"] : null;
            this.username = data["Username"] !== undefined ? data["Username"] : null;
        }
    }

    static fromJS(data: any): DeleteTenantRequest {
        return new DeleteTenantRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["TenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["UserId"] = this.userId !== undefined ? this.userId : null;
        data["Username"] = this.username !== undefined ? this.username : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new DeleteTenantRequest(JSON.parse(json));
    }
}

/*  General Table  */

export interface IGeneralTableClient {
    /**
     * @return OK
     */
    getGeneralTableByTableNameAsync(tableName: string): Observable<ResponseDTOOfListOfGeneralTableDTO | null>;
}

@Injectable()
export class GeneralTableClient extends AmigoTenantServiceBase implements IGeneralTableClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:7072";
    }

    /**
     * @return OK
     */
    getGeneralTableByTableNameAsync(tableName: string): Observable<ResponseDTOOfListOfGeneralTableDTO | null> {
        let url_ = this.baseUrl + "/api/generalTable/getGeneralTableByTableNameAll?";
        if (tableName === undefined || tableName === null)
            throw new Error("The parameter 'tableName' must be defined and cannot be null.");
        else
            url_ += "tableName=" + encodeURIComponent("" + tableName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetGeneralTableByTableNameAsync(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetGeneralTableByTableNameAsync(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfGeneralTableDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfGeneralTableDTO>><any>Observable.throw(response);
        });

    }

    protected processGetGeneralTableByTableNameAsync(response: Response): Observable<ResponseDTOOfListOfGeneralTableDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfGeneralTableDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfGeneralTableDTO.fromJS(resultData200) : new ResponseDTOOfListOfGeneralTableDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfGeneralTableDTO | null>(<any>null);
    }
}

export class ResponseDTOOfListOfGeneralTableDTO implements IResponseDTOOfListOfGeneralTableDTO {
    data: GeneralTableDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfGeneralTableDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(GeneralTableDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfGeneralTableDTO {
        let result = new ResponseDTOOfListOfGeneralTableDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfGeneralTableDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfGeneralTableDTO {
    data: GeneralTableDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class GeneralTableDTO implements IGeneralTableDTO {
    generalTableId: number | null;
    code: string | null;
    tableName: string | null;
    value: string | null;
    sequence: number | null;
    byDefault: boolean | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    constructor(data?: IGeneralTableDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.generalTableId = data["GeneralTableId"] !== undefined ? data["GeneralTableId"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.tableName = data["TableName"] !== undefined ? data["TableName"] : <any>null;
            this.value = data["Value"] !== undefined ? data["Value"] : <any>null;
            this.sequence = data["Sequence"] !== undefined ? data["Sequence"] : <any>null;
            this.byDefault = data["ByDefault"] !== undefined ? data["ByDefault"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GeneralTableDTO {
        let result = new GeneralTableDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["GeneralTableId"] = this.generalTableId !== undefined ? this.generalTableId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["TableName"] = this.tableName !== undefined ? this.tableName : <any>null;
        data["Value"] = this.value !== undefined ? this.value : <any>null;
        data["Sequence"] = this.sequence !== undefined ? this.sequence : <any>null;
        data["ByDefault"] = this.byDefault !== undefined ? this.byDefault : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new GeneralTableDTO();
        result.init(json);
        return result;
    }
}

export interface IGeneralTableDTO {
    generalTableId: number | null;
    code: string | null;
    tableName: string | null;
    value: string | null;
    sequence: number | null;
    byDefault: boolean | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
}

/*  Country  */

export interface ICountryClient {
    /**
     * @return OK
     */
    getCountriesAll(): Observable<ResponseDTOOfListOfCountryDTO | null>;
}

@Injectable()
export class CountryClient extends AmigoTenantServiceBase implements ICountryClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:7072";
    }

    /**
     * @return OK
     */
    getCountriesAll(): Observable<ResponseDTOOfListOfCountryDTO | null> {
        let url_ = this.baseUrl + "/api/Country/getCountriesAll";
        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetCountryAllAsync(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetCountryAllAsync(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfCountryDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfCountryDTO>><any>Observable.throw(response);
        });

    }

    protected processGetCountryAllAsync(response: Response): Observable<ResponseDTOOfListOfCountryDTO | null> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfCountryDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfCountryDTO.fromJS(resultData200) : new ResponseDTOOfListOfCountryDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfCountryDTO | null>(<any>null);
    }
}

export class ResponseDTOOfListOfCountryDTO implements IResponseDTOOfListOfCountryDTO {
    data: CountryDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfCountryDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(CountryDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfCountryDTO {
        let result = new ResponseDTOOfListOfCountryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfCountryDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfCountryDTO {
    data: CountryDTO[] | null;
    isValid: boolean | null;
    messages: ApplicationMessage[] | null;
}

export class CountryDTO implements ICountryDTO {
    countryId: number | null;
    isoCode: string | null;
    Name: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;

    constructor(data?: ICountryDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryId = data["CountryId"] !== undefined ? data["CountryId"] : <any>null;
            this.isoCode = data["ISOCode"] !== undefined ? data["ISOCode"] : <any>null;
            this.Name = data["Name"] !== undefined ? data["Name"] : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CountryDTO {
        let result = new CountryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryId"] = this.countryId !== undefined ? this.countryId : <any>null;
        data["ISOCode"] = this.isoCode !== undefined ? this.isoCode : <any>null;
        data["Name"] = this.Name !== undefined ? this.Name : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new CountryDTO();
        result.init(json);
        return result;
    }
}

export interface ICountryDTO {
    countryId: number | null;
    isoCode: string | null;
    Name: string | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
}



export interface IPeriodClient {
    /**
     * @return OK
     */
    getPeriodAll(): Observable<ResponseDTOOfListOfPeriodDTO | null>;
    /**
     * @return OK
     */
    searchForTypeAhead(search: string): Observable<ResponseDTOOfListOfPeriodDTO | null>;
    /**
     * @return OK
     */
    getPeriodById(id: number): Observable<ResponseDTOOfPeriodDTO | null>;
}

@Injectable()
export class PeriodClient extends AmigoTenantServiceBase implements IPeriodClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://127.0.0.1:7072";
    }

    /**
     * @return OK
     */
    getPeriodAll(): Observable<ResponseDTOOfListOfPeriodDTO | null> {
        let url_ = this.baseUrl + "/api/period/getPeriodAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetPeriodAll(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetPeriodAll(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfPeriodDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfPeriodDTO>><any>Observable.throw(response);
        });
    }

    protected processGetPeriodAll(response: Response): Observable<ResponseDTOOfListOfPeriodDTO | null> {
        const status = response.status;

        if (status === 200) {
            const responseText = response.text();
            let result200: ResponseDTOOfListOfPeriodDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfPeriodDTO.fromJS(resultData200) : new ResponseDTOOfListOfPeriodDTO();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResponseDTOOfListOfPeriodDTO | null>(<any>null);
    }

    /**
     * @return OK
     */
    searchForTypeAhead(search: string): Observable<ResponseDTOOfListOfPeriodDTO | null> {
        let url_ = this.baseUrl + "/api/period/searchForTypeAhead?";
        if (search === undefined || search === null)
            throw new Error("The parameter 'search' must be defined and cannot be null.");
        else
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processSearchForTypeAhead(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfListOfPeriodDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfListOfPeriodDTO>><any>Observable.throw(response);
        });
    }

    protected processSearchForTypeAhead(response: Response): ResponseDTOOfListOfPeriodDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfListOfPeriodDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfListOfPeriodDTO.fromJS(resultData200) : new ResponseDTOOfListOfPeriodDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return OK
     */
    getPeriodById(id: number): Observable<ResponseDTOOfPeriodDTO | null> {
        let url_ = this.baseUrl + "/api/period/getById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        return this.http.request(url_, this.transformOptions({
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8",
                "Accept": "application/json; charset=UTF-8"
            })
        })).map((response) => {
            return this.transformResult(url_, response, (response) => this.processGetPeriodById(response));
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.transformResult(url_, response, (response) => this.processGetPeriodById(response)));
                } catch (e) {
                    return <Observable<ResponseDTOOfPeriodDTO>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResponseDTOOfPeriodDTO>><any>Observable.throw(response);
        });
    }

    protected processGetPeriodById(response: Response): ResponseDTOOfPeriodDTO {
        const responseText = response.text();
        const status = response.status;

        if (status === 200) {
            let result200: ResponseDTOOfPeriodDTO | null = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResponseDTOOfPeriodDTO.fromJS(resultData200) : new ResponseDTOOfPeriodDTO();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export interface IPeriodDTO {
    periodId: number | null;
    code: string | null;
    beginDate: Date | null;
    endDate: Date | null;
    dueDate: Date | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    sequence: number | null;
}

export class ResponseDTOOfPeriodDTO implements IResponseDTOOfPeriodDTO {
    data: PeriodDTO | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfPeriodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.data = data["Data"] ? PeriodDTO.fromJS(data["Data"]) : <any>null;
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            this.pk = data["Pk"] !== undefined ? data["Pk"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfPeriodDTO {
        let result = new ResponseDTOOfPeriodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Data"] = this.data ? this.data.toJSON() : <any>null;
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["Pk"] = this.pk !== undefined ? this.pk : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfPeriodDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfPeriodDTO {
    data: PeriodDTO | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;
}

export class PeriodDTO implements IPeriodDTO {
    periodId: number | null;
    code: string | null;
    beginDate: Date | null;
    endDate: Date | null;
    dueDate: Date | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    sequence: number | null;

    constructor(data?: IPeriodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.periodId = data["PeriodId"] !== undefined ? data["PeriodId"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            this.beginDate = data["BeginDate"] ? new Date(data["BeginDate"].toString()) : <any>null;
            this.endDate = data["EndDate"] ? new Date(data["EndDate"].toString()) : <any>null;
            this.dueDate = data["DueDate"] ? new Date(data["DueDate"].toString()) : <any>null;
            this.rowStatus = data["RowStatus"] !== undefined ? data["RowStatus"] : <any>null;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : <any>null;
            this.creationDate = data["CreationDate"] ? new Date(data["CreationDate"].toString()) : <any>null;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : <any>null;
            this.updatedDate = data["UpdatedDate"] ? new Date(data["UpdatedDate"].toString()) : <any>null;
            this.sequence = data["Sequence"] !== undefined ? data["Sequence"] : <any>null;
        }
    }

    static fromJS(data: any): PeriodDTO {
        let result = new PeriodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PeriodId"] = this.periodId !== undefined ? this.periodId : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        data["BeginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>null;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["DueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>null;
        data["RowStatus"] = this.rowStatus !== undefined ? this.rowStatus : <any>null;
        data["CreatedBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["CreationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["UpdatedBy"] = this.updatedBy !== undefined ? this.updatedBy : <any>null;
        data["UpdatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>null;
        data["Sequence"] = this.sequence !== undefined ? this.sequence : <any>null;
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new PeriodDTO();
        result.init(json);
        return result;
    }
}

export interface IPeriodDTO {
    periodId: number | null;
    code: string | null;
    beginDate: Date | null;
    endDate: Date | null;
    dueDate: Date | null;
    rowStatus: boolean | null;
    createdBy: number | null;
    creationDate: Date | null;
    updatedBy: number | null;
    updatedDate: Date | null;
    sequence: number | null;
}

export class ResponseDTOOfListOfPeriodDTO implements IResponseDTOOfListOfPeriodDTO {
    data: PeriodDTO[] | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;

    constructor(data?: IResponseDTOOfListOfPeriodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Data"] && data["Data"].constructor === Array) {
                this.data = [];
                for (let item of data["Data"])
                    this.data.push(PeriodDTO.fromJS(item));
            }
            this.isValid = data["IsValid"] !== undefined ? data["IsValid"] : <any>null;
            this.pk = data["Pk"] !== undefined ? data["Pk"] : <any>null;
            this.code = data["Code"] !== undefined ? data["Code"] : <any>null;
            if (data["Messages"] && data["Messages"].constructor === Array) {
                this.messages = [];
                for (let item of data["Messages"])
                    this.messages.push(ApplicationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResponseDTOOfListOfPeriodDTO {
        let result = new ResponseDTOOfListOfPeriodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data && this.data.constructor === Array) {
            data["Data"] = [];
            for (let item of this.data)
                data["Data"].push(item.toJSON());
        }
        data["IsValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["Pk"] = this.pk !== undefined ? this.pk : <any>null;
        data["Code"] = this.code !== undefined ? this.code : <any>null;
        if (this.messages && this.messages.constructor === Array) {
            data["Messages"] = [];
            for (let item of this.messages)
                data["Messages"].push(item.toJSON());
        }
        return data;
    }

    clone() {
        const json = this.toJSON();
        let result = new ResponseDTOOfListOfPeriodDTO();
        result.init(json);
        return result;
    }
}

export interface IResponseDTOOfListOfPeriodDTO {
    data: PeriodDTO[] | null;
    isValid: boolean | null;
    pk: number | null;
    code: string | null;
    messages: ApplicationMessage[] | null;
}
